{"version":3,"file":"Habits-DukPGCrA.js","sources":["../../src/stores/streakStore.ts","../../src/components/Habit/StreakDisplay.tsx","../../src/components/Habit/HabitChain.tsx","../../src/components/Habit/GracePeriodDialog.tsx","../../src/components/Habit/StreakMilestones.tsx","../../src/stores/weeklyGoalsStore.ts","../../src/components/Habit/WeeklyGoalsManager.tsx","../../src/components/Habit/GoalProgressChart.tsx","../../src/components/Habit/GoalAchievements.tsx","../../src/components/Habit/GoalsNeedingAttention.tsx","../../src/components/Habit/FocusScoreDisplay.tsx","../../src/components/Habit/AchievementBadges.tsx","../../src/components/Habit/HabitStatistics.tsx","../../src/pages/Habits.tsx"],"sourcesContent":["import { create } from 'zustand';\nimport { devtools } from 'zustand/middleware';\n\nexport interface StreakInfo {\n  currentStreak: number;\n  longestStreak: number;\n  streakDates: string[];\n  lastStreakDate?: string;\n  gracePeriodActive: boolean;\n  gracePeriodEndsAt?: Date;\n}\n\nexport interface StreakStatistics {\n  totalStreakDays: number;\n  streakPercentage: number;\n  averageFocusTime: number;\n  longestStreakInPeriod: number;\n  streakDays: string[];\n}\n\nexport interface StreakMilestone {\n  milestone: number;\n  daysToGo: number;\n  description: string;\n}\n\nexport interface StreakSettings {\n  minimumFocusTime: number;\n  gracePeriodDays: number;\n  streakRecoveryEnabled: boolean;\n}\n\ninterface StreakState {\n  // Current streak information\n  streakInfo: StreakInfo | null;\n  \n  // Statistics\n  statistics: StreakStatistics | null;\n  \n  // Milestones\n  milestones: StreakMilestone[];\n  \n  // Settings\n  settings: StreakSettings | null;\n  \n  // Loading states\n  loading: {\n    streakInfo: boolean;\n    statistics: boolean;\n    milestones: boolean;\n    settings: boolean;\n    recovery: boolean;\n  };\n  \n  // Error states\n  error: string | null;\n  \n  // Actions\n  fetchStreakInfo: () => Promise<void>;\n  fetchStatistics: (startDate: string, endDate: string) => Promise<void>;\n  fetchMilestones: () => Promise<void>;\n  fetchSettings: () => Promise<void>;\n  updateSettings: (settings: Partial<StreakSettings>) => Promise<void>;\n  recoverStreak: (date: string) => Promise<{ success: boolean; message: string }>;\n  updateDailyStats: (date: string) => Promise<void>;\n  clearError: () => void;\n}\n\nconst API_BASE = '/api/streaks';\n\nexport const useStreakStore = create<StreakState>()(\n  devtools(\n    (set, get) => ({\n      // Initial state\n      streakInfo: null,\n      statistics: null,\n      milestones: [],\n      settings: null,\n      loading: {\n        streakInfo: false,\n        statistics: false,\n        milestones: false,\n        settings: false,\n        recovery: false,\n      },\n      error: null,\n\n      // Actions\n      fetchStreakInfo: async () => {\n        set((state) => ({\n          loading: { ...state.loading, streakInfo: true },\n          error: null,\n        }));\n\n        try {\n          const response = await fetch(`${API_BASE}/current`);\n          if (!response.ok) {\n            throw new Error('Failed to fetch streak info');\n          }\n\n          const streakInfo = await response.json();\n          \n          // Convert gracePeriodEndsAt to Date if it exists\n          if (streakInfo.gracePeriodEndsAt) {\n            streakInfo.gracePeriodEndsAt = new Date(streakInfo.gracePeriodEndsAt);\n          }\n\n          set((state) => ({\n            streakInfo,\n            loading: { ...state.loading, streakInfo: false },\n          }));\n        } catch (error) {\n          set((state) => ({\n            error: error instanceof Error ? error.message : 'Unknown error',\n            loading: { ...state.loading, streakInfo: false },\n          }));\n        }\n      },\n\n      fetchStatistics: async (startDate: string, endDate: string) => {\n        set((state) => ({\n          loading: { ...state.loading, statistics: true },\n          error: null,\n        }));\n\n        try {\n          const response = await fetch(\n            `${API_BASE}/statistics?startDate=${startDate}&endDate=${endDate}`\n          );\n          if (!response.ok) {\n            throw new Error('Failed to fetch streak statistics');\n          }\n\n          const statistics = await response.json();\n          set((state) => ({\n            statistics,\n            loading: { ...state.loading, statistics: false },\n          }));\n        } catch (error) {\n          set((state) => ({\n            error: error instanceof Error ? error.message : 'Unknown error',\n            loading: { ...state.loading, statistics: false },\n          }));\n        }\n      },\n\n      fetchMilestones: async () => {\n        set((state) => ({\n          loading: { ...state.loading, milestones: true },\n          error: null,\n        }));\n\n        try {\n          const response = await fetch(`${API_BASE}/milestones`);\n          if (!response.ok) {\n            throw new Error('Failed to fetch milestones');\n          }\n\n          const milestones = await response.json();\n          set((state) => ({\n            milestones,\n            loading: { ...state.loading, milestones: false },\n          }));\n        } catch (error) {\n          set((state) => ({\n            error: error instanceof Error ? error.message : 'Unknown error',\n            loading: { ...state.loading, milestones: false },\n          }));\n        }\n      },\n\n      fetchSettings: async () => {\n        set((state) => ({\n          loading: { ...state.loading, settings: true },\n          error: null,\n        }));\n\n        try {\n          // For now, we'll use default settings since we don't have a GET endpoint\n          // This would typically fetch from /api/streaks/settings\n          const defaultSettings: StreakSettings = {\n            minimumFocusTime: 25,\n            gracePeriodDays: 1,\n            streakRecoveryEnabled: true,\n          };\n\n          set((state) => ({\n            settings: defaultSettings,\n            loading: { ...state.loading, settings: false },\n          }));\n        } catch (error) {\n          set((state) => ({\n            error: error instanceof Error ? error.message : 'Unknown error',\n            loading: { ...state.loading, settings: false },\n          }));\n        }\n      },\n\n      updateSettings: async (newSettings: Partial<StreakSettings>) => {\n        set((state) => ({\n          loading: { ...state.loading, settings: true },\n          error: null,\n        }));\n\n        try {\n          const response = await fetch(`${API_BASE}/settings`, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(newSettings),\n          });\n\n          if (!response.ok) {\n            throw new Error('Failed to update streak settings');\n          }\n\n          // Update local settings\n          set((state) => ({\n            settings: state.settings ? { ...state.settings, ...newSettings } : null,\n            loading: { ...state.loading, settings: false },\n          }));\n        } catch (error) {\n          set((state) => ({\n            error: error instanceof Error ? error.message : 'Unknown error',\n            loading: { ...state.loading, settings: false },\n          }));\n        }\n      },\n\n      recoverStreak: async (date: string) => {\n        set((state) => ({\n          loading: { ...state.loading, recovery: true },\n          error: null,\n        }));\n\n        try {\n          const response = await fetch(`${API_BASE}/recover`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ date }),\n          });\n\n          const result = await response.json();\n\n          set((state) => ({\n            loading: { ...state.loading, recovery: false },\n          }));\n\n          // Refresh streak info after recovery attempt\n          if (result.success) {\n            get().fetchStreakInfo();\n          }\n\n          return result;\n        } catch (error) {\n          set((state) => ({\n            error: error instanceof Error ? error.message : 'Unknown error',\n            loading: { ...state.loading, recovery: false },\n          }));\n          return { success: false, message: 'Failed to recover streak' };\n        }\n      },\n\n      updateDailyStats: async (date: string) => {\n        try {\n          const response = await fetch(`${API_BASE}/update-daily/${date}`, {\n            method: 'POST',\n          });\n\n          if (!response.ok) {\n            throw new Error('Failed to update daily stats');\n          }\n\n          // Refresh streak info after updating daily stats\n          get().fetchStreakInfo();\n        } catch (error) {\n          set({\n            error: error instanceof Error ? error.message : 'Unknown error',\n          });\n        }\n      },\n\n      clearError: () => {\n        set({ error: null });\n      },\n    }),\n    {\n      name: 'streak-store',\n    }\n  )\n);","import React, { useEffect } from 'react';\r\nimport { Flame, Trophy, Calendar, Clock } from 'lucide-react';\r\nimport { useStreakStore } from '../../stores/streakStore';\r\n\r\ninterface StreakDisplayProps {\r\n  className?: string;\r\n  showDetails?: boolean;\r\n}\r\n\r\n/**\r\n * StreakDisplay Component\r\n * \r\n * Displays current streak information with visual indicators.\r\n * Shows current streak, longest streak, and grace period status.\r\n * Provides quick access to streak recovery if needed.\r\n */\r\nexport const StreakDisplay: React.FC<StreakDisplayProps> = ({ \r\n  className = '', \r\n  showDetails = true \r\n}) => {\r\n  const {\r\n    streakInfo,\r\n    loading,\r\n    error,\r\n    fetchStreakInfo,\r\n    recoverStreak,\r\n    clearError\r\n  } = useStreakStore();\r\n\r\n  // Fetch streak info on component mount\r\n  useEffect(() => {\r\n    fetchStreakInfo();\r\n  }, [fetchStreakInfo]);\r\n\r\n  // Handle streak recovery\r\n  const handleRecoverStreak = async () => {\r\n    if (!streakInfo?.gracePeriodActive) return;\r\n    \r\n    const yesterday = new Date();\r\n    yesterday.setDate(yesterday.getDate() - 1);\r\n    const dateStr = yesterday.toISOString().split('T')[0];\r\n    \r\n    try {\r\n      const result = await recoverStreak(dateStr);\r\n      if (result.success) {\r\n        // Show success message (could integrate with toast system)\r\n        console.log('Streak recovered successfully!');\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to recover streak:', error);\r\n    }\r\n  };\r\n\r\n  if (loading.streakInfo) {\r\n    return (\r\n      <div className={`animate-pulse bg-gray-100 dark:bg-gray-800 rounded-lg p-6 ${className}`}>\r\n        <div className=\"h-4 bg-gray-300 dark:bg-gray-600 rounded w-1/2 mb-4\"></div>\r\n        <div className=\"h-8 bg-gray-300 dark:bg-gray-600 rounded w-1/3 mb-2\"></div>\r\n        <div className=\"h-4 bg-gray-300 dark:bg-gray-600 rounded w-2/3\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className={`bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6 ${className}`}>\r\n        <div className=\"flex items-center gap-2 text-red-600 dark:text-red-400 mb-2\">\r\n          <Calendar className=\"w-5 h-5\" />\r\n          <span className=\"font-medium\">Error Loading Streak</span>\r\n        </div>\r\n        <p className=\"text-red-600 dark:text-red-400 text-sm mb-3\">{error}</p>\r\n        <button\r\n          onClick={() => {\r\n            clearError();\r\n            fetchStreakInfo();\r\n          }}\r\n          className=\"text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 text-sm font-medium\"\r\n        >\r\n          Try Again\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!streakInfo) {\r\n    return (\r\n      <div className={`bg-gray-50 dark:bg-gray-800 rounded-lg p-6 ${className}`}>\r\n        <div className=\"flex items-center gap-2 text-gray-500 dark:text-gray-400\">\r\n          <Calendar className=\"w-5 h-5\" />\r\n          <span>No streak data available</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const getStreakColor = (streak: number) => {\r\n    if (streak >= 30) return 'text-purple-600 dark:text-purple-400';\r\n    if (streak >= 14) return 'text-blue-600 dark:text-blue-400';\r\n    if (streak >= 7) return 'text-green-600 dark:text-green-400';\r\n    if (streak >= 3) return 'text-yellow-600 dark:text-yellow-400';\r\n    return 'text-gray-600 dark:text-gray-400';\r\n  };\r\n\r\n  const getStreakIcon = (streak: number) => {\r\n    if (streak >= 30) return <Trophy className=\"w-6 h-6\" />;\r\n    return <Flame className=\"w-6 h-6\" />;\r\n  };\r\n\r\n  return (\r\n    <div className={`bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6 ${className}`}>\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between mb-4\">\r\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n          Focus Streak\r\n        </h3>\r\n        {streakInfo.gracePeriodActive && (\r\n          <div className=\"flex items-center gap-1 text-amber-600 dark:text-amber-400 text-sm\">\r\n            <Clock className=\"w-4 h-4\" />\r\n            <span>Grace Period</span>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Current Streak */}\r\n      <div className=\"flex items-center gap-3 mb-4\">\r\n        <div className={`${getStreakColor(streakInfo.currentStreak)}`}>\r\n          {getStreakIcon(streakInfo.currentStreak)}\r\n        </div>\r\n        <div>\r\n          <div className=\"flex items-baseline gap-2\">\r\n            <span className={`text-3xl font-bold ${getStreakColor(streakInfo.currentStreak)}`}>\r\n              {streakInfo.currentStreak}\r\n            </span>\r\n            <span className=\"text-gray-500 dark:text-gray-400 text-sm\">\r\n              {streakInfo.currentStreak === 1 ? 'day' : 'days'}\r\n            </span>\r\n          </div>\r\n          <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\r\n            Current streak\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      {showDetails && (\r\n        <>\r\n          {/* Longest Streak */}\r\n          <div className=\"flex items-center justify-between py-2 border-t border-gray-100 dark:border-gray-700\">\r\n            <span className=\"text-gray-600 dark:text-gray-400 text-sm\">\r\n              Longest streak\r\n            </span>\r\n            <span className=\"font-medium text-gray-900 dark:text-white\">\r\n              {streakInfo.longestStreak} {streakInfo.longestStreak === 1 ? 'day' : 'days'}\r\n            </span>\r\n          </div>\r\n\r\n          {/* Last Streak Date */}\r\n          {streakInfo.lastStreakDate && (\r\n            <div className=\"flex items-center justify-between py-2 border-t border-gray-100 dark:border-gray-700\">\r\n              <span className=\"text-gray-600 dark:text-gray-400 text-sm\">\r\n                Last streak day\r\n              </span>\r\n              <span className=\"font-medium text-gray-900 dark:text-white\">\r\n                {new Date(streakInfo.lastStreakDate).toLocaleDateString()}\r\n              </span>\r\n            </div>\r\n          )}\r\n\r\n          {/* Grace Period Info */}\r\n          {streakInfo.gracePeriodActive && streakInfo.gracePeriodEndsAt && (\r\n            <div className=\"mt-4 p-3 bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800 rounded-lg\">\r\n              <div className=\"flex items-center gap-2 text-amber-700 dark:text-amber-300 mb-2\">\r\n                <Clock className=\"w-4 h-4\" />\r\n                <span className=\"font-medium text-sm\">Grace Period Active</span>\r\n              </div>\r\n              <p className=\"text-amber-600 dark:text-amber-400 text-xs mb-3\">\r\n                Your streak is protected until {streakInfo.gracePeriodEndsAt.toLocaleDateString()}. \r\n                Complete a focus session to maintain your streak!\r\n              </p>\r\n              <button\r\n                onClick={handleRecoverStreak}\r\n                disabled={loading.recovery}\r\n                className=\"w-full bg-amber-600 hover:bg-amber-700 disabled:bg-amber-400 text-white text-sm font-medium py-2 px-3 rounded-md transition-colors\"\r\n              >\r\n                {loading.recovery ? 'Recovering...' : 'Recover Streak'}\r\n              </button>\r\n            </div>\r\n          )}\r\n\r\n          {/* Streak Motivation */}\r\n          {streakInfo.currentStreak === 0 && (\r\n            <div className=\"mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg\">\r\n              <p className=\"text-blue-700 dark:text-blue-300 text-sm\">\r\n                🎯 Start your focus journey! Complete a 25-minute session to begin your streak.\r\n              </p>\r\n            </div>\r\n          )}\r\n\r\n          {streakInfo.currentStreak > 0 && streakInfo.currentStreak < 7 && (\r\n            <div className=\"mt-4 p-3 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg\">\r\n              <p className=\"text-green-700 dark:text-green-300 text-sm\">\r\n                🔥 Great start! Keep going to reach your first week streak.\r\n              </p>\r\n            </div>\r\n          )}\r\n\r\n          {streakInfo.currentStreak >= 7 && streakInfo.currentStreak < 30 && (\r\n            <div className=\"mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg\">\r\n              <p className=\"text-blue-700 dark:text-blue-300 text-sm\">\r\n                ⭐ Excellent consistency! You're building a strong habit.\r\n              </p>\r\n            </div>\r\n          )}\r\n\r\n          {streakInfo.currentStreak >= 30 && (\r\n            <div className=\"mt-4 p-3 bg-purple-50 dark:bg-purple-900/20 border border-purple-200 dark:border-purple-800 rounded-lg\">\r\n              <p className=\"text-purple-700 dark:text-purple-300 text-sm\">\r\n                🏆 Incredible dedication! You're a focus master.\r\n              </p>\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StreakDisplay;","import React, { useEffect, useState } from 'react';\r\nimport { Calendar, ChevronLeft, ChevronRight } from 'lucide-react';\r\nimport { useStreakStore } from '../../stores/streakStore';\r\n\r\ninterface HabitChainProps {\r\n  className?: string;\r\n  daysToShow?: number;\r\n  showNavigation?: boolean;\r\n}\r\n\r\n/**\r\n * HabitChain Component\r\n * \r\n * Visual representation of daily habits as a chain of completed days.\r\n * Shows streak days, missed days, and current progress.\r\n * Provides navigation to view different time periods.\r\n */\r\nexport const HabitChain: React.FC<HabitChainProps> = ({\r\n  className = '',\r\n  daysToShow = 30,\r\n  showNavigation = true\r\n}) => {\r\n  const { streakInfo, fetchStreakInfo } = useStreakStore();\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n\r\n  useEffect(() => {\r\n    fetchStreakInfo();\r\n  }, [fetchStreakInfo]);\r\n\r\n  // Generate array of dates to display\r\n  const generateDateRange = (endDate: Date, days: number) => {\r\n    const dates = [];\r\n    for (let i = days - 1; i >= 0; i--) {\r\n      const date = new Date(endDate);\r\n      date.setDate(date.getDate() - i);\r\n      dates.push(date);\r\n    }\r\n    return dates;\r\n  };\r\n\r\n  const dates = generateDateRange(currentDate, daysToShow);\r\n  const today = new Date().toISOString().split('T')[0];\r\n\r\n  // Navigation handlers\r\n  const goToPreviousPeriod = () => {\r\n    const newDate = new Date(currentDate);\r\n    newDate.setDate(newDate.getDate() - daysToShow);\r\n    setCurrentDate(newDate);\r\n  };\r\n\r\n  const goToNextPeriod = () => {\r\n    const newDate = new Date(currentDate);\r\n    newDate.setDate(newDate.getDate() + daysToShow);\r\n    setCurrentDate(newDate);\r\n  };\r\n\r\n  const goToToday = () => {\r\n    setCurrentDate(new Date());\r\n  };\r\n\r\n  // Check if a date is a streak day\r\n  const isStreakDay = (date: Date) => {\r\n    const dateStr = date.toISOString().split('T')[0];\r\n    return streakInfo?.streakDates.includes(dateStr) || false;\r\n  };\r\n\r\n  // Check if date is today\r\n  const isToday = (date: Date) => {\r\n    return date.toISOString().split('T')[0] === today;\r\n  };\r\n\r\n  // Check if date is in the future\r\n  const isFuture = (date: Date) => {\r\n    return date.toISOString().split('T')[0] > today;\r\n  };\r\n\r\n  // Get day status for styling\r\n  const getDayStatus = (date: Date) => {\r\n    if (isFuture(date)) return 'future';\r\n    if (isToday(date)) {\r\n      return isStreakDay(date) ? 'today-completed' : 'today-pending';\r\n    }\r\n    return isStreakDay(date) ? 'completed' : 'missed';\r\n  };\r\n\r\n  // Get styling classes for each day status\r\n  const getDayClasses = (status: string) => {\r\n    const baseClasses = 'w-8 h-8 rounded-full border-2 flex items-center justify-center text-xs font-medium transition-all duration-200 hover:scale-110';\r\n    \r\n    switch (status) {\r\n      case 'completed':\r\n        return `${baseClasses} bg-green-500 border-green-500 text-white shadow-md`;\r\n      case 'today-completed':\r\n        return `${baseClasses} bg-green-500 border-green-500 text-white shadow-lg ring-2 ring-green-300 dark:ring-green-600`;\r\n      case 'today-pending':\r\n        return `${baseClasses} bg-yellow-100 dark:bg-yellow-900/30 border-yellow-400 text-yellow-700 dark:text-yellow-300 shadow-lg ring-2 ring-yellow-300 dark:ring-yellow-600 animate-pulse`;\r\n      case 'missed':\r\n        return `${baseClasses} bg-gray-100 dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-400 dark:text-gray-500`;\r\n      case 'future':\r\n        return `${baseClasses} bg-gray-50 dark:bg-gray-800 border-gray-200 dark:border-gray-700 text-gray-300 dark:text-gray-600`;\r\n      default:\r\n        return baseClasses;\r\n    }\r\n  };\r\n\r\n  // Get tooltip text for each day\r\n  const getTooltipText = (date: Date, status: string) => {\r\n    const dateStr = date.toLocaleDateString();\r\n    switch (status) {\r\n      case 'completed':\r\n        return `✅ ${dateStr} - Focus session completed`;\r\n      case 'today-completed':\r\n        return `🎉 ${dateStr} - Today's focus session completed!`;\r\n      case 'today-pending':\r\n        return `⏰ ${dateStr} - Complete a focus session today`;\r\n      case 'missed':\r\n        return `❌ ${dateStr} - No focus session`;\r\n      case 'future':\r\n        return `📅 ${dateStr} - Future date`;\r\n      default:\r\n        return dateStr;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6 ${className}`}>\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between mb-6\">\r\n        <div className=\"flex items-center gap-2\">\r\n          <Calendar className=\"w-5 h-5 text-gray-600 dark:text-gray-400\" />\r\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n            Habit Chain\r\n          </h3>\r\n        </div>\r\n        \r\n        {showNavigation && (\r\n          <div className=\"flex items-center gap-2\">\r\n            <button\r\n              onClick={goToPreviousPeriod}\r\n              className=\"p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-md transition-colors\"\r\n              title=\"Previous period\"\r\n            >\r\n              <ChevronLeft className=\"w-4 h-4 text-gray-600 dark:text-gray-400\" />\r\n            </button>\r\n            \r\n            <button\r\n              onClick={goToToday}\r\n              className=\"px-3 py-1 text-sm font-medium text-blue-600 dark:text-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded-md transition-colors\"\r\n            >\r\n              Today\r\n            </button>\r\n            \r\n            <button\r\n              onClick={goToNextPeriod}\r\n              disabled={currentDate >= new Date()}\r\n              className=\"p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-md transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\r\n              title=\"Next period\"\r\n            >\r\n              <ChevronRight className=\"w-4 h-4 text-gray-600 dark:text-gray-400\" />\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Date Range Display */}\r\n      <div className=\"text-center mb-4\">\r\n        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n          {dates[0]?.toLocaleDateString()} - {dates[dates.length - 1]?.toLocaleDateString()}\r\n        </p>\r\n      </div>\r\n\r\n      {/* Habit Chain Grid */}\r\n      <div className=\"grid grid-cols-7 gap-2 mb-4\">\r\n        {/* Day labels */}\r\n        {['S', 'M', 'T', 'W', 'T', 'F', 'S'].map((day, index) => (\r\n          <div key={index} className=\"text-center text-xs font-medium text-gray-500 dark:text-gray-400 mb-2\">\r\n            {day}\r\n          </div>\r\n        ))}\r\n        \r\n        {/* Empty cells for alignment */}\r\n        {Array.from({ length: dates[0]?.getDay() || 0 }).map((_, index) => (\r\n          <div key={`empty-${index}`} className=\"w-8 h-8\" />\r\n        ))}\r\n        \r\n        {/* Date cells */}\r\n        {dates.map((date, index) => {\r\n          const status = getDayStatus(date);\r\n          const dayNumber = date.getDate();\r\n          \r\n          return (\r\n            <div\r\n              key={index}\r\n              className={getDayClasses(status)}\r\n              title={getTooltipText(date, status)}\r\n            >\r\n              {dayNumber}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      {/* Legend */}\r\n      <div className=\"flex items-center justify-center gap-6 text-xs\">\r\n        <div className=\"flex items-center gap-2\">\r\n          <div className=\"w-4 h-4 rounded-full bg-green-500\"></div>\r\n          <span className=\"text-gray-600 dark:text-gray-400\">Completed</span>\r\n        </div>\r\n        <div className=\"flex items-center gap-2\">\r\n          <div className=\"w-4 h-4 rounded-full bg-yellow-400\"></div>\r\n          <span className=\"text-gray-600 dark:text-gray-400\">Today</span>\r\n        </div>\r\n        <div className=\"flex items-center gap-2\">\r\n          <div className=\"w-4 h-4 rounded-full bg-gray-300 dark:bg-gray-600\"></div>\r\n          <span className=\"text-gray-600 dark:text-gray-400\">Missed</span>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Statistics */}\r\n      {streakInfo && (\r\n        <div className=\"mt-4 pt-4 border-t border-gray-100 dark:border-gray-700\">\r\n          <div className=\"grid grid-cols-2 gap-4 text-center\">\r\n            <div>\r\n              <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\">\r\n                {streakInfo.streakDates.length}\r\n              </div>\r\n              <div className=\"text-xs text-gray-600 dark:text-gray-400\">\r\n                Total Days\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\r\n                {Math.round((streakInfo.streakDates.length / daysToShow) * 100)}%\r\n              </div>\r\n              <div className=\"text-xs text-gray-600 dark:text-gray-400\">\r\n                Completion Rate\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HabitChain;","import React, { useState } from 'react';\r\nimport { Clock, AlertTriangle, CheckCircle, X } from 'lucide-react';\r\nimport { useStreakStore } from '../../stores/streakStore';\r\n\r\ninterface GracePeriodDialogProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onRecovered?: () => void;\r\n}\r\n\r\n/**\r\n * GracePeriodDialog Component\r\n * \r\n * Modal dialog for streak recovery during grace period.\r\n * Allows users to recover their streak by acknowledging missed days\r\n * and committing to continue their habit.\r\n */\r\nexport const GracePeriodDialog: React.FC<GracePeriodDialogProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  onRecovered\r\n}) => {\r\n  const { streakInfo, loading, recoverStreak } = useStreakStore();\r\n  const [isRecovering, setIsRecovering] = useState(false);\r\n  const [recoveryResult, setRecoveryResult] = useState<{ success: boolean; message: string } | null>(null);\r\n\r\n  if (!isOpen || !streakInfo?.gracePeriodActive) return null;\r\n\r\n  const handleRecoverStreak = async () => {\r\n    setIsRecovering(true);\r\n    setRecoveryResult(null);\r\n\r\n    try {\r\n      // Calculate the date to recover (yesterday)\r\n      const yesterday = new Date();\r\n      yesterday.setDate(yesterday.getDate() - 1);\r\n      const dateStr = yesterday.toISOString().split('T')[0];\r\n\r\n      const result = await recoverStreak(dateStr);\r\n      setRecoveryResult(result);\r\n\r\n      if (result.success) {\r\n        setTimeout(() => {\r\n          onRecovered?.();\r\n          onClose();\r\n        }, 2000); // Close after 2 seconds to show success message\r\n      }\r\n    } catch (error) {\r\n      setRecoveryResult({\r\n        success: false,\r\n        message: 'Failed to recover streak. Please try again.'\r\n      });\r\n    } finally {\r\n      setIsRecovering(false);\r\n    }\r\n  };\r\n\r\n  const formatDate = (date: Date) => {\r\n    return date.toLocaleDateString('en-US', {\r\n      weekday: 'long',\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric'\r\n    });\r\n  };\r\n\r\n  const gracePeriodEndsAt = streakInfo.gracePeriodEndsAt;\r\n  const timeRemaining = gracePeriodEndsAt ? \r\n    Math.max(0, Math.ceil((gracePeriodEndsAt.getTime() - Date.now()) / (1000 * 60 * 60 * 24))) : 0;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full\">\r\n        {/* Header */}\r\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700\">\r\n          <div className=\"flex items-center gap-3\">\r\n            <div className=\"p-2 bg-amber-100 dark:bg-amber-900/30 rounded-full\">\r\n              <Clock className=\"w-5 h-5 text-amber-600 dark:text-amber-400\" />\r\n            </div>\r\n            <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n              Streak Grace Period\r\n            </h2>\r\n          </div>\r\n          <button\r\n            onClick={onClose}\r\n            className=\"p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-md transition-colors\"\r\n          >\r\n            <X className=\"w-5 h-5 text-gray-500 dark:text-gray-400\" />\r\n          </button>\r\n        </div>\r\n\r\n        {/* Content */}\r\n        <div className=\"p-6\">\r\n          {!recoveryResult ? (\r\n            <>\r\n              {/* Grace Period Info */}\r\n              <div className=\"mb-6\">\r\n                <div className=\"flex items-center gap-2 text-amber-600 dark:text-amber-400 mb-3\">\r\n                  <AlertTriangle className=\"w-5 h-5\" />\r\n                  <span className=\"font-medium\">Your streak is protected</span>\r\n                </div>\r\n                <p className=\"text-gray-600 dark:text-gray-400 text-sm mb-4\">\r\n                  You missed yesterday's focus session, but your {streakInfo.currentStreak}-day streak \r\n                  is still safe! You have a grace period to recover it.\r\n                </p>\r\n                \r\n                {gracePeriodEndsAt && (\r\n                  <div className=\"bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800 rounded-lg p-4 mb-4\">\r\n                    <div className=\"text-sm\">\r\n                      <div className=\"font-medium text-amber-800 dark:text-amber-200 mb-1\">\r\n                        Grace period ends:\r\n                      </div>\r\n                      <div className=\"text-amber-700 dark:text-amber-300\">\r\n                        {formatDate(gracePeriodEndsAt)}\r\n                      </div>\r\n                      <div className=\"text-amber-600 dark:text-amber-400 mt-1\">\r\n                        ({timeRemaining} {timeRemaining === 1 ? 'day' : 'days'} remaining)\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              {/* Recovery Options */}\r\n              <div className=\"mb-6\">\r\n                <h3 className=\"font-medium text-gray-900 dark:text-white mb-3\">\r\n                  How to maintain your streak:\r\n                </h3>\r\n                <ul className=\"space-y-2 text-sm text-gray-600 dark:text-gray-400\">\r\n                  <li className=\"flex items-start gap-2\">\r\n                    <div className=\"w-1.5 h-1.5 bg-blue-500 rounded-full mt-2 flex-shrink-0\"></div>\r\n                    <span>Complete a focus session today to continue your streak</span>\r\n                  </li>\r\n                  <li className=\"flex items-start gap-2\">\r\n                    <div className=\"w-1.5 h-1.5 bg-blue-500 rounded-full mt-2 flex-shrink-0\"></div>\r\n                    <span>Or use the recovery option below to acknowledge the missed day</span>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n\r\n              {/* Recovery Action */}\r\n              <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-6\">\r\n                <h4 className=\"font-medium text-blue-900 dark:text-blue-100 mb-2\">\r\n                  Streak Recovery\r\n                </h4>\r\n                <p className=\"text-blue-700 dark:text-blue-300 text-sm mb-3\">\r\n                  If you had a valid reason for missing yesterday (illness, emergency, etc.), \r\n                  you can recover your streak and continue building your habit.\r\n                </p>\r\n                <button\r\n                  onClick={handleRecoverStreak}\r\n                  disabled={isRecovering || loading.recovery}\r\n                  className=\"w-full bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white font-medium py-2 px-4 rounded-md transition-colors\"\r\n                >\r\n                  {isRecovering || loading.recovery ? 'Recovering Streak...' : 'Recover My Streak'}\r\n                </button>\r\n              </div>\r\n            </>\r\n          ) : (\r\n            /* Recovery Result */\r\n            <div className=\"text-center py-4\">\r\n              {recoveryResult.success ? (\r\n                <>\r\n                  <div className=\"p-3 bg-green-100 dark:bg-green-900/30 rounded-full w-fit mx-auto mb-4\">\r\n                    <CheckCircle className=\"w-8 h-8 text-green-600 dark:text-green-400\" />\r\n                  </div>\r\n                  <h3 className=\"text-lg font-semibold text-green-900 dark:text-green-100 mb-2\">\r\n                    Streak Recovered!\r\n                  </h3>\r\n                  <p className=\"text-green-700 dark:text-green-300 text-sm mb-4\">\r\n                    {recoveryResult.message}\r\n                  </p>\r\n                  <p className=\"text-gray-600 dark:text-gray-400 text-xs\">\r\n                    Keep up the great work! Complete today's session to continue building your habit.\r\n                  </p>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <div className=\"p-3 bg-red-100 dark:bg-red-900/30 rounded-full w-fit mx-auto mb-4\">\r\n                    <AlertTriangle className=\"w-8 h-8 text-red-600 dark:text-red-400\" />\r\n                  </div>\r\n                  <h3 className=\"text-lg font-semibold text-red-900 dark:text-red-100 mb-2\">\r\n                    Recovery Failed\r\n                  </h3>\r\n                  <p className=\"text-red-700 dark:text-red-300 text-sm mb-4\">\r\n                    {recoveryResult.message}\r\n                  </p>\r\n                  <button\r\n                    onClick={() => setRecoveryResult(null)}\r\n                    className=\"text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 text-sm font-medium\"\r\n                  >\r\n                    Try Again\r\n                  </button>\r\n                </>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Footer */}\r\n        {!recoveryResult && (\r\n          <div className=\"px-6 py-4 bg-gray-50 dark:bg-gray-700/50 rounded-b-lg\">\r\n            <div className=\"flex justify-end gap-3\">\r\n              <button\r\n                onClick={onClose}\r\n                className=\"px-4 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 font-medium transition-colors\"\r\n              >\r\n                Close\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GracePeriodDialog;","import React, { useEffect } from 'react';\r\nimport { Target, Trophy, Star, Zap } from 'lucide-react';\r\nimport { useStreakStore } from '../../stores/streakStore';\r\n\r\ninterface StreakMilestonesProps {\r\n  className?: string;\r\n  showProgress?: boolean;\r\n}\r\n\r\n/**\r\n * StreakMilestones Component\r\n * \r\n * Displays upcoming streak milestones and progress towards them.\r\n * Shows achievement badges for completed milestones and motivation\r\n * for upcoming goals.\r\n */\r\nexport const StreakMilestones: React.FC<StreakMilestonesProps> = ({\r\n  className = '',\r\n  showProgress = true\r\n}) => {\r\n  const {\r\n    streakInfo,\r\n    milestones,\r\n    loading,\r\n    error,\r\n    fetchMilestones,\r\n    fetchStreakInfo\r\n  } = useStreakStore();\r\n\r\n  useEffect(() => {\r\n    fetchMilestones();\r\n    fetchStreakInfo();\r\n  }, [fetchMilestones, fetchStreakInfo]);\r\n\r\n  // Define milestone configurations\r\n  const milestoneConfigs = [\r\n    { days: 3, title: 'Getting Started', icon: Zap, color: 'text-yellow-500', bgColor: 'bg-yellow-100 dark:bg-yellow-900/30' },\r\n    { days: 7, title: 'One Week', icon: Star, color: 'text-green-500', bgColor: 'bg-green-100 dark:bg-green-900/30' },\r\n    { days: 14, title: 'Two Weeks', icon: Target, color: 'text-blue-500', bgColor: 'bg-blue-100 dark:bg-blue-900/30' },\r\n    { days: 30, title: 'One Month', icon: Trophy, color: 'text-purple-500', bgColor: 'bg-purple-100 dark:bg-purple-900/30' },\r\n    { days: 60, title: 'Two Months', icon: Trophy, color: 'text-indigo-500', bgColor: 'bg-indigo-100 dark:bg-indigo-900/30' },\r\n    { days: 90, title: 'Three Months', icon: Trophy, color: 'text-pink-500', bgColor: 'bg-pink-100 dark:bg-pink-900/30' },\r\n    { days: 180, title: 'Six Months', icon: Trophy, color: 'text-red-500', bgColor: 'bg-red-100 dark:bg-red-900/30' },\r\n    { days: 365, title: 'One Year', icon: Trophy, color: 'text-orange-500', bgColor: 'bg-orange-100 dark:bg-orange-900/30' }\r\n  ];\r\n\r\n  const currentStreak = streakInfo?.currentStreak || 0;\r\n\r\n  // Get milestone status\r\n  const getMilestoneStatus = (days: number) => {\r\n    if (currentStreak >= days) return 'completed';\r\n    return 'upcoming';\r\n  };\r\n\r\n  // Get next milestone\r\n  const getNextMilestone = () => {\r\n    return milestoneConfigs.find(m => m.days > currentStreak);\r\n  };\r\n\r\n  // Calculate progress to next milestone\r\n  const getProgressToNext = () => {\r\n    const next = getNextMilestone();\r\n    if (!next) return 100;\r\n    \r\n    const previous = milestoneConfigs\r\n      .filter(m => m.days <= currentStreak)\r\n      .pop();\r\n    \r\n    const start = previous?.days || 0;\r\n    const progress = ((currentStreak - start) / (next.days - start)) * 100;\r\n    return Math.max(0, Math.min(100, progress));\r\n  };\r\n\r\n  if (loading.milestones || loading.streakInfo) {\r\n    return (\r\n      <div className={`animate-pulse bg-gray-100 dark:bg-gray-800 rounded-lg p-6 ${className}`}>\r\n        <div className=\"h-4 bg-gray-300 dark:bg-gray-600 rounded w-1/2 mb-4\"></div>\r\n        <div className=\"space-y-3\">\r\n          {[1, 2, 3].map(i => (\r\n            <div key={i} className=\"flex items-center gap-3\">\r\n              <div className=\"w-10 h-10 bg-gray-300 dark:bg-gray-600 rounded-full\"></div>\r\n              <div className=\"flex-1\">\r\n                <div className=\"h-3 bg-gray-300 dark:bg-gray-600 rounded w-1/3 mb-1\"></div>\r\n                <div className=\"h-2 bg-gray-300 dark:bg-gray-600 rounded w-1/2\"></div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className={`bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6 ${className}`}>\r\n        <p className=\"text-red-600 dark:text-red-400 text-sm\">{error}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const nextMilestone = getNextMilestone();\r\n  const progressToNext = getProgressToNext();\r\n  const completedMilestones = milestoneConfigs.filter(m => getMilestoneStatus(m.days) === 'completed');\r\n  const upcomingMilestones = milestoneConfigs.filter(m => getMilestoneStatus(m.days) === 'upcoming').slice(0, 3);\r\n\r\n  return (\r\n    <div className={`bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6 ${className}`}>\r\n      {/* Header */}\r\n      <div className=\"flex items-center gap-2 mb-6\">\r\n        <Target className=\"w-5 h-5 text-gray-600 dark:text-gray-400\" />\r\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n          Streak Milestones\r\n        </h3>\r\n      </div>\r\n\r\n      {/* Next Milestone Progress */}\r\n      {nextMilestone && showProgress && (\r\n        <div className=\"mb-6 p-4 bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 rounded-lg border border-blue-200 dark:border-blue-800\">\r\n          <div className=\"flex items-center gap-3 mb-3\">\r\n            <div className={`p-2 ${nextMilestone.bgColor} rounded-full`}>\r\n              <nextMilestone.icon className={`w-5 h-5 ${nextMilestone.color}`} />\r\n            </div>\r\n            <div>\r\n              <h4 className=\"font-medium text-gray-900 dark:text-white\">\r\n                Next: {nextMilestone.title}\r\n              </h4>\r\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                {nextMilestone.days - currentStreak} days to go\r\n              </p>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Progress Bar */}\r\n          <div className=\"mb-2\">\r\n            <div className=\"flex justify-between text-xs text-gray-600 dark:text-gray-400 mb-1\">\r\n              <span>{currentStreak} days</span>\r\n              <span>{nextMilestone.days} days</span>\r\n            </div>\r\n            <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\r\n              <div\r\n                className=\"bg-gradient-to-r from-blue-500 to-purple-500 h-2 rounded-full transition-all duration-500\"\r\n                style={{ width: `${progressToNext}%` }}\r\n              ></div>\r\n            </div>\r\n          </div>\r\n          \r\n          <p className=\"text-xs text-gray-600 dark:text-gray-400\">\r\n            {Math.round(progressToNext)}% complete\r\n          </p>\r\n        </div>\r\n      )}\r\n\r\n      {/* Completed Milestones */}\r\n      {completedMilestones.length > 0 && (\r\n        <div className=\"mb-6\">\r\n          <h4 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\r\n            🏆 Achievements ({completedMilestones.length})\r\n          </h4>\r\n          <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-3\">\r\n            {completedMilestones.map((milestone) => (\r\n              <div\r\n                key={milestone.days}\r\n                className={`${milestone.bgColor} border border-gray-200 dark:border-gray-600 rounded-lg p-3 text-center`}\r\n              >\r\n                <milestone.icon className={`w-6 h-6 ${milestone.color} mx-auto mb-1`} />\r\n                <div className=\"text-xs font-medium text-gray-900 dark:text-white\">\r\n                  {milestone.title}\r\n                </div>\r\n                <div className=\"text-xs text-gray-600 dark:text-gray-400\">\r\n                  {milestone.days} days\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Upcoming Milestones */}\r\n      {upcomingMilestones.length > 0 && (\r\n        <div>\r\n          <h4 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\r\n            🎯 Upcoming Goals\r\n          </h4>\r\n          <div className=\"space-y-3\">\r\n            {upcomingMilestones.map((milestone, index) => {\r\n              const daysToGo = milestone.days - currentStreak;\r\n              const isNext = index === 0;\r\n              \r\n              return (\r\n                <div\r\n                  key={milestone.days}\r\n                  className={`flex items-center gap-3 p-3 rounded-lg border transition-all ${\r\n                    isNext\r\n                      ? 'bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800'\r\n                      : 'bg-gray-50 dark:bg-gray-700/50 border-gray-200 dark:border-gray-600'\r\n                  }`}\r\n                >\r\n                  <div className={`p-2 ${milestone.bgColor} rounded-full ${isNext ? 'ring-2 ring-blue-300 dark:ring-blue-600' : ''}`}>\r\n                    <milestone.icon className={`w-4 h-4 ${milestone.color}`} />\r\n                  </div>\r\n                  <div className=\"flex-1\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"font-medium text-gray-900 dark:text-white text-sm\">\r\n                        {milestone.title}\r\n                      </span>\r\n                      <span className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                        {milestone.days} days\r\n                      </span>\r\n                    </div>\r\n                    <p className=\"text-xs text-gray-600 dark:text-gray-400\">\r\n                      {daysToGo} days to go\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Motivation Message */}\r\n      {currentStreak === 0 && (\r\n        <div className=\"mt-4 p-3 bg-gradient-to-r from-green-50 to-blue-50 dark:from-green-900/20 dark:to-blue-900/20 rounded-lg border border-green-200 dark:border-green-800\">\r\n          <p className=\"text-sm text-green-700 dark:text-green-300 text-center\">\r\n            🌟 Start your journey! Complete your first focus session to unlock achievements.\r\n          </p>\r\n        </div>\r\n      )}\r\n\r\n      {currentStreak > 0 && !nextMilestone && (\r\n        <div className=\"mt-4 p-3 bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 rounded-lg border border-purple-200 dark:border-purple-800\">\r\n          <p className=\"text-sm text-purple-700 dark:text-purple-300 text-center\">\r\n            🎉 Incredible! You've achieved all milestones. You're a true focus master!\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StreakMilestones;","import { create } from 'zustand';\nimport { devtools } from 'zustand/middleware';\n\nexport interface WeeklyGoal {\n  categoryId: number;\n  categoryName: string;\n  categoryColor: string;\n  targetMinutes: number;\n  currentMinutes: number;\n  progressPercentage: number;\n  isCompleted: boolean;\n  weekStart: string;\n  weekEnd: string;\n}\n\nexport interface WeeklyGoalProgress {\n  weekStart: string;\n  weekEnd: string;\n  totalTargetMinutes: number;\n  totalCurrentMinutes: number;\n  overallProgressPercentage: number;\n  completedGoals: number;\n  totalGoals: number;\n  goals: WeeklyGoal[];\n  dailyBreakdown: Array<{\n    date: string;\n    totalMinutes: number;\n    categoryBreakdown: Array<{\n      categoryId: number;\n      categoryName: string;\n      minutes: number;\n    }>;\n  }>;\n}\n\nexport interface GoalAchievement {\n  categoryId: number;\n  categoryName: string;\n  weekStart: string;\n  achievedAt: Date;\n  targetMinutes: number;\n  actualMinutes: number;\n  overachievementPercentage: number;\n}\n\nexport interface GoalNeedingAttention {\n  categoryId: number;\n  categoryName: string;\n  categoryColor: string;\n  targetMinutes: number;\n  currentMinutes: number;\n  remainingMinutes: number;\n  daysLeft: number;\n  dailyTargetToMeetGoal: number;\n  riskLevel: 'low' | 'medium' | 'high';\n  suggestion: string;\n}\n\nexport interface WeeklyGoalStatistics {\n  averageCompletionRate: number;\n  totalGoalsSet: number;\n  totalGoalsAchieved: number;\n  bestWeek: {\n    weekStart: string;\n    completionRate: number;\n    totalMinutes: number;\n  } | null;\n  categoryPerformance: Array<{\n    categoryId: number;\n    categoryName: string;\n    averageCompletion: number;\n    weeksWithGoals: number;\n    weeksCompleted: number;\n  }>;\n  weeklyTrend: Array<{\n    weekStart: string;\n    completionRate: number;\n    totalMinutes: number;\n    goalsCompleted: number;\n    totalGoals: number;\n  }>;\n}\n\ninterface WeeklyGoalsState {\n  // Current week progress\n  currentWeekProgress: WeeklyGoalProgress | null;\n  \n  // Historical progress for specific weeks\n  weeklyProgress: Map<string, WeeklyGoalProgress>;\n  \n  // Achievements\n  achievements: GoalAchievement[];\n  \n  // Goals needing attention\n  goalsNeedingAttention: GoalNeedingAttention[];\n  \n  // Statistics\n  statistics: WeeklyGoalStatistics | null;\n  \n  // Loading states\n  loading: {\n    currentWeek: boolean;\n    weekProgress: boolean;\n    achievements: boolean;\n    attention: boolean;\n    statistics: boolean;\n    updateGoal: boolean;\n    celebration: boolean;\n  };\n  \n  // Error state\n  error: string | null;\n  \n  // Actions\n  fetchCurrentWeekProgress: () => Promise<void>;\n  fetchWeekProgress: (date: string) => Promise<void>;\n  updateCategoryGoal: (categoryId: number, targetMinutes: number) => Promise<void>;\n  fetchAchievements: (startDate: string, endDate: string) => Promise<void>;\n  fetchGoalsNeedingAttention: () => Promise<void>;\n  fetchStatistics: (weeks?: number) => Promise<void>;\n  celebrateAchievement: (categoryId: number, weekStart: string) => Promise<{ message: string; milestone?: string }>;\n  clearError: () => void;\n}\n\nconst API_BASE = '/api/weekly-goals';\n\nexport const useWeeklyGoalsStore = create<WeeklyGoalsState>()(\n  devtools(\n    (set, get) => ({\n      // Initial state\n      currentWeekProgress: null,\n      weeklyProgress: new Map(),\n      achievements: [],\n      goalsNeedingAttention: [],\n      statistics: null,\n      loading: {\n        currentWeek: false,\n        weekProgress: false,\n        achievements: false,\n        attention: false,\n        statistics: false,\n        updateGoal: false,\n        celebration: false,\n      },\n      error: null,\n\n      // Actions\n      fetchCurrentWeekProgress: async () => {\n        set((state) => ({\n          loading: { ...state.loading, currentWeek: true },\n          error: null,\n        }));\n\n        try {\n          const response = await fetch(`${API_BASE}/current`);\n          if (!response.ok) {\n            throw new Error('Failed to fetch current week progress');\n          }\n\n          const currentWeekProgress = await response.json();\n          \n          set((state) => ({\n            currentWeekProgress,\n            loading: { ...state.loading, currentWeek: false },\n          }));\n        } catch (error) {\n          set((state) => ({\n            error: error instanceof Error ? error.message : 'Unknown error',\n            loading: { ...state.loading, currentWeek: false },\n          }));\n        }\n      },\n\n      fetchWeekProgress: async (date: string) => {\n        set((state) => ({\n          loading: { ...state.loading, weekProgress: true },\n          error: null,\n        }));\n\n        try {\n          const response = await fetch(`${API_BASE}/week/${date}`);\n          if (!response.ok) {\n            throw new Error('Failed to fetch week progress');\n          }\n\n          const weekProgress = await response.json();\n          \n          set((state) => ({\n            weeklyProgress: new Map(state.weeklyProgress).set(weekProgress.weekStart, weekProgress),\n            loading: { ...state.loading, weekProgress: false },\n          }));\n        } catch (error) {\n          set((state) => ({\n            error: error instanceof Error ? error.message : 'Unknown error',\n            loading: { ...state.loading, weekProgress: false },\n          }));\n        }\n      },\n\n      updateCategoryGoal: async (categoryId: number, targetMinutes: number) => {\n        set((state) => ({\n          loading: { ...state.loading, updateGoal: true },\n          error: null,\n        }));\n\n        try {\n          const response = await fetch(`${API_BASE}/category/${categoryId}`, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ targetMinutes }),\n          });\n\n          if (!response.ok) {\n            throw new Error('Failed to update category goal');\n          }\n\n          // Refresh current week progress after updating goal\n          await get().fetchCurrentWeekProgress();\n          \n          set((state) => ({\n            loading: { ...state.loading, updateGoal: false },\n          }));\n        } catch (error) {\n          set((state) => ({\n            error: error instanceof Error ? error.message : 'Unknown error',\n            loading: { ...state.loading, updateGoal: false },\n          }));\n        }\n      },\n\n      fetchAchievements: async (startDate: string, endDate: string) => {\n        set((state) => ({\n          loading: { ...state.loading, achievements: true },\n          error: null,\n        }));\n\n        try {\n          const response = await fetch(\n            `${API_BASE}/achievements?startDate=${startDate}&endDate=${endDate}`\n          );\n          if (!response.ok) {\n            throw new Error('Failed to fetch achievements');\n          }\n\n          const achievements = await response.json();\n          \n          // Convert achievedAt strings to Date objects\n          const processedAchievements = achievements.map((achievement: any) => ({\n            ...achievement,\n            achievedAt: new Date(achievement.achievedAt)\n          }));\n\n          set((state) => ({\n            achievements: processedAchievements,\n            loading: { ...state.loading, achievements: false },\n          }));\n        } catch (error) {\n          set((state) => ({\n            error: error instanceof Error ? error.message : 'Unknown error',\n            loading: { ...state.loading, achievements: false },\n          }));\n        }\n      },\n\n      fetchGoalsNeedingAttention: async () => {\n        set((state) => ({\n          loading: { ...state.loading, attention: true },\n          error: null,\n        }));\n\n        try {\n          const response = await fetch(`${API_BASE}/attention`);\n          if (!response.ok) {\n            throw new Error('Failed to fetch goals needing attention');\n          }\n\n          const goalsNeedingAttention = await response.json();\n          \n          set((state) => ({\n            goalsNeedingAttention,\n            loading: { ...state.loading, attention: false },\n          }));\n        } catch (error) {\n          set((state) => ({\n            error: error instanceof Error ? error.message : 'Unknown error',\n            loading: { ...state.loading, attention: false },\n          }));\n        }\n      },\n\n      fetchStatistics: async (weeks = 12) => {\n        set((state) => ({\n          loading: { ...state.loading, statistics: true },\n          error: null,\n        }));\n\n        try {\n          const response = await fetch(`${API_BASE}/statistics?weeks=${weeks}`);\n          if (!response.ok) {\n            throw new Error('Failed to fetch statistics');\n          }\n\n          const statistics = await response.json();\n          \n          set((state) => ({\n            statistics,\n            loading: { ...state.loading, statistics: false },\n          }));\n        } catch (error) {\n          set((state) => ({\n            error: error instanceof Error ? error.message : 'Unknown error',\n            loading: { ...state.loading, statistics: false },\n          }));\n        }\n      },\n\n      celebrateAchievement: async (categoryId: number, weekStart: string) => {\n        set((state) => ({\n          loading: { ...state.loading, celebration: true },\n          error: null,\n        }));\n\n        try {\n          const response = await fetch(`${API_BASE}/celebrate/${categoryId}/${weekStart}`, {\n            method: 'POST',\n          });\n\n          if (!response.ok) {\n            throw new Error('Failed to celebrate achievement');\n          }\n\n          const celebration = await response.json();\n          \n          set((state) => ({\n            loading: { ...state.loading, celebration: false },\n          }));\n\n          return {\n            message: celebration.message,\n            milestone: celebration.milestone\n          };\n        } catch (error) {\n          set((state) => ({\n            error: error instanceof Error ? error.message : 'Unknown error',\n            loading: { ...state.loading, celebration: false },\n          }));\n          return { message: 'Failed to celebrate achievement' };\n        }\n      },\n\n      clearError: () => {\n        set({ error: null });\n      },\n    }),\n    {\n      name: 'weekly-goals-store',\n    }\n  )\n);","import React, { useEffect, useState } from 'react';\r\nimport { Target, Plus, Edit2, Trash2, Save, X } from 'lucide-react';\r\nimport { useWeeklyGoalsStore } from '../../stores/weeklyGoalsStore';\r\nimport { useCategoryStore } from '../../stores/categoryStore';\r\n\r\ninterface WeeklyGoalsManagerProps {\r\n  className?: string;\r\n}\r\n\r\n/**\r\n * WeeklyGoalsManager Component\r\n * \r\n * Manages weekly goals for different categories.\r\n * Allows users to set, edit, and delete weekly time targets.\r\n * Shows current progress and goal management interface.\r\n */\r\nexport const WeeklyGoalsManager: React.FC<WeeklyGoalsManagerProps> = ({\r\n  className = ''\r\n}) => {\r\n  const {\r\n    currentWeekProgress,\r\n    loading,\r\n    error,\r\n    fetchCurrentWeekProgress,\r\n    updateCategoryGoal,\r\n    clearError\r\n  } = useWeeklyGoalsStore();\r\n\r\n  const { categories, fetchCategories } = useCategoryStore();\r\n\r\n  const [editingGoal, setEditingGoal] = useState<number | null>(null);\r\n  const [editValue, setEditValue] = useState<string>('');\r\n  const [showAddGoal, setShowAddGoal] = useState(false);\r\n  const [selectedCategory, setSelectedCategory] = useState<number | null>(null);\r\n  const [newGoalValue, setNewGoalValue] = useState<string>('');\r\n\r\n  useEffect(() => {\r\n    fetchCurrentWeekProgress();\r\n    fetchCategories();\r\n  }, [fetchCurrentWeekProgress, fetchCategories]);\r\n\r\n  const handleEditGoal = (categoryId: number, currentTarget: number) => {\r\n    setEditingGoal(categoryId);\r\n    setEditValue(currentTarget.toString());\r\n  };\r\n\r\n  const handleSaveGoal = async (categoryId: number) => {\r\n    const targetMinutes = parseInt(editValue);\r\n    if (isNaN(targetMinutes) || targetMinutes < 0) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await updateCategoryGoal(categoryId, targetMinutes);\r\n      setEditingGoal(null);\r\n      setEditValue('');\r\n    } catch (error) {\r\n      console.error('Failed to update goal:', error);\r\n    }\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    setEditingGoal(null);\r\n    setEditValue('');\r\n  };\r\n\r\n  const handleAddGoal = async () => {\r\n    if (!selectedCategory) return;\r\n    \r\n    const targetMinutes = parseInt(newGoalValue);\r\n    if (isNaN(targetMinutes) || targetMinutes < 0) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await updateCategoryGoal(selectedCategory, targetMinutes);\r\n      setShowAddGoal(false);\r\n      setSelectedCategory(null);\r\n      setNewGoalValue('');\r\n    } catch (error) {\r\n      console.error('Failed to add goal:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteGoal = async (categoryId: number) => {\r\n    try {\r\n      await updateCategoryGoal(categoryId, 0);\r\n    } catch (error) {\r\n      console.error('Failed to delete goal:', error);\r\n    }\r\n  };\r\n\r\n  const formatTime = (minutes: number) => {\r\n    const hours = Math.floor(minutes / 60);\r\n    const mins = minutes % 60;\r\n    if (hours > 0) {\r\n      return `${hours}h ${mins}m`;\r\n    }\r\n    return `${mins}m`;\r\n  };\r\n\r\n  const getProgressColor = (percentage: number) => {\r\n    if (percentage >= 100) return 'bg-green-500';\r\n    if (percentage >= 75) return 'bg-blue-500';\r\n    if (percentage >= 50) return 'bg-yellow-500';\r\n    return 'bg-gray-400';\r\n  };\r\n\r\n  const getAvailableCategories = () => {\r\n    const existingGoalCategoryIds = currentWeekProgress?.goals.map(g => g.categoryId) || [];\r\n    return categories.filter(cat => !existingGoalCategoryIds.includes(cat.id));\r\n  };\r\n\r\n  if (loading.currentWeek) {\r\n    return (\r\n      <div className={`animate-pulse bg-gray-100 dark:bg-gray-800 rounded-lg p-6 ${className}`}>\r\n        <div className=\"h-4 bg-gray-300 dark:bg-gray-600 rounded w-1/2 mb-4\"></div>\r\n        <div className=\"space-y-3\">\r\n          {[1, 2, 3].map(i => (\r\n            <div key={i} className=\"flex items-center gap-3\">\r\n              <div className=\"w-4 h-4 bg-gray-300 dark:bg-gray-600 rounded\"></div>\r\n              <div className=\"flex-1 h-3 bg-gray-300 dark:bg-gray-600 rounded\"></div>\r\n              <div className=\"w-16 h-3 bg-gray-300 dark:bg-gray-600 rounded\"></div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className={`bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6 ${className}`}>\r\n        <div className=\"flex items-center gap-2 text-red-600 dark:text-red-400 mb-2\">\r\n          <Target className=\"w-5 h-5\" />\r\n          <span className=\"font-medium\">Error Loading Goals</span>\r\n        </div>\r\n        <p className=\"text-red-600 dark:text-red-400 text-sm mb-3\">{error}</p>\r\n        <button\r\n          onClick={() => {\r\n            clearError();\r\n            fetchCurrentWeekProgress();\r\n          }}\r\n          className=\"text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 text-sm font-medium\"\r\n        >\r\n          Try Again\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6 ${className}`}>\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between mb-6\">\r\n        <div className=\"flex items-center gap-2\">\r\n          <Target className=\"w-5 h-5 text-gray-600 dark:text-gray-400\" />\r\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n            Weekly Goals\r\n          </h3>\r\n        </div>\r\n        \r\n        {getAvailableCategories().length > 0 && (\r\n          <button\r\n            onClick={() => setShowAddGoal(true)}\r\n            className=\"flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white text-sm font-medium py-2 px-3 rounded-md transition-colors\"\r\n          >\r\n            <Plus className=\"w-4 h-4\" />\r\n            Add Goal\r\n          </button>\r\n        )}\r\n      </div>\r\n\r\n      {/* Week Info */}\r\n      {currentWeekProgress && (\r\n        <div className=\"mb-6 p-4 bg-gray-50 dark:bg-gray-700/50 rounded-lg\">\r\n          <div className=\"flex items-center justify-between mb-2\">\r\n            <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n              Week of {new Date(currentWeekProgress.weekStart).toLocaleDateString()}\r\n            </span>\r\n            <span className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n              {currentWeekProgress.completedGoals} of {currentWeekProgress.totalGoals} goals completed\r\n            </span>\r\n          </div>\r\n          \r\n          {/* Overall Progress */}\r\n          <div className=\"mb-2\">\r\n            <div className=\"flex justify-between text-xs text-gray-600 dark:text-gray-400 mb-1\">\r\n              <span>Overall Progress</span>\r\n              <span>{Math.round(currentWeekProgress.overallProgressPercentage)}%</span>\r\n            </div>\r\n            <div className=\"w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2\">\r\n              <div\r\n                className={`h-2 rounded-full transition-all duration-500 ${getProgressColor(currentWeekProgress.overallProgressPercentage)}`}\r\n                style={{ width: `${Math.min(100, currentWeekProgress.overallProgressPercentage)}%` }}\r\n              ></div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"text-xs text-gray-600 dark:text-gray-400\">\r\n            {formatTime(currentWeekProgress.totalCurrentMinutes)} of {formatTime(currentWeekProgress.totalTargetMinutes)}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Goals List */}\r\n      {currentWeekProgress?.goals && currentWeekProgress.goals.length > 0 ? (\r\n        <div className=\"space-y-4\">\r\n          {currentWeekProgress.goals.map((goal) => (\r\n            <div\r\n              key={goal.categoryId}\r\n              className=\"p-4 border border-gray-200 dark:border-gray-600 rounded-lg\"\r\n            >\r\n              <div className=\"flex items-center justify-between mb-3\">\r\n                <div className=\"flex items-center gap-3\">\r\n                  <div\r\n                    className=\"w-4 h-4 rounded-full\"\r\n                    style={{ backgroundColor: goal.categoryColor }}\r\n                  ></div>\r\n                  <span className=\"font-medium text-gray-900 dark:text-white\">\r\n                    {goal.categoryName}\r\n                  </span>\r\n                  {goal.isCompleted && (\r\n                    <span className=\"bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300 text-xs font-medium px-2 py-1 rounded-full\">\r\n                      Completed\r\n                    </span>\r\n                  )}\r\n                </div>\r\n                \r\n                <div className=\"flex items-center gap-2\">\r\n                  {editingGoal === goal.categoryId ? (\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <input\r\n                        type=\"number\"\r\n                        value={editValue}\r\n                        onChange={(e) => setEditValue(e.target.value)}\r\n                        className=\"w-20 px-2 py-1 text-sm border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                        min=\"0\"\r\n                        placeholder=\"Minutes\"\r\n                      />\r\n                      <button\r\n                        onClick={() => handleSaveGoal(goal.categoryId)}\r\n                        disabled={loading.updateGoal}\r\n                        className=\"p-1 text-green-600 hover:text-green-700 disabled:opacity-50\"\r\n                      >\r\n                        <Save className=\"w-4 h-4\" />\r\n                      </button>\r\n                      <button\r\n                        onClick={handleCancelEdit}\r\n                        className=\"p-1 text-gray-600 hover:text-gray-700\"\r\n                      >\r\n                        <X className=\"w-4 h-4\" />\r\n                      </button>\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <button\r\n                        onClick={() => handleEditGoal(goal.categoryId, goal.targetMinutes)}\r\n                        className=\"p-1 text-gray-600 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300\"\r\n                      >\r\n                        <Edit2 className=\"w-4 h-4\" />\r\n                      </button>\r\n                      <button\r\n                        onClick={() => handleDeleteGoal(goal.categoryId)}\r\n                        className=\"p-1 text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300\"\r\n                      >\r\n                        <Trash2 className=\"w-4 h-4\" />\r\n                      </button>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              \r\n              {/* Progress Bar */}\r\n              <div className=\"mb-2\">\r\n                <div className=\"flex justify-between text-xs text-gray-600 dark:text-gray-400 mb-1\">\r\n                  <span>{formatTime(goal.currentMinutes)} / {formatTime(goal.targetMinutes)}</span>\r\n                  <span>{Math.round(goal.progressPercentage)}%</span>\r\n                </div>\r\n                <div className=\"w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2\">\r\n                  <div\r\n                    className={`h-2 rounded-full transition-all duration-500 ${getProgressColor(goal.progressPercentage)}`}\r\n                    style={{ width: `${Math.min(100, goal.progressPercentage)}%` }}\r\n                  ></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <div className=\"text-center py-8\">\r\n          <Target className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\r\n          <h4 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\r\n            No Weekly Goals Set\r\n          </h4>\r\n          <p className=\"text-gray-600 dark:text-gray-400 text-sm mb-4\">\r\n            Set weekly time goals for your categories to track your progress.\r\n          </p>\r\n          {getAvailableCategories().length > 0 && (\r\n            <button\r\n              onClick={() => setShowAddGoal(true)}\r\n              className=\"bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition-colors\"\r\n            >\r\n              Set Your First Goal\r\n            </button>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* Add Goal Modal */}\r\n      {showAddGoal && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full p-6\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n              Add Weekly Goal\r\n            </h3>\r\n            \r\n            <div className=\"space-y-4\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                  Category\r\n                </label>\r\n                <select\r\n                  value={selectedCategory || ''}\r\n                  onChange={(e) => setSelectedCategory(parseInt(e.target.value))}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                >\r\n                  <option value=\"\">Select a category</option>\r\n                  {getAvailableCategories().map((category) => (\r\n                    <option key={category.id} value={category.id}>\r\n                      {category.name}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n              \r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                  Target Minutes per Week\r\n                </label>\r\n                <input\r\n                  type=\"number\"\r\n                  value={newGoalValue}\r\n                  onChange={(e) => setNewGoalValue(e.target.value)}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n                  min=\"0\"\r\n                  placeholder=\"e.g., 120 (2 hours)\"\r\n                />\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"flex justify-end gap-3 mt-6\">\r\n              <button\r\n                onClick={() => {\r\n                  setShowAddGoal(false);\r\n                  setSelectedCategory(null);\r\n                  setNewGoalValue('');\r\n                }}\r\n                className=\"px-4 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 font-medium\"\r\n              >\r\n                Cancel\r\n              </button>\r\n              <button\r\n                onClick={handleAddGoal}\r\n                disabled={!selectedCategory || !newGoalValue || loading.updateGoal}\r\n                className=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white font-medium rounded-md transition-colors\"\r\n              >\r\n                {loading.updateGoal ? 'Adding...' : 'Add Goal'}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeeklyGoalsManager;","import React, { useEffect } from 'react';\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Cell } from 'recharts';\r\nimport { TrendingUp, Calendar, Clock } from 'lucide-react';\r\nimport { useWeeklyGoalsStore } from '../../stores/weeklyGoalsStore';\r\n\r\ninterface GoalProgressChartProps {\r\n  className?: string;\r\n  showWeeklyTrend?: boolean;\r\n}\r\n\r\n/**\r\n * GoalProgressChart Component\r\n * \r\n * Visualizes weekly goal progress with interactive charts.\r\n * Shows current week progress and optional weekly trend data.\r\n * Provides detailed tooltips and progress indicators.\r\n */\r\nexport const GoalProgressChart: React.FC<GoalProgressChartProps> = ({\r\n  className = '',\r\n  showWeeklyTrend = false\r\n}) => {\r\n  const {\r\n    currentWeekProgress,\r\n    statistics,\r\n    loading,\r\n    error,\r\n    fetchCurrentWeekProgress,\r\n    fetchStatistics,\r\n    clearError\r\n  } = useWeeklyGoalsStore();\r\n\r\n  useEffect(() => {\r\n    fetchCurrentWeekProgress();\r\n    if (showWeeklyTrend) {\r\n      fetchStatistics(8); // Last 8 weeks\r\n    }\r\n  }, [fetchCurrentWeekProgress, fetchStatistics, showWeeklyTrend]);\r\n\r\n  const formatTime = (minutes: number) => {\r\n    const hours = Math.floor(minutes / 60);\r\n    const mins = minutes % 60;\r\n    if (hours > 0) {\r\n      return `${hours}h ${mins}m`;\r\n    }\r\n    return `${mins}m`;\r\n  };\r\n\r\n  const getProgressColor = (percentage: number) => {\r\n    if (percentage >= 100) return '#10b981'; // green-500\r\n    if (percentage >= 75) return '#3b82f6';  // blue-500\r\n    if (percentage >= 50) return '#f59e0b';  // yellow-500\r\n    return '#6b7280'; // gray-500\r\n  };\r\n\r\n  // Prepare current week data for chart\r\n  const currentWeekData = currentWeekProgress?.goals.map(goal => ({\r\n    name: goal.categoryName,\r\n    current: goal.currentMinutes,\r\n    target: goal.targetMinutes,\r\n    percentage: goal.progressPercentage,\r\n    color: goal.categoryColor,\r\n    completed: goal.isCompleted\r\n  })) || [];\r\n\r\n  // Prepare weekly trend data\r\n  const weeklyTrendData = statistics?.weeklyTrend.map(week => ({\r\n    week: new Date(week.weekStart).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),\r\n    completionRate: week.completionRate,\r\n    totalMinutes: week.totalMinutes,\r\n    goalsCompleted: week.goalsCompleted,\r\n    totalGoals: week.totalGoals\r\n  })) || [];\r\n\r\n  const CustomTooltip = ({ active, payload, label }: any) => {\r\n    if (active && payload && payload.length) {\r\n      const data = payload[0].payload;\r\n      return (\r\n        <div className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-600 rounded-lg shadow-lg p-3\">\r\n          <p className=\"font-medium text-gray-900 dark:text-white mb-2\">{label}</p>\r\n          <div className=\"space-y-1 text-sm\">\r\n            <div className=\"flex items-center justify-between gap-4\">\r\n              <span className=\"text-gray-600 dark:text-gray-400\">Current:</span>\r\n              <span className=\"font-medium text-gray-900 dark:text-white\">\r\n                {formatTime(data.current)}\r\n              </span>\r\n            </div>\r\n            <div className=\"flex items-center justify-between gap-4\">\r\n              <span className=\"text-gray-600 dark:text-gray-400\">Target:</span>\r\n              <span className=\"font-medium text-gray-900 dark:text-white\">\r\n                {formatTime(data.target)}\r\n              </span>\r\n            </div>\r\n            <div className=\"flex items-center justify-between gap-4\">\r\n              <span className=\"text-gray-600 dark:text-gray-400\">Progress:</span>\r\n              <span className={`font-medium ${data.completed ? 'text-green-600' : 'text-gray-900 dark:text-white'}`}>\r\n                {Math.round(data.percentage)}%\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const TrendTooltip = ({ active, payload, label }: any) => {\r\n    if (active && payload && payload.length) {\r\n      const data = payload[0].payload;\r\n      return (\r\n        <div className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-600 rounded-lg shadow-lg p-3\">\r\n          <p className=\"font-medium text-gray-900 dark:text-white mb-2\">Week of {label}</p>\r\n          <div className=\"space-y-1 text-sm\">\r\n            <div className=\"flex items-center justify-between gap-4\">\r\n              <span className=\"text-gray-600 dark:text-gray-400\">Completion Rate:</span>\r\n              <span className=\"font-medium text-gray-900 dark:text-white\">\r\n                {Math.round(data.completionRate)}%\r\n              </span>\r\n            </div>\r\n            <div className=\"flex items-center justify-between gap-4\">\r\n              <span className=\"text-gray-600 dark:text-gray-400\">Total Time:</span>\r\n              <span className=\"font-medium text-gray-900 dark:text-white\">\r\n                {formatTime(data.totalMinutes)}\r\n              </span>\r\n            </div>\r\n            <div className=\"flex items-center justify-between gap-4\">\r\n              <span className=\"text-gray-600 dark:text-gray-400\">Goals:</span>\r\n              <span className=\"font-medium text-gray-900 dark:text-white\">\r\n                {data.goalsCompleted}/{data.totalGoals}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  if (loading.currentWeek || (showWeeklyTrend && loading.statistics)) {\r\n    return (\r\n      <div className={`animate-pulse bg-gray-100 dark:bg-gray-800 rounded-lg p-6 ${className}`}>\r\n        <div className=\"h-4 bg-gray-300 dark:bg-gray-600 rounded w-1/2 mb-4\"></div>\r\n        <div className=\"h-64 bg-gray-300 dark:bg-gray-600 rounded\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className={`bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6 ${className}`}>\r\n        <div className=\"flex items-center gap-2 text-red-600 dark:text-red-400 mb-2\">\r\n          <TrendingUp className=\"w-5 h-5\" />\r\n          <span className=\"font-medium\">Error Loading Chart</span>\r\n        </div>\r\n        <p className=\"text-red-600 dark:text-red-400 text-sm mb-3\">{error}</p>\r\n        <button\r\n          onClick={() => {\r\n            clearError();\r\n            fetchCurrentWeekProgress();\r\n            if (showWeeklyTrend) fetchStatistics(8);\r\n          }}\r\n          className=\"text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 text-sm font-medium\"\r\n        >\r\n          Try Again\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6 ${className}`}>\r\n      {/* Current Week Progress */}\r\n      <div className=\"mb-8\">\r\n        <div className=\"flex items-center gap-2 mb-4\">\r\n          <TrendingUp className=\"w-5 h-5 text-gray-600 dark:text-gray-400\" />\r\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n            Current Week Progress\r\n          </h3>\r\n        </div>\r\n\r\n        {currentWeekData.length > 0 ? (\r\n          <>\r\n            {/* Summary Stats */}\r\n            {currentWeekProgress && (\r\n              <div className=\"grid grid-cols-3 gap-4 mb-6\">\r\n                <div className=\"text-center p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg\">\r\n                  <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n                    {currentWeekProgress.completedGoals}\r\n                  </div>\r\n                  <div className=\"text-xs text-gray-600 dark:text-gray-400\">\r\n                    Goals Completed\r\n                  </div>\r\n                </div>\r\n                <div className=\"text-center p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg\">\r\n                  <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n                    {Math.round(currentWeekProgress.overallProgressPercentage)}%\r\n                  </div>\r\n                  <div className=\"text-xs text-gray-600 dark:text-gray-400\">\r\n                    Overall Progress\r\n                  </div>\r\n                </div>\r\n                <div className=\"text-center p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg\">\r\n                  <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n                    {formatTime(currentWeekProgress.totalCurrentMinutes)}\r\n                  </div>\r\n                  <div className=\"text-xs text-gray-600 dark:text-gray-400\">\r\n                    Time Logged\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Progress Chart */}\r\n            <div className=\"h-64\">\r\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                <BarChart data={currentWeekData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" opacity={0.3} />\r\n                  <XAxis \r\n                    dataKey=\"name\" \r\n                    stroke=\"#6b7280\"\r\n                    fontSize={12}\r\n                    tick={{ fill: '#6b7280' }}\r\n                  />\r\n                  <YAxis \r\n                    stroke=\"#6b7280\"\r\n                    fontSize={12}\r\n                    tick={{ fill: '#6b7280' }}\r\n                    tickFormatter={(value) => `${Math.round(value / 60)}h`}\r\n                  />\r\n                  <Tooltip content={<CustomTooltip />} />\r\n                  <Bar dataKey=\"current\" radius={[4, 4, 0, 0]}>\r\n                    {currentWeekData.map((entry, index) => (\r\n                      <Cell key={`cell-${index}`} fill={getProgressColor(entry.percentage)} />\r\n                    ))}\r\n                  </Bar>\r\n                  <Bar dataKey=\"target\" fill=\"#e5e7eb\" opacity={0.3} radius={[4, 4, 0, 0]} />\r\n                </BarChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <div className=\"text-center py-8\">\r\n            <Calendar className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\r\n            <h4 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\r\n              No Goals This Week\r\n            </h4>\r\n            <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\r\n              Set some weekly goals to see your progress here.\r\n            </p>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Weekly Trend */}\r\n      {showWeeklyTrend && (\r\n        <div>\r\n          <div className=\"flex items-center gap-2 mb-4\">\r\n            <Clock className=\"w-5 h-5 text-gray-600 dark:text-gray-400\" />\r\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n              Weekly Trend\r\n            </h3>\r\n          </div>\r\n\r\n          {weeklyTrendData.length > 0 ? (\r\n            <div className=\"h-64\">\r\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                <BarChart data={weeklyTrendData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" opacity={0.3} />\r\n                  <XAxis \r\n                    dataKey=\"week\" \r\n                    stroke=\"#6b7280\"\r\n                    fontSize={12}\r\n                    tick={{ fill: '#6b7280' }}\r\n                  />\r\n                  <YAxis \r\n                    stroke=\"#6b7280\"\r\n                    fontSize={12}\r\n                    tick={{ fill: '#6b7280' }}\r\n                    tickFormatter={(value) => `${value}%`}\r\n                  />\r\n                  <Tooltip content={<TrendTooltip />} />\r\n                  <Bar \r\n                    dataKey=\"completionRate\" \r\n                    fill=\"#3b82f6\" \r\n                    radius={[4, 4, 0, 0]}\r\n                  />\r\n                </BarChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n          ) : (\r\n            <div className=\"text-center py-8\">\r\n              <TrendingUp className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\r\n              <h4 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\r\n                No Trend Data\r\n              </h4>\r\n              <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\r\n                Complete some weekly goals to see trends over time.\r\n              </p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoalProgressChart;","import React, { useEffect, useState } from 'react';\r\nimport { Trophy, Star, Calendar, Sparkles, X } from 'lucide-react';\r\nimport { useWeeklyGoalsStore } from '../../stores/weeklyGoalsStore';\r\n\r\ninterface GoalAchievementsProps {\r\n  className?: string;\r\n  showCelebration?: boolean;\r\n}\r\n\r\n/**\r\n * GoalAchievements Component\r\n * \r\n * Displays goal achievements and celebrations.\r\n * Shows recent achievements, milestone celebrations, and achievement history.\r\n * Provides interactive celebration animations and notifications.\r\n */\r\nexport const GoalAchievements: React.FC<GoalAchievementsProps> = ({\r\n  className = '',\r\n  showCelebration = true\r\n}) => {\r\n  const {\r\n    achievements,\r\n    loading,\r\n    error,\r\n    fetchAchievements,\r\n    celebrateAchievement,\r\n    clearError\r\n  } = useWeeklyGoalsStore();\r\n\r\n  const [celebrationModal, setCelebrationModal] = useState<{\r\n    isOpen: boolean;\r\n    message: string;\r\n    milestone?: string;\r\n  }>({ isOpen: false, message: '' });\r\n\r\n  const [selectedDateRange, setSelectedDateRange] = useState(() => {\r\n    const endDate = new Date();\r\n    const startDate = new Date();\r\n    startDate.setDate(startDate.getDate() - 30); // Last 30 days\r\n    return {\r\n      start: startDate.toISOString().split('T')[0],\r\n      end: endDate.toISOString().split('T')[0]\r\n    };\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchAchievements(selectedDateRange.start, selectedDateRange.end);\r\n  }, [fetchAchievements, selectedDateRange]);\r\n\r\n  const handleCelebrate = async (categoryId: number, weekStart: string) => {\r\n    try {\r\n      const result = await celebrateAchievement(categoryId, weekStart);\r\n      if (showCelebration) {\r\n        setCelebrationModal({\r\n          isOpen: true,\r\n          message: result.message,\r\n          milestone: result.milestone\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to celebrate achievement:', error);\r\n    }\r\n  };\r\n\r\n  const formatDate = (date: Date) => {\r\n    return date.toLocaleDateString('en-US', {\r\n      month: 'short',\r\n      day: 'numeric',\r\n      year: 'numeric'\r\n    });\r\n  };\r\n\r\n  const formatTime = (minutes: number) => {\r\n    const hours = Math.floor(minutes / 60);\r\n    const mins = minutes % 60;\r\n    if (hours > 0) {\r\n      return `${hours}h ${mins}m`;\r\n    }\r\n    return `${mins}m`;\r\n  };\r\n\r\n  const getAchievementIcon = (overachievementPercentage: number) => {\r\n    if (overachievementPercentage >= 50) return <Star className=\"w-5 h-5 text-yellow-500\" />;\r\n    if (overachievementPercentage >= 25) return <Trophy className=\"w-5 h-5 text-blue-500\" />;\r\n    return <Trophy className=\"w-5 h-5 text-green-500\" />;\r\n  };\r\n\r\n  const getAchievementBadge = (overachievementPercentage: number) => {\r\n    if (overachievementPercentage >= 50) return { text: 'Superstar', color: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300' };\r\n    if (overachievementPercentage >= 25) return { text: 'Overachiever', color: 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300' };\r\n    return { text: 'Goal Achieved', color: 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300' };\r\n  };\r\n\r\n  if (loading.achievements) {\r\n    return (\r\n      <div className={`animate-pulse bg-gray-100 dark:bg-gray-800 rounded-lg p-6 ${className}`}>\r\n        <div className=\"h-4 bg-gray-300 dark:bg-gray-600 rounded w-1/2 mb-4\"></div>\r\n        <div className=\"space-y-3\">\r\n          {[1, 2, 3].map(i => (\r\n            <div key={i} className=\"flex items-center gap-3\">\r\n              <div className=\"w-10 h-10 bg-gray-300 dark:bg-gray-600 rounded-full\"></div>\r\n              <div className=\"flex-1\">\r\n                <div className=\"h-3 bg-gray-300 dark:bg-gray-600 rounded w-1/3 mb-1\"></div>\r\n                <div className=\"h-2 bg-gray-300 dark:bg-gray-600 rounded w-1/2\"></div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className={`bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6 ${className}`}>\r\n        <div className=\"flex items-center gap-2 text-red-600 dark:text-red-400 mb-2\">\r\n          <Trophy className=\"w-5 h-5\" />\r\n          <span className=\"font-medium\">Error Loading Achievements</span>\r\n        </div>\r\n        <p className=\"text-red-600 dark:text-red-400 text-sm mb-3\">{error}</p>\r\n        <button\r\n          onClick={() => {\r\n            clearError();\r\n            fetchAchievements(selectedDateRange.start, selectedDateRange.end);\r\n          }}\r\n          className=\"text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 text-sm font-medium\"\r\n        >\r\n          Try Again\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6 ${className}`}>\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between mb-6\">\r\n        <div className=\"flex items-center gap-2\">\r\n          <Trophy className=\"w-5 h-5 text-gray-600 dark:text-gray-400\" />\r\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n            Goal Achievements\r\n          </h3>\r\n        </div>\r\n        \r\n        {/* Date Range Selector */}\r\n        <div className=\"flex items-center gap-2\">\r\n          <input\r\n            type=\"date\"\r\n            value={selectedDateRange.start}\r\n            onChange={(e) => setSelectedDateRange(prev => ({ ...prev, start: e.target.value }))}\r\n            className=\"px-2 py-1 text-xs border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n          />\r\n          <span className=\"text-gray-500 text-xs\">to</span>\r\n          <input\r\n            type=\"date\"\r\n            value={selectedDateRange.end}\r\n            onChange={(e) => setSelectedDateRange(prev => ({ ...prev, end: e.target.value }))}\r\n            className=\"px-2 py-1 text-xs border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Achievements List */}\r\n      {achievements.length > 0 ? (\r\n        <div className=\"space-y-4\">\r\n          {achievements.map((achievement, index) => {\r\n            const badge = getAchievementBadge(achievement.overachievementPercentage);\r\n            \r\n            return (\r\n              <div\r\n                key={`${achievement.categoryId}-${achievement.weekStart}-${index}`}\r\n                className=\"p-4 border border-gray-200 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors\"\r\n              >\r\n                <div className=\"flex items-start justify-between\">\r\n                  <div className=\"flex items-start gap-3\">\r\n                    <div className=\"p-2 bg-yellow-100 dark:bg-yellow-900/30 rounded-full\">\r\n                      {getAchievementIcon(achievement.overachievementPercentage)}\r\n                    </div>\r\n                    \r\n                    <div className=\"flex-1\">\r\n                      <div className=\"flex items-center gap-2 mb-1\">\r\n                        <h4 className=\"font-medium text-gray-900 dark:text-white\">\r\n                          {achievement.categoryName}\r\n                        </h4>\r\n                        <span className={`text-xs font-medium px-2 py-1 rounded-full ${badge.color}`}>\r\n                          {badge.text}\r\n                        </span>\r\n                      </div>\r\n                      \r\n                      <div className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">\r\n                        Week of {formatDate(new Date(achievement.weekStart))}\r\n                      </div>\r\n                      \r\n                      <div className=\"flex items-center gap-4 text-sm\">\r\n                        <div>\r\n                          <span className=\"text-gray-600 dark:text-gray-400\">Target: </span>\r\n                          <span className=\"font-medium text-gray-900 dark:text-white\">\r\n                            {formatTime(achievement.targetMinutes)}\r\n                          </span>\r\n                        </div>\r\n                        <div>\r\n                          <span className=\"text-gray-600 dark:text-gray-400\">Achieved: </span>\r\n                          <span className=\"font-medium text-green-600 dark:text-green-400\">\r\n                            {formatTime(achievement.actualMinutes)}\r\n                          </span>\r\n                        </div>\r\n                        {achievement.overachievementPercentage > 0 && (\r\n                          <div>\r\n                            <span className=\"text-gray-600 dark:text-gray-400\">Bonus: </span>\r\n                            <span className=\"font-medium text-blue-600 dark:text-blue-400\">\r\n                              +{Math.round(achievement.overachievementPercentage)}%\r\n                            </span>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"flex items-center gap-2\">\r\n                    <span className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                      {formatDate(achievement.achievedAt)}\r\n                    </span>\r\n                    {showCelebration && (\r\n                      <button\r\n                        onClick={() => handleCelebrate(achievement.categoryId, achievement.weekStart)}\r\n                        disabled={loading.celebration}\r\n                        className=\"p-1 text-yellow-600 hover:text-yellow-700 dark:text-yellow-400 dark:hover:text-yellow-300 disabled:opacity-50\"\r\n                        title=\"Celebrate this achievement\"\r\n                      >\r\n                        <Sparkles className=\"w-4 h-4\" />\r\n                      </button>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      ) : (\r\n        <div className=\"text-center py-8\">\r\n          <Trophy className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\r\n          <h4 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\r\n            No Achievements Yet\r\n          </h4>\r\n          <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\r\n            Complete your weekly goals to earn achievements and celebrate your progress!\r\n          </p>\r\n        </div>\r\n      )}\r\n\r\n      {/* Celebration Modal */}\r\n      {celebrationModal.isOpen && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full p-6 text-center\">\r\n            <div className=\"mb-4\">\r\n              <div className=\"p-4 bg-yellow-100 dark:bg-yellow-900/30 rounded-full w-fit mx-auto mb-4 animate-bounce\">\r\n                <Trophy className=\"w-8 h-8 text-yellow-600 dark:text-yellow-400\" />\r\n              </div>\r\n              <h3 className=\"text-xl font-bold text-gray-900 dark:text-white mb-2\">\r\n                🎉 Congratulations! 🎉\r\n              </h3>\r\n              <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\r\n                {celebrationModal.message}\r\n              </p>\r\n              {celebrationModal.milestone && (\r\n                <div className=\"p-3 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg mb-4\">\r\n                  <p className=\"text-blue-700 dark:text-blue-300 font-medium\">\r\n                    🏆 Milestone: {celebrationModal.milestone}\r\n                  </p>\r\n                </div>\r\n              )}\r\n            </div>\r\n            \r\n            <button\r\n              onClick={() => setCelebrationModal({ isOpen: false, message: '' })}\r\n              className=\"bg-yellow-600 hover:bg-yellow-700 text-white font-medium py-2 px-6 rounded-md transition-colors\"\r\n            >\r\n              Awesome!\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoalAchievements;","import React, { useEffect } from 'react';\r\nimport { AlertTriangle, Clock, TrendingDown, Target } from 'lucide-react';\r\nimport { useWeeklyGoalsStore } from '../../stores/weeklyGoalsStore';\r\n\r\ninterface GoalsNeedingAttentionProps {\r\n  className?: string;\r\n}\r\n\r\n/**\r\n * GoalsNeedingAttention Component\r\n * \r\n * Displays goals that need attention based on progress and time remaining.\r\n * Shows risk levels, suggestions, and actionable recommendations.\r\n * Helps users prioritize their focus to meet weekly goals.\r\n */\r\nexport const GoalsNeedingAttention: React.FC<GoalsNeedingAttentionProps> = ({\r\n  className = ''\r\n}) => {\r\n  const {\r\n    goalsNeedingAttention,\r\n    loading,\r\n    error,\r\n    fetchGoalsNeedingAttention,\r\n    clearError\r\n  } = useWeeklyGoalsStore();\r\n\r\n  useEffect(() => {\r\n    fetchGoalsNeedingAttention();\r\n  }, [fetchGoalsNeedingAttention]);\r\n\r\n  const formatTime = (minutes: number) => {\r\n    const hours = Math.floor(minutes / 60);\r\n    const mins = minutes % 60;\r\n    if (hours > 0) {\r\n      return `${hours}h ${mins}m`;\r\n    }\r\n    return `${mins}m`;\r\n  };\r\n\r\n  const getRiskColor = (riskLevel: 'low' | 'medium' | 'high') => {\r\n    switch (riskLevel) {\r\n      case 'high':\r\n        return {\r\n          bg: 'bg-red-50 dark:bg-red-900/20',\r\n          border: 'border-red-200 dark:border-red-800',\r\n          text: 'text-red-700 dark:text-red-300',\r\n          badge: 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300',\r\n          icon: 'text-red-500'\r\n        };\r\n      case 'medium':\r\n        return {\r\n          bg: 'bg-yellow-50 dark:bg-yellow-900/20',\r\n          border: 'border-yellow-200 dark:border-yellow-800',\r\n          text: 'text-yellow-700 dark:text-yellow-300',\r\n          badge: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300',\r\n          icon: 'text-yellow-500'\r\n        };\r\n      case 'low':\r\n        return {\r\n          bg: 'bg-blue-50 dark:bg-blue-900/20',\r\n          border: 'border-blue-200 dark:border-blue-800',\r\n          text: 'text-blue-700 dark:text-blue-300',\r\n          badge: 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300',\r\n          icon: 'text-blue-500'\r\n        };\r\n    }\r\n  };\r\n\r\n  const getRiskIcon = (riskLevel: 'low' | 'medium' | 'high') => {\r\n    switch (riskLevel) {\r\n      case 'high':\r\n        return <AlertTriangle className=\"w-5 h-5\" />;\r\n      case 'medium':\r\n        return <Clock className=\"w-5 h-5\" />;\r\n      case 'low':\r\n        return <TrendingDown className=\"w-5 h-5\" />;\r\n    }\r\n  };\r\n\r\n  if (loading.attention) {\r\n    return (\r\n      <div className={`animate-pulse bg-gray-100 dark:bg-gray-800 rounded-lg p-6 ${className}`}>\r\n        <div className=\"h-4 bg-gray-300 dark:bg-gray-600 rounded w-1/2 mb-4\"></div>\r\n        <div className=\"space-y-3\">\r\n          {[1, 2].map(i => (\r\n            <div key={i} className=\"p-4 bg-gray-200 dark:bg-gray-700 rounded-lg\">\r\n              <div className=\"flex items-center gap-3 mb-2\">\r\n                <div className=\"w-5 h-5 bg-gray-300 dark:bg-gray-600 rounded\"></div>\r\n                <div className=\"h-3 bg-gray-300 dark:bg-gray-600 rounded w-1/3\"></div>\r\n              </div>\r\n              <div className=\"h-2 bg-gray-300 dark:bg-gray-600 rounded w-2/3\"></div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className={`bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6 ${className}`}>\r\n        <div className=\"flex items-center gap-2 text-red-600 dark:text-red-400 mb-2\">\r\n          <AlertTriangle className=\"w-5 h-5\" />\r\n          <span className=\"font-medium\">Error Loading Goals</span>\r\n        </div>\r\n        <p className=\"text-red-600 dark:text-red-400 text-sm mb-3\">{error}</p>\r\n        <button\r\n          onClick={() => {\r\n            clearError();\r\n            fetchGoalsNeedingAttention();\r\n          }}\r\n          className=\"text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 text-sm font-medium\"\r\n        >\r\n          Try Again\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6 ${className}`}>\r\n      {/* Header */}\r\n      <div className=\"flex items-center gap-2 mb-6\">\r\n        <AlertTriangle className=\"w-5 h-5 text-gray-600 dark:text-gray-400\" />\r\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n          Goals Needing Attention\r\n        </h3>\r\n        {goalsNeedingAttention.length > 0 && (\r\n          <span className=\"bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300 text-xs font-medium px-2 py-1 rounded-full\">\r\n            {goalsNeedingAttention.length}\r\n          </span>\r\n        )}\r\n      </div>\r\n\r\n      {/* Goals List */}\r\n      {goalsNeedingAttention.length > 0 ? (\r\n        <div className=\"space-y-4\">\r\n          {goalsNeedingAttention.map((goal) => {\r\n            const colors = getRiskColor(goal.riskLevel);\r\n            const progressPercentage = (goal.currentMinutes / goal.targetMinutes) * 100;\r\n            \r\n            return (\r\n              <div\r\n                key={goal.categoryId}\r\n                className={`p-4 rounded-lg border ${colors.bg} ${colors.border}`}\r\n              >\r\n                <div className=\"flex items-start justify-between mb-3\">\r\n                  <div className=\"flex items-center gap-3\">\r\n                    <div\r\n                      className=\"w-4 h-4 rounded-full\"\r\n                      style={{ backgroundColor: goal.categoryColor }}\r\n                    ></div>\r\n                    <div>\r\n                      <h4 className=\"font-medium text-gray-900 dark:text-white\">\r\n                        {goal.categoryName}\r\n                      </h4>\r\n                      <div className=\"flex items-center gap-2 mt-1\">\r\n                        <span className={`text-xs font-medium px-2 py-1 rounded-full ${colors.badge}`}>\r\n                          {goal.riskLevel.toUpperCase()} RISK\r\n                        </span>\r\n                        <span className=\"text-xs text-gray-600 dark:text-gray-400\">\r\n                          {goal.daysLeft} {goal.daysLeft === 1 ? 'day' : 'days'} left\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className={`${colors.icon}`}>\r\n                    {getRiskIcon(goal.riskLevel)}\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Progress Bar */}\r\n                <div className=\"mb-3\">\r\n                  <div className=\"flex justify-between text-xs text-gray-600 dark:text-gray-400 mb-1\">\r\n                    <span>{formatTime(goal.currentMinutes)} / {formatTime(goal.targetMinutes)}</span>\r\n                    <span>{Math.round(progressPercentage)}%</span>\r\n                  </div>\r\n                  <div className=\"w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2\">\r\n                    <div\r\n                      className={`h-2 rounded-full transition-all duration-500 ${\r\n                        goal.riskLevel === 'high' ? 'bg-red-500' :\r\n                        goal.riskLevel === 'medium' ? 'bg-yellow-500' : 'bg-blue-500'\r\n                      }`}\r\n                      style={{ width: `${Math.min(100, progressPercentage)}%` }}\r\n                    ></div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Goal Details */}\r\n                <div className=\"grid grid-cols-2 gap-4 mb-3 text-sm\">\r\n                  <div>\r\n                    <span className=\"text-gray-600 dark:text-gray-400\">Remaining: </span>\r\n                    <span className=\"font-medium text-gray-900 dark:text-white\">\r\n                      {formatTime(goal.remainingMinutes)}\r\n                    </span>\r\n                  </div>\r\n                  <div>\r\n                    <span className=\"text-gray-600 dark:text-gray-400\">Daily target: </span>\r\n                    <span className=\"font-medium text-gray-900 dark:text-white\">\r\n                      {formatTime(goal.dailyTargetToMeetGoal)}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Suggestion */}\r\n                <div className={`p-3 rounded-lg ${colors.bg} border ${colors.border}`}>\r\n                  <div className=\"flex items-start gap-2\">\r\n                    <Target className={`w-4 h-4 mt-0.5 ${colors.icon}`} />\r\n                    <div>\r\n                      <p className={`text-sm font-medium ${colors.text} mb-1`}>\r\n                        Recommendation:\r\n                      </p>\r\n                      <p className={`text-sm ${colors.text}`}>\r\n                        {goal.suggestion}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      ) : (\r\n        <div className=\"text-center py-8\">\r\n          <div className=\"p-4 bg-green-100 dark:bg-green-900/30 rounded-full w-fit mx-auto mb-4\">\r\n            <Target className=\"w-8 h-8 text-green-600 dark:text-green-400\" />\r\n          </div>\r\n          <h4 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\r\n            All Goals on Track! 🎯\r\n          </h4>\r\n          <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\r\n            Great job! All your weekly goals are progressing well. Keep up the excellent work!\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoalsNeedingAttention;","import React, { useEffect, useState } from 'react';\r\nimport { Brain, TrendingUp, Award, Info } from 'lucide-react';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\r\n\r\ninterface FocusScoreDisplayProps {\r\n  className?: string;\r\n  showTrend?: boolean;\r\n  showDetails?: boolean;\r\n}\r\n\r\ninterface FocusScoreData {\r\n  currentScore: number;\r\n  previousScore: number;\r\n  trend: Array<{\r\n    date: string;\r\n    score: number;\r\n    totalTime: number;\r\n  }>;\r\n  breakdown: {\r\n    timeScore: number;\r\n    qualityScore: number;\r\n    consistencyScore: number;\r\n  };\r\n  insights: string[];\r\n}\r\n\r\n/**\r\n * FocusScoreDisplay Component\r\n * \r\n * Displays the user's focus score with detailed breakdown and trends.\r\n * Shows current score, historical trends, and actionable insights.\r\n * Integrates with the FocusScoreService for real-time calculations.\r\n */\r\nexport const FocusScoreDisplay: React.FC<FocusScoreDisplayProps> = ({\r\n  className = '',\r\n  showTrend = true,\r\n  showDetails = true\r\n}) => {\r\n  const [focusData, setFocusData] = useState<FocusScoreData | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    fetchFocusScore();\r\n  }, []);\r\n\r\n  const fetchFocusScore = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await fetch('/api/focus-score/current');\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch focus score');\r\n      }\r\n      \r\n      const data = await response.json();\r\n      setFocusData(data);\r\n    } catch (error) {\r\n      console.error('Error fetching focus score:', error);\r\n      setError(error instanceof Error ? error.message : 'Unknown error');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getScoreColor = (score: number) => {\r\n    if (score >= 80) return 'text-green-600 dark:text-green-400';\r\n    if (score >= 60) return 'text-blue-600 dark:text-blue-400';\r\n    if (score >= 40) return 'text-yellow-600 dark:text-yellow-400';\r\n    return 'text-red-600 dark:text-red-400';\r\n  };\r\n\r\n  const getScoreBgColor = (score: number) => {\r\n    if (score >= 80) return 'bg-green-100 dark:bg-green-900/30';\r\n    if (score >= 60) return 'bg-blue-100 dark:bg-blue-900/30';\r\n    if (score >= 40) return 'bg-yellow-100 dark:bg-yellow-900/30';\r\n    return 'bg-red-100 dark:bg-red-900/30';\r\n  };\r\n\r\n  const getScoreLabel = (score: number) => {\r\n    if (score >= 80) return 'Excellent';\r\n    if (score >= 60) return 'Good';\r\n    if (score >= 40) return 'Fair';\r\n    return 'Needs Improvement';\r\n  };\r\n\r\n  const formatTrendChange = (current: number, previous: number) => {\r\n    const change = current - previous;\r\n    const isPositive = change > 0;\r\n    const isNeutral = change === 0;\r\n    \r\n    if (isNeutral) return { text: 'No change', color: 'text-gray-500', icon: '→' };\r\n    \r\n    return {\r\n      text: `${isPositive ? '+' : ''}${change.toFixed(1)} points`,\r\n      color: isPositive ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400',\r\n      icon: isPositive ? '↗' : '↘'\r\n    };\r\n  };\r\n\r\n  const CustomTooltip = ({ active, payload, label }: any) => {\r\n    if (active && payload && payload.length) {\r\n      const data = payload[0].payload;\r\n      return (\r\n        <div className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-600 rounded-lg shadow-lg p-3\">\r\n          <p className=\"font-medium text-gray-900 dark:text-white mb-2\">\r\n            {new Date(label).toLocaleDateString()}\r\n          </p>\r\n          <div className=\"space-y-1 text-sm\">\r\n            <div className=\"flex items-center justify-between gap-4\">\r\n              <span className=\"text-gray-600 dark:text-gray-400\">Focus Score:</span>\r\n              <span className={`font-medium ${getScoreColor(data.score)}`}>\r\n                {data.score}\r\n              </span>\r\n            </div>\r\n            <div className=\"flex items-center justify-between gap-4\">\r\n              <span className=\"text-gray-600 dark:text-gray-400\">Focus Time:</span>\r\n              <span className=\"font-medium text-gray-900 dark:text-white\">\r\n                {Math.round(data.totalTime / 60)}h {data.totalTime % 60}m\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className={`animate-pulse bg-gray-100 dark:bg-gray-800 rounded-lg p-6 ${className}`}>\r\n        <div className=\"h-4 bg-gray-300 dark:bg-gray-600 rounded w-1/2 mb-4\"></div>\r\n        <div className=\"h-16 bg-gray-300 dark:bg-gray-600 rounded mb-4\"></div>\r\n        {showTrend && <div className=\"h-32 bg-gray-300 dark:bg-gray-600 rounded\"></div>}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className={`bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6 ${className}`}>\r\n        <div className=\"flex items-center gap-2 text-red-600 dark:text-red-400 mb-2\">\r\n          <Brain className=\"w-5 h-5\" />\r\n          <span className=\"font-medium\">Error Loading Focus Score</span>\r\n        </div>\r\n        <p className=\"text-red-600 dark:text-red-400 text-sm mb-3\">{error}</p>\r\n        <button\r\n          onClick={fetchFocusScore}\r\n          className=\"text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 text-sm font-medium\"\r\n        >\r\n          Try Again\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!focusData) {\r\n    return (\r\n      <div className={`bg-gray-50 dark:bg-gray-800 rounded-lg p-6 ${className}`}>\r\n        <div className=\"text-center\">\r\n          <Brain className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\r\n          <h4 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\r\n            No Focus Data\r\n          </h4>\r\n          <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\r\n            Complete some focus sessions to see your score.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const trendChange = formatTrendChange(focusData.currentScore, focusData.previousScore);\r\n\r\n  return (\r\n    <div className={`bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6 ${className}`}>\r\n      {/* Header */}\r\n      <div className=\"flex items-center gap-2 mb-6\">\r\n        <Brain className=\"w-5 h-5 text-gray-600 dark:text-gray-400\" />\r\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n          Focus Score\r\n        </h3>\r\n      </div>\r\n\r\n      {/* Current Score */}\r\n      <div className=\"mb-6\">\r\n        <div className={`p-6 rounded-lg ${getScoreBgColor(focusData.currentScore)}`}>\r\n          <div className=\"flex items-center justify-between mb-2\">\r\n            <div>\r\n              <div className={`text-4xl font-bold ${getScoreColor(focusData.currentScore)}`}>\r\n                {focusData.currentScore}\r\n              </div>\r\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                {getScoreLabel(focusData.currentScore)}\r\n              </div>\r\n            </div>\r\n            <div className=\"text-right\">\r\n              <div className={`flex items-center gap-1 text-sm ${trendChange.color}`}>\r\n                <span>{trendChange.icon}</span>\r\n                <span>{trendChange.text}</span>\r\n              </div>\r\n              <div className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\r\n                vs. previous period\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Progress Bar */}\r\n          <div className=\"w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2 mt-4\">\r\n            <div\r\n              className={`h-2 rounded-full transition-all duration-500 ${\r\n                focusData.currentScore >= 80 ? 'bg-green-500' :\r\n                focusData.currentScore >= 60 ? 'bg-blue-500' :\r\n                focusData.currentScore >= 40 ? 'bg-yellow-500' : 'bg-red-500'\r\n              }`}\r\n              style={{ width: `${focusData.currentScore}%` }}\r\n            ></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Score Breakdown */}\r\n      {showDetails && focusData.breakdown && (\r\n        <div className=\"mb-6\">\r\n          <h4 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\r\n            Score Breakdown\r\n          </h4>\r\n          <div className=\"grid grid-cols-3 gap-4\">\r\n            <div className=\"text-center p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg\">\r\n              <div className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n                {focusData.breakdown.timeScore}\r\n              </div>\r\n              <div className=\"text-xs text-gray-600 dark:text-gray-400\">\r\n                Time Score\r\n              </div>\r\n            </div>\r\n            <div className=\"text-center p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg\">\r\n              <div className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n                {focusData.breakdown.qualityScore}\r\n              </div>\r\n              <div className=\"text-xs text-gray-600 dark:text-gray-400\">\r\n                Quality Score\r\n              </div>\r\n            </div>\r\n            <div className=\"text-center p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg\">\r\n              <div className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n                {focusData.breakdown.consistencyScore}\r\n              </div>\r\n              <div className=\"text-xs text-gray-600 dark:text-gray-400\">\r\n                Consistency\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Trend Chart */}\r\n      {showTrend && focusData.trend.length > 0 && (\r\n        <div className=\"mb-6\">\r\n          <div className=\"flex items-center gap-2 mb-3\">\r\n            <TrendingUp className=\"w-4 h-4 text-gray-600 dark:text-gray-400\" />\r\n            <h4 className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n              7-Day Trend\r\n            </h4>\r\n          </div>\r\n          <div className=\"h-32\">\r\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n              <LineChart data={focusData.trend}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" opacity={0.3} />\r\n                <XAxis \r\n                  dataKey=\"date\" \r\n                  stroke=\"#6b7280\"\r\n                  fontSize={10}\r\n                  tick={{ fill: '#6b7280' }}\r\n                  tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\r\n                />\r\n                <YAxis \r\n                  stroke=\"#6b7280\"\r\n                  fontSize={10}\r\n                  tick={{ fill: '#6b7280' }}\r\n                  domain={[0, 100]}\r\n                />\r\n                <Tooltip content={<CustomTooltip />} />\r\n                <Line \r\n                  type=\"monotone\" \r\n                  dataKey=\"score\" \r\n                  stroke=\"#3b82f6\" \r\n                  strokeWidth={2}\r\n                  dot={{ fill: '#3b82f6', strokeWidth: 2, r: 3 }}\r\n                  activeDot={{ r: 5, stroke: '#3b82f6', strokeWidth: 2 }}\r\n                />\r\n              </LineChart>\r\n            </ResponsiveContainer>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Insights */}\r\n      {showDetails && focusData.insights.length > 0 && (\r\n        <div>\r\n          <div className=\"flex items-center gap-2 mb-3\">\r\n            <Info className=\"w-4 h-4 text-gray-600 dark:text-gray-400\" />\r\n            <h4 className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n              Insights & Recommendations\r\n            </h4>\r\n          </div>\r\n          <div className=\"space-y-2\">\r\n            {focusData.insights.map((insight, index) => (\r\n              <div\r\n                key={index}\r\n                className=\"p-3 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg\"\r\n              >\r\n                <p className=\"text-blue-700 dark:text-blue-300 text-sm\">\r\n                  💡 {insight}\r\n                </p>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FocusScoreDisplay;","import React, { useEffect, useState } from 'react';\r\nimport { Trophy, Star, Medal, Crown, Zap, Target, Calendar, Flame } from 'lucide-react';\r\n\r\ninterface Achievement {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  icon: string;\r\n  category: 'streak' | 'time' | 'consistency' | 'milestone' | 'special';\r\n  tier: 'bronze' | 'silver' | 'gold' | 'platinum';\r\n  unlockedAt?: Date;\r\n  progress?: {\r\n    current: number;\r\n    target: number;\r\n  };\r\n}\r\n\r\ninterface AchievementBadgesProps {\r\n  className?: string;\r\n  showProgress?: boolean;\r\n  filterCategory?: Achievement['category'];\r\n  maxDisplay?: number;\r\n}\r\n\r\n/**\r\n * AchievementBadges Component\r\n * \r\n * Displays achievement badges with milestone rewards.\r\n * Shows unlocked achievements, progress towards locked ones,\r\n * and provides visual feedback for accomplishments.\r\n */\r\nexport const AchievementBadges: React.FC<AchievementBadgesProps> = ({\r\n  className = '',\r\n  showProgress = true,\r\n  filterCategory,\r\n  maxDisplay\r\n}) => {\r\n  const [achievements, setAchievements] = useState<Achievement[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    fetchAchievements();\r\n  }, []);\r\n\r\n  const fetchAchievements = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await fetch('/api/focus-score/achievements');\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch achievements');\r\n      }\r\n      \r\n      const data = await response.json();\r\n      setAchievements(data.achievements || []);\r\n    } catch (error) {\r\n      console.error('Error fetching achievements:', error);\r\n      setError(error instanceof Error ? error.message : 'Unknown error');\r\n      \r\n      // Fallback to mock data for demonstration\r\n      setAchievements(getMockAchievements());\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getMockAchievements = (): Achievement[] => [\r\n    {\r\n      id: 'first-session',\r\n      title: 'First Steps',\r\n      description: 'Complete your first focus session',\r\n      icon: 'zap',\r\n      category: 'milestone',\r\n      tier: 'bronze',\r\n      unlockedAt: new Date('2024-01-15'),\r\n    },\r\n    {\r\n      id: 'streak-3',\r\n      title: 'Getting Started',\r\n      description: 'Maintain a 3-day focus streak',\r\n      icon: 'flame',\r\n      category: 'streak',\r\n      tier: 'bronze',\r\n      progress: { current: 0, target: 3 }\r\n    },\r\n    {\r\n      id: 'streak-7',\r\n      title: 'Week Warrior',\r\n      description: 'Maintain a 7-day focus streak',\r\n      icon: 'flame',\r\n      category: 'streak',\r\n      tier: 'silver',\r\n      progress: { current: 0, target: 7 }\r\n    },\r\n    {\r\n      id: 'streak-30',\r\n      title: 'Month Master',\r\n      description: 'Maintain a 30-day focus streak',\r\n      icon: 'crown',\r\n      category: 'streak',\r\n      tier: 'gold',\r\n      progress: { current: 0, target: 30 }\r\n    },\r\n    {\r\n      id: 'time-10h',\r\n      title: 'Focused Ten',\r\n      description: 'Complete 10 hours of focused work',\r\n      icon: 'target',\r\n      category: 'time',\r\n      tier: 'bronze',\r\n      progress: { current: 0.38, target: 10 }\r\n    },\r\n    {\r\n      id: 'time-100h',\r\n      title: 'Century Club',\r\n      description: 'Complete 100 hours of focused work',\r\n      icon: 'medal',\r\n      category: 'time',\r\n      tier: 'silver',\r\n      progress: { current: 0.38, target: 100 }\r\n    },\r\n    {\r\n      id: 'consistency-week',\r\n      title: 'Consistent Creator',\r\n      description: 'Complete sessions 5 days in a row',\r\n      icon: 'calendar',\r\n      category: 'consistency',\r\n      tier: 'silver',\r\n      progress: { current: 1, target: 5 }\r\n    },\r\n    {\r\n      id: 'perfect-score',\r\n      title: 'Perfect Focus',\r\n      description: 'Achieve a perfect focus score of 100',\r\n      icon: 'star',\r\n      category: 'special',\r\n      tier: 'platinum',\r\n      progress: { current: 0, target: 100 }\r\n    }\r\n  ];\r\n\r\n  const getIcon = (iconName: string) => {\r\n    const iconMap = {\r\n      trophy: Trophy,\r\n      star: Star,\r\n      medal: Medal,\r\n      crown: Crown,\r\n      zap: Zap,\r\n      target: Target,\r\n      calendar: Calendar,\r\n      flame: Flame\r\n    };\r\n    const IconComponent = iconMap[iconName as keyof typeof iconMap] || Trophy;\r\n    return IconComponent;\r\n  };\r\n\r\n  const getTierColors = (tier: Achievement['tier'], unlocked: boolean) => {\r\n    const colors = {\r\n      bronze: {\r\n        bg: unlocked ? 'bg-orange-100 dark:bg-orange-900/30' : 'bg-gray-100 dark:bg-gray-800',\r\n        border: unlocked ? 'border-orange-300 dark:border-orange-700' : 'border-gray-300 dark:border-gray-600',\r\n        icon: unlocked ? 'text-orange-600 dark:text-orange-400' : 'text-gray-400',\r\n        text: unlocked ? 'text-orange-800 dark:text-orange-200' : 'text-gray-500 dark:text-gray-400'\r\n      },\r\n      silver: {\r\n        bg: unlocked ? 'bg-gray-100 dark:bg-gray-700' : 'bg-gray-100 dark:bg-gray-800',\r\n        border: unlocked ? 'border-gray-400 dark:border-gray-500' : 'border-gray-300 dark:border-gray-600',\r\n        icon: unlocked ? 'text-gray-600 dark:text-gray-300' : 'text-gray-400',\r\n        text: unlocked ? 'text-gray-800 dark:text-gray-200' : 'text-gray-500 dark:text-gray-400'\r\n      },\r\n      gold: {\r\n        bg: unlocked ? 'bg-yellow-100 dark:bg-yellow-900/30' : 'bg-gray-100 dark:bg-gray-800',\r\n        border: unlocked ? 'border-yellow-300 dark:border-yellow-700' : 'border-gray-300 dark:border-gray-600',\r\n        icon: unlocked ? 'text-yellow-600 dark:text-yellow-400' : 'text-gray-400',\r\n        text: unlocked ? 'text-yellow-800 dark:text-yellow-200' : 'text-gray-500 dark:text-gray-400'\r\n      },\r\n      platinum: {\r\n        bg: unlocked ? 'bg-purple-100 dark:bg-purple-900/30' : 'bg-gray-100 dark:bg-gray-800',\r\n        border: unlocked ? 'border-purple-300 dark:border-purple-700' : 'border-gray-300 dark:border-gray-600',\r\n        icon: unlocked ? 'text-purple-600 dark:text-purple-400' : 'text-gray-400',\r\n        text: unlocked ? 'text-purple-800 dark:text-purple-200' : 'text-gray-500 dark:text-gray-400'\r\n      }\r\n    };\r\n    return colors[tier];\r\n  };\r\n\r\n  const getCategoryIcon = (category: Achievement['category']) => {\r\n    const categoryIcons = {\r\n      streak: Flame,\r\n      time: Target,\r\n      consistency: Calendar,\r\n      milestone: Star,\r\n      special: Crown\r\n    };\r\n    return categoryIcons[category];\r\n  };\r\n\r\n  const formatProgress = (progress: Achievement['progress']) => {\r\n    if (!progress) return '';\r\n    const percentage = Math.min(100, (progress.current / progress.target) * 100);\r\n    return `${progress.current}/${progress.target} (${Math.round(percentage)}%)`;\r\n  };\r\n\r\n  let filteredAchievements = achievements;\r\n  if (filterCategory) {\r\n    filteredAchievements = achievements.filter(a => a.category === filterCategory);\r\n  }\r\n  if (maxDisplay) {\r\n    filteredAchievements = filteredAchievements.slice(0, maxDisplay);\r\n  }\r\n\r\n  // Sort: unlocked first, then by tier, then by progress\r\n  filteredAchievements.sort((a, b) => {\r\n    const aUnlocked = !!a.unlockedAt;\r\n    const bUnlocked = !!b.unlockedAt;\r\n    \r\n    if (aUnlocked !== bUnlocked) {\r\n      return bUnlocked ? 1 : -1; // Unlocked first\r\n    }\r\n    \r\n    const tierOrder = { bronze: 1, silver: 2, gold: 3, platinum: 4 };\r\n    const tierDiff = tierOrder[a.tier] - tierOrder[b.tier];\r\n    if (tierDiff !== 0) return tierDiff;\r\n    \r\n    // Sort by progress if both locked\r\n    if (!aUnlocked && !bUnlocked && a.progress && b.progress) {\r\n      const aProgress = a.progress.current / a.progress.target;\r\n      const bProgress = b.progress.current / b.progress.target;\r\n      return bProgress - aProgress;\r\n    }\r\n    \r\n    return 0;\r\n  });\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className={`animate-pulse bg-gray-100 dark:bg-gray-800 rounded-lg p-6 ${className}`}>\r\n        <div className=\"h-4 bg-gray-300 dark:bg-gray-600 rounded w-1/2 mb-4\"></div>\r\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n          {[1, 2, 3, 4].map(i => (\r\n            <div key={i} className=\"h-24 bg-gray-300 dark:bg-gray-600 rounded-lg\"></div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error && achievements.length === 0) {\r\n    return (\r\n      <div className={`bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6 ${className}`}>\r\n        <div className=\"flex items-center gap-2 text-red-600 dark:text-red-400 mb-2\">\r\n          <Trophy className=\"w-5 h-5\" />\r\n          <span className=\"font-medium\">Error Loading Achievements</span>\r\n        </div>\r\n        <p className=\"text-red-600 dark:text-red-400 text-sm mb-3\">{error}</p>\r\n        <button\r\n          onClick={fetchAchievements}\r\n          className=\"text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 text-sm font-medium\"\r\n        >\r\n          Try Again\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6 ${className}`}>\r\n      {/* Header */}\r\n      <div className=\"flex items-center gap-2 mb-6\">\r\n        <Trophy className=\"w-5 h-5 text-gray-600 dark:text-gray-400\" />\r\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n          Achievement Badges\r\n        </h3>\r\n        <span className=\"bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300 text-xs font-medium px-2 py-1 rounded-full\">\r\n          {achievements.filter(a => a.unlockedAt).length}/{achievements.length}\r\n        </span>\r\n      </div>\r\n\r\n      {/* Achievements Grid */}\r\n      {filteredAchievements.length > 0 ? (\r\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\r\n          {filteredAchievements.map((achievement) => {\r\n            const unlocked = !!achievement.unlockedAt;\r\n            const colors = getTierColors(achievement.tier, unlocked);\r\n            const IconComponent = getIcon(achievement.icon);\r\n            const CategoryIcon = getCategoryIcon(achievement.category);\r\n            \r\n            return (\r\n              <div\r\n                key={achievement.id}\r\n                className={`relative p-4 rounded-lg border-2 transition-all duration-200 hover:scale-105 ${colors.bg} ${colors.border} ${\r\n                  unlocked ? 'shadow-md hover:shadow-lg' : 'opacity-75'\r\n                }`}\r\n              >\r\n                {/* Category Badge */}\r\n                <div className=\"absolute top-2 right-2\">\r\n                  <CategoryIcon className=\"w-3 h-3 text-gray-500 dark:text-gray-400\" />\r\n                </div>\r\n                \r\n                {/* Achievement Icon */}\r\n                <div className=\"flex justify-center mb-3\">\r\n                  <div className={`p-3 rounded-full ${colors.bg} ${colors.border} border`}>\r\n                    <IconComponent className={`w-6 h-6 ${colors.icon}`} />\r\n                  </div>\r\n                </div>\r\n                \r\n                {/* Achievement Info */}\r\n                <div className=\"text-center\">\r\n                  <h4 className={`font-medium text-sm mb-1 ${colors.text}`}>\r\n                    {achievement.title}\r\n                  </h4>\r\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400 mb-2\">\r\n                    {achievement.description}\r\n                  </p>\r\n                  \r\n                  {/* Tier Badge */}\r\n                  <div className={`inline-block px-2 py-1 rounded-full text-xs font-medium ${colors.bg} ${colors.text} border ${colors.border}`}>\r\n                    {achievement.tier.charAt(0).toUpperCase() + achievement.tier.slice(1)}\r\n                  </div>\r\n                  \r\n                  {/* Progress or Unlock Date */}\r\n                  {unlocked && achievement.unlockedAt ? (\r\n                    <div className=\"mt-2 text-xs text-gray-500 dark:text-gray-400\">\r\n                      Unlocked {achievement.unlockedAt.toLocaleDateString()}\r\n                    </div>\r\n                  ) : showProgress && achievement.progress ? (\r\n                    <div className=\"mt-2\">\r\n                      <div className=\"text-xs text-gray-600 dark:text-gray-400 mb-1\">\r\n                        {formatProgress(achievement.progress)}\r\n                      </div>\r\n                      <div className=\"w-full bg-gray-200 dark:bg-gray-600 rounded-full h-1\">\r\n                        <div\r\n                          className={`h-1 rounded-full transition-all duration-500 ${\r\n                            achievement.tier === 'bronze' ? 'bg-orange-500' :\r\n                            achievement.tier === 'silver' ? 'bg-gray-500' :\r\n                            achievement.tier === 'gold' ? 'bg-yellow-500' : 'bg-purple-500'\r\n                          }`}\r\n                          style={{ \r\n                            width: `${Math.min(100, (achievement.progress.current / achievement.progress.target) * 100)}%` \r\n                          }}\r\n                        ></div>\r\n                      </div>\r\n                    </div>\r\n                  ) : null}\r\n                </div>\r\n                \r\n                {/* Unlock Effect */}\r\n                {unlocked && (\r\n                  <div className=\"absolute inset-0 rounded-lg bg-gradient-to-r from-transparent via-white/20 to-transparent animate-pulse\"></div>\r\n                )}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      ) : (\r\n        <div className=\"text-center py-8\">\r\n          <Trophy className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\r\n          <h4 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\r\n            No Achievements Yet\r\n          </h4>\r\n          <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\r\n            Start completing focus sessions to unlock achievement badges!\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AchievementBadges;","import React, { useEffect, useState } from 'react';\r\nimport { BarChart, Bar, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';\r\nimport { TrendingUp, Calendar, Clock, Target, Activity } from 'lucide-react';\r\n\r\ninterface HabitStatisticsProps {\r\n  className?: string;\r\n  timeRange?: 'week' | 'month' | 'quarter' | 'year';\r\n}\r\n\r\ninterface StatisticsData {\r\n  overview: {\r\n    totalSessions: number;\r\n    totalFocusTime: number;\r\n    averageSessionLength: number;\r\n    longestStreak: number;\r\n    currentStreak: number;\r\n    focusScore: number;\r\n  };\r\n  trends: {\r\n    daily: Array<{\r\n      date: string;\r\n      sessions: number;\r\n      focusTime: number;\r\n      score: number;\r\n    }>;\r\n    weekly: Array<{\r\n      week: string;\r\n      sessions: number;\r\n      focusTime: number;\r\n      score: number;\r\n    }>;\r\n  };\r\n  patterns: {\r\n    hourly: Array<{\r\n      hour: number;\r\n      sessions: number;\r\n      avgScore: number;\r\n    }>;\r\n    weekday: Array<{\r\n      day: string;\r\n      sessions: number;\r\n      avgScore: number;\r\n    }>;\r\n  };\r\n  categories: Array<{\r\n    name: string;\r\n    focusTime: number;\r\n    sessions: number;\r\n    color: string;\r\n  }>;\r\n}\r\n\r\n/**\r\n * HabitStatistics Component\r\n * \r\n * Comprehensive dashboard showing habit statistics and trend analysis.\r\n * Displays focus patterns, productivity insights, and performance metrics.\r\n * Provides multiple chart types for different data perspectives.\r\n */\r\nexport const HabitStatistics: React.FC<HabitStatisticsProps> = ({\r\n  className = '',\r\n  timeRange = 'month'\r\n}) => {\r\n  const [statistics, setStatistics] = useState<StatisticsData | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [activeTab, setActiveTab] = useState<'overview' | 'trends' | 'patterns'>('overview');\r\n\r\n  useEffect(() => {\r\n    fetchStatistics();\r\n  }, [timeRange]);\r\n\r\n  const fetchStatistics = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await fetch(`/api/focus-score/statistics?range=${timeRange}`);\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch statistics');\r\n      }\r\n      \r\n      const data = await response.json();\r\n      setStatistics(data);\r\n    } catch (error) {\r\n      console.error('Error fetching statistics:', error);\r\n      setError(error instanceof Error ? error.message : 'Unknown error');\r\n      \r\n      // Fallback to mock data for demonstration\r\n      setStatistics(getMockStatistics());\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getMockStatistics = (): StatisticsData => ({\r\n    overview: {\r\n      totalSessions: 23,\r\n      totalFocusTime: 1380, // 23 hours in minutes\r\n      averageSessionLength: 60,\r\n      longestStreak: 5,\r\n      currentStreak: 0,\r\n      focusScore: 72\r\n    },\r\n    trends: {\r\n      daily: [\r\n        { date: '2025-09-12', sessions: 3, focusTime: 180, score: 75 },\r\n        { date: '2025-09-13', sessions: 2, focusTime: 120, score: 68 },\r\n        { date: '2025-09-14', sessions: 4, focusTime: 240, score: 82 },\r\n        { date: '2025-09-15', sessions: 1, focusTime: 60, score: 65 },\r\n        { date: '2025-09-16', sessions: 3, focusTime: 180, score: 78 },\r\n        { date: '2025-09-17', sessions: 2, focusTime: 120, score: 70 },\r\n        { date: '2025-09-18', sessions: 0, focusTime: 0, score: 0 }\r\n      ],\r\n      weekly: [\r\n        { week: 'Week 1', sessions: 15, focusTime: 900, score: 74 },\r\n        { week: 'Week 2', sessions: 18, focusTime: 1080, score: 78 },\r\n        { week: 'Week 3', sessions: 12, focusTime: 720, score: 69 },\r\n        { week: 'Week 4', sessions: 8, focusTime: 480, score: 65 }\r\n      ]\r\n    },\r\n    patterns: {\r\n      hourly: [\r\n        { hour: 6, sessions: 2, avgScore: 85 },\r\n        { hour: 7, sessions: 4, avgScore: 82 },\r\n        { hour: 8, sessions: 6, avgScore: 78 },\r\n        { hour: 9, sessions: 8, avgScore: 75 },\r\n        { hour: 10, sessions: 5, avgScore: 73 },\r\n        { hour: 14, sessions: 3, avgScore: 70 },\r\n        { hour: 15, sessions: 4, avgScore: 68 },\r\n        { hour: 16, sessions: 2, avgScore: 65 },\r\n        { hour: 20, sessions: 3, avgScore: 72 },\r\n        { hour: 21, sessions: 2, avgScore: 70 }\r\n      ],\r\n      weekday: [\r\n        { day: 'Mon', sessions: 8, avgScore: 76 },\r\n        { day: 'Tue', sessions: 6, avgScore: 74 },\r\n        { day: 'Wed', sessions: 7, avgScore: 78 },\r\n        { day: 'Thu', sessions: 5, avgScore: 72 },\r\n        { day: 'Fri', sessions: 4, avgScore: 69 },\r\n        { day: 'Sat', sessions: 2, avgScore: 65 },\r\n        { day: 'Sun', sessions: 3, avgScore: 68 }\r\n      ]\r\n    },\r\n    categories: [\r\n      { name: 'Work & Business', focusTime: 600, sessions: 10, color: '#3b82f6' },\r\n      { name: 'Learning', focusTime: 360, sessions: 6, color: '#10b981' },\r\n      { name: 'Creative', focusTime: 240, sessions: 4, color: '#f59e0b' },\r\n      { name: 'Personal', focusTime: 180, sessions: 3, color: '#ef4444' }\r\n    ]\r\n  });\r\n\r\n  const formatTime = (minutes: number) => {\r\n    const hours = Math.floor(minutes / 60);\r\n    const mins = minutes % 60;\r\n    if (hours > 0) {\r\n      return `${hours}h ${mins}m`;\r\n    }\r\n    return `${mins}m`;\r\n  };\r\n\r\n  const formatHour = (hour: number) => {\r\n    if (hour === 0) return '12 AM';\r\n    if (hour < 12) return `${hour} AM`;\r\n    if (hour === 12) return '12 PM';\r\n    return `${hour - 12} PM`;\r\n  };\r\n\r\n  const CustomTooltip = ({ active, payload, label }: any) => {\r\n    if (active && payload && payload.length) {\r\n      return (\r\n        <div className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-600 rounded-lg shadow-lg p-3\">\r\n          <p className=\"font-medium text-gray-900 dark:text-white mb-2\">{label}</p>\r\n          {payload.map((entry: any, index: number) => (\r\n            <div key={index} className=\"text-sm\">\r\n              <span style={{ color: entry.color }}>{entry.name}: </span>\r\n              <span className=\"font-medium\">\r\n                {entry.dataKey === 'focusTime' ? formatTime(entry.value) : entry.value}\r\n              </span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className={`animate-pulse bg-gray-100 dark:bg-gray-800 rounded-lg p-6 ${className}`}>\r\n        <div className=\"h-4 bg-gray-300 dark:bg-gray-600 rounded w-1/2 mb-6\"></div>\r\n        <div className=\"grid grid-cols-4 gap-4 mb-6\">\r\n          {[1, 2, 3, 4].map(i => (\r\n            <div key={i} className=\"h-16 bg-gray-300 dark:bg-gray-600 rounded\"></div>\r\n          ))}\r\n        </div>\r\n        <div className=\"h-64 bg-gray-300 dark:bg-gray-600 rounded\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className={`bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6 ${className}`}>\r\n        <div className=\"flex items-center gap-2 text-red-600 dark:text-red-400 mb-2\">\r\n          <Activity className=\"w-5 h-5\" />\r\n          <span className=\"font-medium\">Error Loading Statistics</span>\r\n        </div>\r\n        <p className=\"text-red-600 dark:text-red-400 text-sm mb-3\">{error}</p>\r\n        <button\r\n          onClick={fetchStatistics}\r\n          className=\"text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 text-sm font-medium\"\r\n        >\r\n          Try Again\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!statistics) {\r\n    return (\r\n      <div className={`bg-gray-50 dark:bg-gray-800 rounded-lg p-6 ${className}`}>\r\n        <div className=\"text-center\">\r\n          <Activity className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\r\n          <h4 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\r\n            No Statistics Available\r\n          </h4>\r\n          <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\r\n            Complete some focus sessions to see your statistics.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6 ${className}`}>\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between mb-6\">\r\n        <div className=\"flex items-center gap-2\">\r\n          <Activity className=\"w-5 h-5 text-gray-600 dark:text-gray-400\" />\r\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n            Habit Statistics\r\n          </h3>\r\n        </div>\r\n        \r\n        {/* Tab Navigation */}\r\n        <div className=\"flex bg-gray-100 dark:bg-gray-700 rounded-lg p-1\">\r\n          {(['overview', 'trends', 'patterns'] as const).map((tab) => (\r\n            <button\r\n              key={tab}\r\n              onClick={() => setActiveTab(tab)}\r\n              className={`px-3 py-1 text-sm font-medium rounded-md transition-colors ${\r\n                activeTab === tab\r\n                  ? 'bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow-sm'\r\n                  : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white'\r\n              }`}\r\n            >\r\n              {tab.charAt(0).toUpperCase() + tab.slice(1)}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Overview Tab */}\r\n      {activeTab === 'overview' && statistics && (\r\n        <div className=\"space-y-6\">\r\n          {/* Key Metrics */}\r\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n            <div className=\"text-center p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\r\n              <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\r\n                {statistics.overview?.totalSessions || 0}\r\n              </div>\r\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                Total Sessions\r\n              </div>\r\n            </div>\r\n            <div className=\"text-center p-4 bg-green-50 dark:bg-green-900/20 rounded-lg\">\r\n              <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\">\r\n                {formatTime(statistics.overview?.totalFocusTime || 0)}\r\n              </div>\r\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                Focus Time\r\n              </div>\r\n            </div>\r\n            <div className=\"text-center p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg\">\r\n              <div className=\"text-2xl font-bold text-yellow-600 dark:text-yellow-400\">\r\n                {statistics.overview?.longestStreak || 0}\r\n              </div>\r\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                Longest Streak\r\n              </div>\r\n            </div>\r\n            <div className=\"text-center p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg\">\r\n              <div className=\"text-2xl font-bold text-purple-600 dark:text-purple-400\">\r\n                {statistics.overview?.focusScore || 0}\r\n              </div>\r\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                Focus Score\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Category Distribution */}\r\n          <div>\r\n            <h4 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-4\">\r\n              Focus Time by Category\r\n            </h4>\r\n            <div className=\"h-64\">\r\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                <PieChart>\r\n                  <Pie\r\n                    data={statistics.categories || []}\r\n                    cx=\"50%\"\r\n                    cy=\"50%\"\r\n                    outerRadius={80}\r\n                    dataKey=\"focusTime\"\r\n                    label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\r\n                  >\r\n                    {(statistics.categories || []).map((entry, index) => (\r\n                      <Cell key={`cell-${index}`} fill={entry.color} />\r\n                    ))}\r\n                  </Pie>\r\n                  <Tooltip formatter={(value) => formatTime(value as number)} />\r\n                </PieChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Trends Tab */}\r\n      {activeTab === 'trends' && statistics && (\r\n        <div className=\"space-y-6\">\r\n          {/* Daily Trend */}\r\n          <div>\r\n            <h4 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-4\">\r\n              Daily Focus Time (Last 7 Days)\r\n            </h4>\r\n            <div className=\"h-64\">\r\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                <LineChart data={statistics.trends?.daily || []}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" opacity={0.3} />\r\n                  <XAxis \r\n                    dataKey=\"date\" \r\n                    stroke=\"#6b7280\"\r\n                    fontSize={12}\r\n                    tick={{ fill: '#6b7280' }}\r\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\r\n                  />\r\n                  <YAxis \r\n                    stroke=\"#6b7280\"\r\n                    fontSize={12}\r\n                    tick={{ fill: '#6b7280' }}\r\n                    tickFormatter={(value) => `${Math.round(value / 60)}h`}\r\n                  />\r\n                  <Tooltip content={<CustomTooltip />} />\r\n                  <Line \r\n                    type=\"monotone\" \r\n                    dataKey=\"focusTime\" \r\n                    stroke=\"#3b82f6\" \r\n                    strokeWidth={2}\r\n                    name=\"Focus Time\"\r\n                  />\r\n                </LineChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Weekly Sessions */}\r\n          <div>\r\n            <h4 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-4\">\r\n              Weekly Sessions\r\n            </h4>\r\n            <div className=\"h-64\">\r\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                <BarChart data={statistics.trends?.weekly || []}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" opacity={0.3} />\r\n                  <XAxis \r\n                    dataKey=\"week\" \r\n                    stroke=\"#6b7280\"\r\n                    fontSize={12}\r\n                    tick={{ fill: '#6b7280' }}\r\n                  />\r\n                  <YAxis \r\n                    stroke=\"#6b7280\"\r\n                    fontSize={12}\r\n                    tick={{ fill: '#6b7280' }}\r\n                  />\r\n                  <Tooltip content={<CustomTooltip />} />\r\n                  <Bar dataKey=\"sessions\" fill=\"#10b981\" name=\"Sessions\" />\r\n                </BarChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Patterns Tab */}\r\n      {activeTab === 'patterns' && statistics && (\r\n        <div className=\"space-y-6\">\r\n          {/* Hourly Pattern */}\r\n          <div>\r\n            <h4 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-4\">\r\n              Focus Sessions by Hour\r\n            </h4>\r\n            <div className=\"h-64\">\r\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                <BarChart data={statistics.patterns?.hourly || []}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" opacity={0.3} />\r\n                  <XAxis \r\n                    dataKey=\"hour\" \r\n                    stroke=\"#6b7280\"\r\n                    fontSize={12}\r\n                    tick={{ fill: '#6b7280' }}\r\n                    tickFormatter={formatHour}\r\n                  />\r\n                  <YAxis \r\n                    stroke=\"#6b7280\"\r\n                    fontSize={12}\r\n                    tick={{ fill: '#6b7280' }}\r\n                  />\r\n                  <Tooltip \r\n                    labelFormatter={formatHour}\r\n                    content={<CustomTooltip />}\r\n                  />\r\n                  <Bar dataKey=\"sessions\" fill=\"#f59e0b\" name=\"Sessions\" />\r\n                </BarChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Weekday Pattern */}\r\n          <div>\r\n            <h4 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-4\">\r\n              Focus Sessions by Day of Week\r\n            </h4>\r\n            <div className=\"h-64\">\r\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                <BarChart data={statistics.patterns?.weekday || []}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" opacity={0.3} />\r\n                  <XAxis \r\n                    dataKey=\"day\" \r\n                    stroke=\"#6b7280\"\r\n                    fontSize={12}\r\n                    tick={{ fill: '#6b7280' }}\r\n                  />\r\n                  <YAxis \r\n                    stroke=\"#6b7280\"\r\n                    fontSize={12}\r\n                    tick={{ fill: '#6b7280' }}\r\n                  />\r\n                  <Tooltip content={<CustomTooltip />} />\r\n                  <Bar dataKey=\"sessions\" fill=\"#8b5cf6\" name=\"Sessions\" />\r\n                </BarChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HabitStatistics;","import React, { useState } from 'react';\r\nimport { \r\n  StreakDisplay, \r\n  HabitChain, \r\n  GracePeriodDialog, \r\n  StreakMilestones,\r\n  WeeklyGoalsManager,\r\n  GoalProgressChart,\r\n  GoalAchievements,\r\n  GoalsNeedingAttention,\r\n  FocusScoreDisplay,\r\n  AchievementBadges,\r\n  HabitStatistics\r\n} from '../components/Habit';\r\n\r\n/**\r\n * Habits Page\r\n * \r\n * Displays habit tracking and streak system components.\r\n * Shows streak information, habit chains, milestones, and recovery options.\r\n */\r\nconst Habits: React.FC = () => {\r\n  const [showGracePeriodDialog, setShowGracePeriodDialog] = useState(false);\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Page Header */}\r\n      <div>\r\n        <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\r\n          Habit Tracking\r\n        </h1>\r\n        <p className=\"text-gray-600 dark:text-gray-400\">\r\n          Track your focus streaks and build consistent habits\r\n        </p>\r\n      </div>\r\n\r\n      {/* Top Row - Streak Display and Milestones */}\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        <StreakDisplay />\r\n        <StreakMilestones />\r\n      </div>\r\n\r\n      {/* Weekly Goals Section */}\r\n      <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-6\">\r\n        <WeeklyGoalsManager />\r\n        <GoalProgressChart />\r\n      </div>\r\n\r\n      {/* Goals Status */}\r\n      <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-6\">\r\n        <GoalsNeedingAttention />\r\n        <GoalAchievements />\r\n      </div>\r\n\r\n      {/* Focus Score and Achievements */}\r\n      <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-6\">\r\n        <FocusScoreDisplay />\r\n        <AchievementBadges />\r\n      </div>\r\n\r\n      {/* Habit Statistics */}\r\n      <HabitStatistics />\r\n\r\n      {/* Habit Chain */}\r\n      <HabitChain />\r\n\r\n      {/* Test Grace Period Dialog */}\r\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6\">\r\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\r\n          Grace Period Recovery\r\n        </h3>\r\n        <p className=\"text-gray-600 dark:text-gray-400 text-sm mb-4\">\r\n          Test the grace period dialog functionality (for development purposes).\r\n        </p>\r\n        <button\r\n          onClick={() => setShowGracePeriodDialog(true)}\r\n          className=\"bg-amber-600 hover:bg-amber-700 text-white font-medium py-2 px-4 rounded-md transition-colors\"\r\n        >\r\n          Test Grace Period Dialog\r\n        </button>\r\n      </div>\r\n\r\n      {/* Grace Period Dialog */}\r\n      <GracePeriodDialog\r\n        isOpen={showGracePeriodDialog}\r\n        onClose={() => setShowGracePeriodDialog(false)}\r\n        onRecovered={() => {\r\n          console.log('Streak recovered!');\r\n          setShowGracePeriodDialog(false);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Habits;"],"names":["API_BASE","useStreakStore","create","devtools","set","get","streakInfo","statistics","milestones","settings","loading","recovery","error","fetchStreakInfo","async","state","response","fetch","ok","Error","json","gracePeriodEndsAt","Date","message","fetchStatistics","startDate","endDate","fetchMilestones","fetchSettings","defaultSettings","minimumFocusTime","gracePeriodDays","streakRecoveryEnabled","updateSettings","newSettings","method","headers","body","JSON","stringify","recoverStreak","date","result","success","updateDailyStats","clearError","name","StreakDisplay","className","showDetails","useEffect","jsxs","children","jsx","Calendar","onClick","getStreakColor","streak","gracePeriodActive","Clock","currentStreak","Trophy","Flame","Fragment","longestStreak","lastStreakDate","toLocaleDateString","yesterday","setDate","getDate","dateStr","toISOString","split","disabled","HabitChain","daysToShow","showNavigation","currentDate","setCurrentDate","useState","dates","days","i","push","generateDateRange","today","isStreakDay","streakDates","includes","getDayStatus","isFuture","isToday","getDayClasses","status","baseClasses","getTooltipText","newDate","title","ChevronLeft","ChevronRight","length","map","day","index","Array","from","getDay","_","dayNumber","Math","round","GracePeriodDialog","isOpen","onClose","onRecovered","isRecovering","setIsRecovering","recoveryResult","setRecoveryResult","timeRemaining","max","ceil","getTime","now","X","CheckCircle","AlertTriangle","weekday","year","month","setTimeout","StreakMilestones","showProgress","milestoneConfigs","icon","Zap","color","bgColor","Star","Target","getMilestoneStatus","getNextMilestone","find","m","nextMilestone","progressToNext","next","previous","filter","pop","start","progress","min","getProgressToNext","completedMilestones","upcomingMilestones","slice","style","width","milestone","daysToGo","isNext","useWeeklyGoalsStore","currentWeekProgress","weeklyProgress","Map","achievements","goalsNeedingAttention","currentWeek","weekProgress","attention","updateGoal","celebration","fetchCurrentWeekProgress","fetchWeekProgress","weekStart","updateCategoryGoal","categoryId","targetMinutes","fetchAchievements","processedAchievements","achievement","achievedAt","fetchGoalsNeedingAttention","weeks","celebrateAchievement","WeeklyGoalsManager","categories","fetchCategories","useCategoryStore","editingGoal","setEditingGoal","editValue","setEditValue","showAddGoal","setShowAddGoal","selectedCategory","setSelectedCategory","newGoalValue","setNewGoalValue","handleCancelEdit","formatTime","minutes","hours","floor","mins","getProgressColor","percentage","getAvailableCategories","existingGoalCategoryIds","goals","g","cat","id","Plus","completedGoals","totalGoals","overallProgressPercentage","totalCurrentMinutes","totalTargetMinutes","goal","backgroundColor","categoryColor","categoryName","isCompleted","type","value","onChange","e","target","placeholder","parseInt","isNaN","handleSaveGoal","Save","handleEditGoal","currentTarget","toString","Edit2","handleDeleteGoal","Trash2","currentMinutes","progressPercentage","category","GoalProgressChart","showWeeklyTrend","currentWeekData","current","completed","weeklyTrendData","weeklyTrend","week","completionRate","totalMinutes","goalsCompleted","CustomTooltip","active","payload","label","data","TrendTooltip","TrendingUp","ResponsiveContainer","height","BarChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","stroke","opacity","XAxis","dataKey","fontSize","tick","fill","YAxis","tickFormatter","Tooltip","content","Bar","radius","entry","Cell","GoalAchievements","showCelebration","celebrationModal","setCelebrationModal","selectedDateRange","setSelectedDateRange","end","formatDate","getAchievementIcon","overachievementPercentage","prev","badge","text","actualMinutes","handleCelebrate","Sparkles","GoalsNeedingAttention","getRiskIcon","riskLevel","TrendingDown","colors","bg","border","getRiskColor","toUpperCase","daysLeft","remainingMinutes","dailyTargetToMeetGoal","suggestion","FocusScoreDisplay","showTrend","focusData","setFocusData","setLoading","setError","fetchFocusScore","getScoreColor","score","totalTime","Brain","trendChange","change","isPositive","toFixed","formatTrendChange","currentScore","previousScore","getScoreLabel","breakdown","timeScore","qualityScore","consistencyScore","trend","LineChart","domain","Line","strokeWidth","dot","r","activeDot","insights","Info","insight","AchievementBadges","filterCategory","maxDisplay","setAchievements","getMockAchievements","description","tier","unlockedAt","formatProgress","filteredAchievements","a","sort","b","aUnlocked","bUnlocked","tierOrder","bronze","silver","gold","platinum","tierDiff","aProgress","unlocked","getTierColors","IconComponent","iconName","trophy","star","medal","Medal","crown","Crown","zap","calendar","flame","CategoryIcon","time","consistency","special","charAt","HabitStatistics","timeRange","setStatistics","activeTab","setActiveTab","getMockStatistics","overview","totalSessions","totalFocusTime","averageSessionLength","focusScore","trends","daily","sessions","focusTime","weekly","patterns","hourly","hour","avgScore","formatHour","Activity","tab","PieChart","Pie","cx","cy","outerRadius","percent","formatter","labelFormatter","Habits","showGracePeriodDialog","setShowGracePeriodDialog"],"mappings":"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"}