{"version":3,"file":"Timer-Dxr1fVY-.js","sources":["../../src/services/TimerService.ts","../../src/hooks/useTimer.ts","../../src/utils/cn.ts","../../src/components/Timer/CountdownDisplay.tsx","../../src/components/Timer/ProgressRing.tsx","../../src/components/Timer/SessionControls.tsx","../../src/components/Timer/SessionTypeSelector.tsx","../../src/components/Timer/SystemSleepDialog.tsx","../../src/components/Timer/TaskSelector.tsx","../../src/components/Timer/TaskSwitcher.tsx","../../src/components/Mindfulness/TransitionAnimations.tsx","../../src/components/Mindfulness/MindfulnessPrompt.tsx","../../src/components/Mindfulness/SessionReflection.tsx","../../src/components/Timer/TaskCompletionDialog.tsx","../../src/components/Focus/FocusModeToggle.tsx","../../src/components/Timer/Timer.tsx","../../src/pages/Timer.tsx"],"sourcesContent":["import { useTimerStore } from '../stores/timerStore';\r\n\r\nexport class TimerService {\r\n  private intervalId: number | null = null;\r\n  private readonly TICK_INTERVAL = 100; // 100ms for smooth updates\r\n  private readonly SLEEP_DETECTION_THRESHOLD = 2000; // 2 seconds\r\n  private lastTickTime: number = 0;\r\n  private isInitialized = false;\r\n\r\n  constructor() {\r\n    this.initialize();\r\n  }\r\n\r\n  private initialize(): void {\r\n    if (this.isInitialized) return;\r\n    \r\n    this.setupVisibilityChangeListener();\r\n    this.setupBeforeUnloadListener();\r\n    this.setupFocusListeners();\r\n    this.requestNotificationPermission();\r\n    \r\n    this.isInitialized = true;\r\n  }\r\n\r\n  /**\r\n   * Start the timer service\r\n   */\r\n  public start(): void {\r\n    if (this.intervalId !== null) {\r\n      this.stop();\r\n    }\r\n\r\n    this.lastTickTime = Date.now();\r\n    this.intervalId = window.setInterval(() => {\r\n      this.tick();\r\n    }, this.TICK_INTERVAL);\r\n  }\r\n\r\n  /**\r\n   * Stop the timer service\r\n   */\r\n  public stop(): void {\r\n    if (this.intervalId !== null) {\r\n      clearInterval(this.intervalId);\r\n      this.intervalId = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Main tick function that updates the timer and detects system sleep\r\n   */\r\n  private tick(): void {\r\n    const now = Date.now();\r\n    const deltaTime = now - this.lastTickTime;\r\n\r\n    // Detect system sleep or significant lag\r\n    if (deltaTime > this.SLEEP_DETECTION_THRESHOLD) {\r\n      this.handleSystemSleepDetection(deltaTime);\r\n    }\r\n\r\n    // Update the timer store\r\n    useTimerStore.getState().tick();\r\n    useTimerStore.getState().updateLastActiveTime();\r\n    \r\n    this.lastTickTime = now;\r\n  }\r\n\r\n  /**\r\n   * Handle system sleep detection\r\n   */\r\n  private handleSystemSleepDetection(deltaTime: number): void {\r\n    const timerStore = useTimerStore.getState();\r\n    \r\n    if (timerStore.isRunning && !timerStore.isPaused) {\r\n      console.warn(`System sleep detected. Time gap: ${deltaTime}ms`);\r\n      \r\n      // Pause the timer and mark sleep detection\r\n      timerStore.detectSystemSleep();\r\n      \r\n      // Show notification about sleep detection\r\n      this.showSleepDetectionNotification(Math.round(deltaTime / 1000));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show notification when system sleep is detected\r\n   */\r\n  private showSleepDetectionNotification(secondsGap: number): void {\r\n    const timerStore = useTimerStore.getState();\r\n    \r\n    if (!timerStore.sessionPreferences.notificationsEnabled) return;\r\n\r\n    const message = `System sleep detected (${secondsGap}s gap). Timer has been paused.`;\r\n    \r\n    if ('Notification' in window && Notification.permission === 'granted') {\r\n      new Notification('Timer Paused - Sleep Detected', {\r\n        body: message,\r\n        icon: '/favicon.ico',\r\n        requireInteraction: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup visibility change listener to detect when app is minimized/hidden\r\n   */\r\n  private setupVisibilityChangeListener(): void {\r\n    document.addEventListener('visibilitychange', () => {\r\n      const timerStore = useTimerStore.getState();\r\n      \r\n      if (document.hidden) {\r\n        // App is hidden/minimized\r\n        console.log('App minimized, continuing timer in background');\r\n        timerStore.updateLastActiveTime();\r\n      } else {\r\n        // App is visible again\r\n        console.log('App restored from background');\r\n        timerStore.updateLastActiveTime();\r\n        timerStore.detectSystemSleep();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Setup beforeunload listener to save timer state\r\n   */\r\n  private setupBeforeUnloadListener(): void {\r\n    window.addEventListener('beforeunload', () => {\r\n      const timerStore = useTimerStore.getState();\r\n      \r\n      if (timerStore.isRunning) {\r\n        // Save current timer state to localStorage for recovery\r\n        const timerState = {\r\n          isRunning: timerStore.isRunning,\r\n          isPaused: timerStore.isPaused,\r\n          remainingTime: timerStore.remainingTime,\r\n          sessionType: timerStore.sessionType,\r\n          plannedDuration: timerStore.plannedDuration,\r\n          startTime: timerStore.startTime,\r\n          pausedTime: timerStore.pausedTime,\r\n          currentSession: timerStore.currentSession,\r\n          lastActiveTime: Date.now(),\r\n        };\r\n        \r\n        localStorage.setItem('timerState', JSON.stringify(timerState));\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Setup focus/blur listeners for idle detection\r\n   */\r\n  private setupFocusListeners(): void {\r\n    let idleTimer: number | null = null;\r\n    const IDLE_THRESHOLD = 5 * 60 * 1000; // 5 minutes\r\n\r\n    const resetIdleTimer = () => {\r\n      if (idleTimer) {\r\n        clearTimeout(idleTimer);\r\n      }\r\n      \r\n      idleTimer = window.setTimeout(() => {\r\n        this.handleIdleDetection();\r\n      }, IDLE_THRESHOLD);\r\n      \r\n      useTimerStore.getState().updateLastActiveTime();\r\n    };\r\n\r\n    // Reset idle timer on user activity\r\n    ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'].forEach(event => {\r\n      document.addEventListener(event, resetIdleTimer, { passive: true });\r\n    });\r\n\r\n    // Initial setup\r\n    resetIdleTimer();\r\n  }\r\n\r\n  /**\r\n   * Handle idle detection\r\n   */\r\n  private handleIdleDetection(): void {\r\n    const timerStore = useTimerStore.getState();\r\n    \r\n    if (timerStore.isRunning && !timerStore.isPaused) {\r\n      console.log('User idle detected during active session');\r\n      \r\n      // Show idle notification\r\n      this.showIdleNotification();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show notification when user is idle during active session\r\n   */\r\n  private showIdleNotification(): void {\r\n    const timerStore = useTimerStore.getState();\r\n    \r\n    if (!timerStore.sessionPreferences.notificationsEnabled) return;\r\n\r\n    if ('Notification' in window && Notification.permission === 'granted') {\r\n      const notification = new Notification('Are you still there?', {\r\n        body: 'You seem to be away. Would you like to pause the timer?',\r\n        icon: '/favicon.ico',\r\n        requireInteraction: true,\r\n      });\r\n\r\n      notification.onclick = () => {\r\n        // Focus the app window\r\n        window.focus();\r\n        notification.close();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Request notification permission\r\n   */\r\n  private requestNotificationPermission(): void {\r\n    if ('Notification' in window && Notification.permission === 'default') {\r\n      Notification.requestPermission().then(permission => {\r\n        console.log('Notification permission:', permission);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Recover timer state from localStorage (called on app startup)\r\n   */\r\n  public recoverTimerState(): boolean {\r\n    try {\r\n      const savedState = localStorage.getItem('timerState');\r\n      if (!savedState) return false;\r\n\r\n      const timerState = JSON.parse(savedState);\r\n      const now = Date.now();\r\n      const timeSinceLastActive = now - timerState.lastActiveTime;\r\n\r\n      // If more than 10 minutes have passed, don't recover\r\n      if (timeSinceLastActive > 10 * 60 * 1000) {\r\n        localStorage.removeItem('timerState');\r\n        return false;\r\n      }\r\n\r\n      const timerStore = useTimerStore.getState();\r\n      \r\n      // Calculate how much time should have passed\r\n      const timePassedSeconds = Math.floor(timeSinceLastActive / 1000);\r\n      const newRemainingTime = Math.max(0, timerState.remainingTime - timePassedSeconds);\r\n\r\n      // Restore timer state\r\n      timerStore.startTimer(\r\n        timerState.sessionType,\r\n        timerState.plannedDuration,\r\n        timerState.currentSession?.taskId,\r\n        timerState.currentSession?.categoryId\r\n      );\r\n\r\n      // Update with recovered values\r\n      useTimerStore.setState({\r\n        remainingTime: newRemainingTime,\r\n        isPaused: timerState.isPaused || timeSinceLastActive > 2000, // Auto-pause if significant time passed\r\n        currentSession: timerState.currentSession,\r\n        isSystemSleepDetected: timeSinceLastActive > 2000,\r\n      });\r\n\r\n      // Clean up\r\n      localStorage.removeItem('timerState');\r\n      \r\n      console.log(`Timer state recovered. Time passed: ${timePassedSeconds}s, Remaining: ${newRemainingTime}s`);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Failed to recover timer state:', error);\r\n      localStorage.removeItem('timerState');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get accurate current time for timer calculations\r\n   */\r\n  public getCurrentTime(): number {\r\n    return Date.now();\r\n  }\r\n\r\n  /**\r\n   * Format time in seconds to MM:SS or HH:MM:SS format\r\n   */\r\n  public formatTime(seconds: number, showHours: boolean = false): string {\r\n    const hours = Math.floor(seconds / 3600);\r\n    const minutes = Math.floor((seconds % 3600) / 60);\r\n    const secs = seconds % 60;\r\n\r\n    if (showHours) {\r\n      return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\r\n    }\r\n    \r\n    // If more than 60 minutes, show total minutes (not hours)\r\n    const totalMinutes = Math.floor(seconds / 60);\r\n    return `${totalMinutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\r\n  }\r\n\r\n  /**\r\n   * Calculate session progress percentage\r\n   */\r\n  public getSessionProgress(remainingTime: number, plannedDuration: number): number {\r\n    const totalSeconds = plannedDuration * 60;\r\n    const elapsedSeconds = totalSeconds - remainingTime;\r\n    return Math.min(100, Math.max(0, (elapsedSeconds / totalSeconds) * 100));\r\n  }\r\n\r\n  /**\r\n   * Get session type display name\r\n   */\r\n  public getSessionTypeDisplayName(sessionType: string): string {\r\n    switch (sessionType) {\r\n      case 'deep_work':\r\n        return 'Deep Work';\r\n      case 'quick_task':\r\n        return 'Quick Task';\r\n      case 'break':\r\n        return 'Break Time';\r\n      case 'custom':\r\n        return 'Custom Session';\r\n      default:\r\n        return 'Focus Session';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get session type color for UI\r\n   */\r\n  public getSessionTypeColor(sessionType: string): string {\r\n    switch (sessionType) {\r\n      case 'deep_work':\r\n        return '#3B82F6'; // blue\r\n      case 'quick_task':\r\n        return '#10B981'; // green\r\n      case 'break':\r\n        return '#F59E0B'; // amber\r\n      case 'custom':\r\n        return '#8B5CF6'; // purple\r\n      default:\r\n        return '#6B7280'; // gray\r\n    }\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nexport const timerService = new TimerService();","import { useEffect, useRef } from 'react';\r\nimport { useTimerStore } from '../stores/timerStore';\r\nimport { timerService } from '../services/TimerService';\r\n\r\n/**\r\n * Custom hook to manage timer functionality\r\n * Handles timer service lifecycle and state synchronization\r\n */\r\nexport const useTimer = () => {\r\n  const timerServiceRef = useRef(timerService);\r\n  const isInitialized = useRef(false);\r\n  \r\n  const {\r\n    isRunning,\r\n    isPaused,\r\n    remainingTime,\r\n    sessionType,\r\n    plannedDuration,\r\n    currentSession,\r\n    isSystemSleepDetected,\r\n    startTimer,\r\n    pauseTimer,\r\n    resumeTimer,\r\n    stopTimer,\r\n    completeSession,\r\n    updateSessionType,\r\n    updatePlannedDuration,\r\n    updateSessionPreferences,\r\n    sessionPreferences,\r\n    switchTask,\r\n    completeCurrentTask,\r\n    updateTaskActualDuration,\r\n  } = useTimerStore();\r\n\r\n  // Initialize timer service on mount\r\n  useEffect(() => {\r\n    if (!isInitialized.current) {\r\n      // Try to recover timer state from previous session\r\n      const recovered = timerServiceRef.current.recoverTimerState();\r\n      \r\n      if (recovered) {\r\n        console.log('Timer state recovered from previous session');\r\n      }\r\n      \r\n      // Start the timer service\r\n      timerServiceRef.current.start();\r\n      isInitialized.current = true;\r\n    }\r\n\r\n    // Cleanup on unmount\r\n    return () => {\r\n      if (isInitialized.current) {\r\n        timerServiceRef.current.stop();\r\n        isInitialized.current = false;\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Format remaining time for display\r\n  const formattedTime = timerServiceRef.current.formatTime(remainingTime, remainingTime >= 3600);\r\n  \r\n  // Calculate session progress percentage\r\n  const progress = timerServiceRef.current.getSessionProgress(remainingTime, plannedDuration);\r\n  \r\n  // Get session type display name\r\n  const sessionTypeDisplayName = timerServiceRef.current.getSessionTypeDisplayName(sessionType);\r\n  \r\n  // Get session type color\r\n  const sessionTypeColor = timerServiceRef.current.getSessionTypeColor(sessionType);\r\n\r\n  // Helper function to start a new session\r\n  const startNewSession = (\r\n    type: typeof sessionType,\r\n    duration?: number,\r\n    taskId?: number,\r\n    categoryId?: number\r\n  ) => {\r\n    const sessionDuration = duration || timerServiceRef.current.getDurationForSessionType(type);\r\n    startTimer(type, sessionDuration, taskId, categoryId);\r\n  };\r\n\r\n  // Helper function to handle session completion with rating\r\n  const completeSessionWithRating = async (rating?: number, notes?: string) => {\r\n    await completeSession(rating, notes);\r\n  };\r\n\r\n  // Helper function to get duration options for session type\r\n  const getDurationOptions = (type: typeof sessionType) => {\r\n    switch (type) {\r\n      case 'deep_work':\r\n        return [25, 45, 50, 90];\r\n      case 'quick_task':\r\n        return [5, 10, 15, 25];\r\n      case 'break':\r\n        return [5, 10, 15, 30];\r\n      case 'custom':\r\n        return [15, 25, 30, 45, 60, 90];\r\n      default:\r\n        return [25, 45, 50, 90];\r\n    }\r\n  };\r\n\r\n  // Helper function to check if timer can be started\r\n  const canStartTimer = () => {\r\n    return !isRunning;\r\n  };\r\n\r\n  // Helper function to check if timer can be paused\r\n  const canPauseTimer = () => {\r\n    return isRunning && !isPaused;\r\n  };\r\n\r\n  // Helper function to check if timer can be resumed\r\n  const canResumeTimer = () => {\r\n    return isRunning && isPaused;\r\n  };\r\n\r\n  // Helper function to check if timer can be stopped\r\n  const canStopTimer = () => {\r\n    return isRunning;\r\n  };\r\n\r\n  return {\r\n    // Timer state\r\n    isRunning,\r\n    isPaused,\r\n    remainingTime,\r\n    sessionType,\r\n    plannedDuration,\r\n    currentSession,\r\n    isSystemSleepDetected,\r\n    sessionPreferences,\r\n    \r\n    // Formatted values\r\n    formattedTime,\r\n    progress,\r\n    sessionTypeDisplayName,\r\n    sessionTypeColor,\r\n    \r\n    // Timer controls\r\n    startTimer: startNewSession,\r\n    pauseTimer,\r\n    resumeTimer,\r\n    stopTimer,\r\n    completeSession: completeSessionWithRating,\r\n    \r\n    // Session management\r\n    updateSessionType,\r\n    updatePlannedDuration,\r\n    updateSessionPreferences,\r\n    \r\n    // Task-session integration\r\n    switchTask,\r\n    completeCurrentTask,\r\n    updateTaskActualDuration,\r\n    \r\n    // Helper functions\r\n    getDurationOptions,\r\n    canStartTimer,\r\n    canPauseTimer,\r\n    canResumeTimer,\r\n    canStopTimer,\r\n    \r\n    // Utility functions\r\n    formatTime: timerServiceRef.current.formatTime,\r\n    getSessionProgress: timerServiceRef.current.getSessionProgress,\r\n    getSessionTypeDisplayName: timerServiceRef.current.getSessionTypeDisplayName,\r\n    getSessionTypeColor: timerServiceRef.current.getSessionTypeColor,\r\n  };\r\n};","import { clsx, type ClassValue } from 'clsx';\r\nimport { twMerge } from 'tailwind-merge';\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}","import React from 'react';\r\nimport { cn } from '../../utils/cn';\r\n\r\ninterface CountdownDisplayProps {\r\n  time: string;\r\n  isRunning: boolean;\r\n  isPaused: boolean;\r\n  color: string;\r\n  className?: string;\r\n}\r\n\r\nexport const CountdownDisplay: React.FC<CountdownDisplayProps> = React.memo(({\r\n  time,\r\n  isRunning,\r\n  isPaused,\r\n  color,\r\n  className,\r\n}) => {\r\n  return (\r\n    <div className={cn('text-center w-full h-full flex flex-col items-center justify-center', className)}>\r\n      {/* Timer Display Container with proper constraints */}\r\n      <div\r\n        className=\"relative flex items-center justify-center w-full max-w-[280px] h-[120px] px-4\"\r\n        style={{\r\n          // Ensure timer fits within the progress ring with proper padding\r\n          maxWidth: '280px', // 320px ring - 20px padding on each side\r\n        }}\r\n      >\r\n        <div\r\n          className={cn(\r\n            'font-mono font-bold transition-all duration-300',\r\n            'leading-none text-center overflow-hidden',\r\n            // Responsive font sizing using CSS clamp() for fluid scaling\r\n            'tabular-nums', // Ensure consistent character width for numbers\r\n            {\r\n              'text-gray-800 dark:text-gray-200': !isRunning,\r\n              'animate-pulse': isPaused,\r\n            }\r\n          )}\r\n          style={{\r\n            // Fluid font size that scales properly within container\r\n            fontSize: 'clamp(3rem, 8vw, 5.5rem)', // Min 48px, scales with viewport, max 88px\r\n            color: isRunning ? color : undefined,\r\n            textShadow: isRunning ? `0 0 20px ${color}40` : undefined,\r\n            // Ensure text fits container width\r\n            maxWidth: '100%',\r\n            // Prevent text overflow and layout shifts\r\n            whiteSpace: 'nowrap',\r\n          }}\r\n        >\r\n          {time}\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Status indicator */}\r\n      <div className=\"mt-4\">\r\n        {isRunning && !isPaused && (\r\n          <div className=\"flex items-center justify-center space-x-2\">\r\n            <div \r\n              className=\"w-3 h-3 rounded-full animate-pulse\"\r\n              style={{ backgroundColor: color }}\r\n            />\r\n            <span className=\"text-lg font-medium\" style={{ color }}>\r\n              Focus Time\r\n            </span>\r\n          </div>\r\n        )}\r\n        \r\n        {isRunning && isPaused && (\r\n          <div className=\"flex items-center justify-center space-x-2\">\r\n            <div className=\"w-3 h-3 bg-yellow-500 rounded-full\" />\r\n            <span className=\"text-lg font-medium text-yellow-600 dark:text-yellow-400\">\r\n              Paused\r\n            </span>\r\n          </div>\r\n        )}\r\n        \r\n        {!isRunning && (\r\n          <div className=\"flex items-center justify-center space-x-2\">\r\n            <div className=\"w-3 h-3 bg-gray-400 rounded-full\" />\r\n            <span className=\"text-lg font-medium text-gray-600 dark:text-gray-400\">\r\n              Ready\r\n            </span>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nCountdownDisplay.displayName = 'CountdownDisplay';","import React, { useMemo } from 'react';\r\n\r\ninterface ProgressRingProps {\r\n  progress: number; // 0-100\r\n  color: string;\r\n  size: number;\r\n  strokeWidth: number;\r\n  isRunning: boolean;\r\n  isPaused: boolean;\r\n  className?: string;\r\n}\r\n\r\nexport const ProgressRing: React.FC<ProgressRingProps> = React.memo(({\r\n  progress,\r\n  color,\r\n  size,\r\n  strokeWidth,\r\n  isRunning,\r\n  isPaused,\r\n  className,\r\n}) => {\r\n  // Memoize calculations to prevent re-computation on every render\r\n  const { radius, circumference, strokeDasharray, strokeDashoffset } = useMemo(() => {\r\n    const r = (size - strokeWidth) / 2;\r\n    const c = r * 2 * Math.PI;\r\n    return {\r\n      radius: r,\r\n      circumference: c,\r\n      strokeDasharray: c,\r\n      strokeDashoffset: c - (progress / 100) * c\r\n    };\r\n  }, [size, strokeWidth, progress]);\r\n\r\n  return (\r\n    <div className={className}>\r\n      <svg\r\n        width={size}\r\n        height={size}\r\n        className=\"transform -rotate-90 transition-all duration-300\"\r\n      >\r\n        {/* Background circle */}\r\n        <circle\r\n          cx={size / 2}\r\n          cy={size / 2}\r\n          r={radius}\r\n          stroke=\"currentColor\"\r\n          strokeWidth={strokeWidth}\r\n          fill=\"transparent\"\r\n          className=\"text-gray-200 dark:text-gray-700\"\r\n        />\r\n        \r\n        {/* Progress circle */}\r\n        <circle\r\n          cx={size / 2}\r\n          cy={size / 2}\r\n          r={radius}\r\n          stroke={color}\r\n          strokeWidth={strokeWidth}\r\n          fill=\"transparent\"\r\n          strokeDasharray={strokeDasharray}\r\n          strokeDashoffset={strokeDashoffset}\r\n          strokeLinecap=\"round\"\r\n          className={`transition-all duration-500 ease-in-out ${\r\n            isPaused ? 'animate-pulse' : ''\r\n          }`}\r\n          style={{\r\n            filter: isRunning ? `drop-shadow(0 0 8px ${color}60)` : undefined,\r\n          }}\r\n        />\r\n        \r\n        {/* Animated glow effect when running */}\r\n        {isRunning && !isPaused && (\r\n          <circle\r\n            cx={size / 2}\r\n            cy={size / 2}\r\n            r={radius}\r\n            stroke={color}\r\n            strokeWidth={strokeWidth / 2}\r\n            fill=\"transparent\"\r\n            strokeDasharray={strokeDasharray}\r\n            strokeDashoffset={strokeDashoffset}\r\n            strokeLinecap=\"round\"\r\n            className=\"animate-pulse opacity-50\"\r\n          />\r\n        )}\r\n      </svg>\r\n    </div>\r\n  );\r\n});\r\n\r\nProgressRing.displayName = 'ProgressRing';","import React, { useEffect } from 'react';\r\nimport { Play, Pause, Square, CheckCircle } from 'lucide-react';\r\nimport { cn } from '../../utils/cn';\r\n\r\ninterface SessionControlsProps {\r\n  isRunning: boolean;\r\n  isPaused: boolean;\r\n  canStart: boolean;\r\n  canPause: boolean;\r\n  canResume: boolean;\r\n  canStop: boolean;\r\n  onStart: () => void;\r\n  onPause: () => void;\r\n  onResume: () => void;\r\n  onStop: () => void;\r\n  onComplete: () => void;\r\n}\r\n\r\nexport const SessionControls: React.FC<SessionControlsProps> = ({\r\n  isRunning,\r\n  isPaused,\r\n  canStart,\r\n  canPause,\r\n  canResume,\r\n  canStop,\r\n  onStart,\r\n  onPause,\r\n  onResume,\r\n  onStop,\r\n  onComplete,\r\n}) => {\r\n  // Keyboard shortcuts\r\n  useEffect(() => {\r\n    const handleKeyPress = (event: KeyboardEvent) => {\r\n      // Prevent shortcuts when typing in input fields\r\n      if (event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement) {\r\n        return;\r\n      }\r\n\r\n      switch (event.code) {\r\n        case 'Space':\r\n          event.preventDefault();\r\n          if (canStart) {\r\n            onStart();\r\n          } else if (canPause) {\r\n            onPause();\r\n          } else if (canResume) {\r\n            onResume();\r\n          }\r\n          break;\r\n        case 'Escape':\r\n          event.preventDefault();\r\n          if (canStop) {\r\n            onStop();\r\n          }\r\n          break;\r\n        case 'Enter':\r\n          event.preventDefault();\r\n          if (isRunning) {\r\n            onComplete();\r\n          }\r\n          break;\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyPress);\r\n    return () => window.removeEventListener('keydown', handleKeyPress);\r\n  }, [canStart, canPause, canResume, canStop, isRunning, onStart, onPause, onResume, onStop, onComplete]);\r\n\r\n  return (\r\n    <div className=\"flex items-center justify-center space-x-4\">\r\n      {/* Primary Action Button */}\r\n      {canStart && (\r\n        <button\r\n          onClick={onStart}\r\n          className={cn(\r\n            'flex items-center justify-center w-16 h-16 rounded-full',\r\n            'bg-green-500 hover:bg-green-600 text-white',\r\n            'shadow-lg hover:shadow-xl transform hover:scale-105',\r\n            'transition-all duration-200 focus:outline-none focus:ring-4 focus:ring-green-300',\r\n            'group'\r\n          )}\r\n          title=\"Start session (Space)\"\r\n        >\r\n          <Play className=\"w-8 h-8 ml-1 group-hover:scale-110 transition-transform\" />\r\n        </button>\r\n      )}\r\n\r\n      {canPause && (\r\n        <button\r\n          onClick={onPause}\r\n          className={cn(\r\n            'flex items-center justify-center w-16 h-16 rounded-full',\r\n            'bg-yellow-500 hover:bg-yellow-600 text-white',\r\n            'shadow-lg hover:shadow-xl transform hover:scale-105',\r\n            'transition-all duration-200 focus:outline-none focus:ring-4 focus:ring-yellow-300',\r\n            'group'\r\n          )}\r\n          title=\"Pause session (Space)\"\r\n        >\r\n          <Pause className=\"w-8 h-8 group-hover:scale-110 transition-transform\" />\r\n        </button>\r\n      )}\r\n\r\n      {canResume && (\r\n        <button\r\n          onClick={onResume}\r\n          className={cn(\r\n            'flex items-center justify-center w-16 h-16 rounded-full',\r\n            'bg-blue-500 hover:bg-blue-600 text-white',\r\n            'shadow-lg hover:shadow-xl transform hover:scale-105',\r\n            'transition-all duration-200 focus:outline-none focus:ring-4 focus:ring-blue-300',\r\n            'group'\r\n          )}\r\n          title=\"Resume session (Space)\"\r\n        >\r\n          <Play className=\"w-8 h-8 ml-1 group-hover:scale-110 transition-transform\" />\r\n        </button>\r\n      )}\r\n\r\n      {/* Secondary Action Buttons */}\r\n      {canStop && (\r\n        <button\r\n          onClick={onStop}\r\n          className={cn(\r\n            'flex items-center justify-center w-12 h-12 rounded-full',\r\n            'bg-red-500 hover:bg-red-600 text-white',\r\n            'shadow-md hover:shadow-lg transform hover:scale-105',\r\n            'transition-all duration-200 focus:outline-none focus:ring-4 focus:ring-red-300',\r\n            'group'\r\n          )}\r\n          title=\"Stop session (Esc)\"\r\n        >\r\n          <Square className=\"w-5 h-5 group-hover:scale-110 transition-transform\" />\r\n        </button>\r\n      )}\r\n\r\n      {isRunning && (\r\n        <button\r\n          onClick={onComplete}\r\n          className={cn(\r\n            'flex items-center justify-center w-12 h-12 rounded-full',\r\n            'bg-emerald-500 hover:bg-emerald-600 text-white',\r\n            'shadow-md hover:shadow-lg transform hover:scale-105',\r\n            'transition-all duration-200 focus:outline-none focus:ring-4 focus:ring-emerald-300',\r\n            'group'\r\n          )}\r\n          title=\"Complete session (Enter)\"\r\n        >\r\n          <CheckCircle className=\"w-5 h-5 group-hover:scale-110 transition-transform\" />\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};","import React, { useState } from 'react';\r\nimport { Brain, Zap, Coffee, Settings } from 'lucide-react';\r\nimport { Session } from '../../../../shared/types';\r\nimport { cn } from '../../utils/cn';\r\nimport { useTimer } from '../../hooks/useTimer';\r\n\r\ninterface SessionTypeSelectorProps {\r\n  currentType: Session['sessionType'];\r\n  onTypeChange: (type: Session['sessionType']) => void;\r\n}\r\n\r\ninterface SessionTypeOption {\r\n  type: Session['sessionType'];\r\n  name: string;\r\n  description: string;\r\n  icon: React.ReactNode;\r\n  color: string;\r\n  defaultDuration: number;\r\n}\r\n\r\nconst sessionTypes: SessionTypeOption[] = [\r\n  {\r\n    type: 'deep_work',\r\n    name: 'Deep Work',\r\n    description: 'Focused, uninterrupted work sessions',\r\n    icon: <Brain className=\"w-6 h-6\" />,\r\n    color: '#3B82F6',\r\n    defaultDuration: 50,\r\n  },\r\n  {\r\n    type: 'quick_task',\r\n    name: 'Quick Task',\r\n    description: 'Short, focused tasks and activities',\r\n    icon: <Zap className=\"w-6 h-6\" />,\r\n    color: '#10B981',\r\n    defaultDuration: 15,\r\n  },\r\n  {\r\n    type: 'break',\r\n    name: 'Break Time',\r\n    description: 'Rest and recharge between sessions',\r\n    icon: <Coffee className=\"w-6 h-6\" />,\r\n    color: '#F59E0B',\r\n    defaultDuration: 10,\r\n  },\r\n  {\r\n    type: 'custom',\r\n    name: 'Custom',\r\n    description: 'Customizable session with your duration',\r\n    icon: <Settings className=\"w-6 h-6\" />,\r\n    color: '#8B5CF6',\r\n    defaultDuration: 25,\r\n  },\r\n];\r\n\r\nexport const SessionTypeSelector: React.FC<SessionTypeSelectorProps> = ({\r\n  currentType,\r\n  onTypeChange,\r\n}) => {\r\n  const [showDurationSelector, setShowDurationSelector] = useState(false);\r\n  const [selectedType, setSelectedType] = useState<Session['sessionType']>(currentType);\r\n  const { getDurationOptions, updatePlannedDuration, plannedDuration } = useTimer();\r\n\r\n  const handleTypeSelect = (type: Session['sessionType']) => {\r\n    setSelectedType(type);\r\n    onTypeChange(type);\r\n    \r\n    // Show duration selector for custom type or if user wants to change duration\r\n    if (type === 'custom') {\r\n      setShowDurationSelector(true);\r\n    }\r\n  };\r\n\r\n  const handleDurationSelect = (duration: number) => {\r\n    updatePlannedDuration(duration);\r\n    setShowDurationSelector(false);\r\n  };\r\n\r\n  const currentTypeOption = sessionTypes.find(t => t.type === currentType);\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Session Type Grid */}\r\n      <div className=\"grid grid-cols-2 gap-4\">\r\n        {sessionTypes.map((option) => {\r\n          const isSelected = option.type === currentType;\r\n          \r\n          return (\r\n            <button\r\n              key={option.type}\r\n              onClick={() => handleTypeSelect(option.type)}\r\n              className={cn(\r\n                'p-4 rounded-xl border-2 transition-all duration-200',\r\n                'hover:shadow-lg transform hover:scale-105',\r\n                'focus:outline-none focus:ring-4 focus:ring-opacity-50',\r\n                {\r\n                  'border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800': !isSelected,\r\n                  'shadow-lg': isSelected,\r\n                }\r\n              )}\r\n              style={{\r\n                borderColor: isSelected ? option.color : undefined,\r\n                backgroundColor: isSelected ? `${option.color}10` : undefined,\r\n                focusRingColor: `${option.color}50`,\r\n              }}\r\n            >\r\n              <div className=\"flex items-center space-x-3 mb-2\">\r\n                <div\r\n                  className=\"p-2 rounded-lg\"\r\n                  style={{ backgroundColor: `${option.color}20`, color: option.color }}\r\n                >\r\n                  {option.icon}\r\n                </div>\r\n                <div className=\"text-left\">\r\n                  <h3 className=\"font-semibold text-gray-900 dark:text-gray-100\">\r\n                    {option.name}\r\n                  </h3>\r\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                    {option.defaultDuration} min\r\n                  </p>\r\n                </div>\r\n              </div>\r\n              <p className=\"text-sm text-gray-600 dark:text-gray-400 text-left\">\r\n                {option.description}\r\n              </p>\r\n            </button>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      {/* Duration Selector */}\r\n      {(showDurationSelector || currentType === 'custom') && (\r\n        <div className=\"bg-gray-50 dark:bg-gray-800 rounded-xl p-4\">\r\n          <h4 className=\"font-medium text-gray-900 dark:text-gray-100 mb-3\">\r\n            Select Duration\r\n          </h4>\r\n          <div className=\"grid grid-cols-4 gap-2\">\r\n            {getDurationOptions(selectedType).map((duration) => (\r\n              <button\r\n                key={duration}\r\n                onClick={() => handleDurationSelect(duration)}\r\n                className={cn(\r\n                  'px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200',\r\n                  'hover:shadow-md transform hover:scale-105',\r\n                  'focus:outline-none focus:ring-2 focus:ring-opacity-50',\r\n                  {\r\n                    'bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-300': duration !== plannedDuration,\r\n                    'text-white shadow-md': duration === plannedDuration,\r\n                  }\r\n                )}\r\n                style={{\r\n                  backgroundColor: duration === plannedDuration ? currentTypeOption?.color : undefined,\r\n                  focusRingColor: `${currentTypeOption?.color}50`,\r\n                }}\r\n              >\r\n                {duration}m\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Current Selection Summary */}\r\n      <div className=\"text-center\">\r\n        <div className=\"inline-flex items-center space-x-2 px-4 py-2 bg-gray-100 dark:bg-gray-800 rounded-full\">\r\n          <div\r\n            className=\"p-1 rounded-full\"\r\n            style={{ backgroundColor: currentTypeOption?.color }}\r\n          >\r\n            {currentTypeOption?.icon && (\r\n              <div className=\"text-white scale-75\">\r\n                {currentTypeOption.icon}\r\n              </div>\r\n            )}\r\n          </div>\r\n          <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n            {currentTypeOption?.name} • {plannedDuration} minutes\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport { AlertTriangle, Play, Square } from 'lucide-react';\r\nimport { cn } from '../../utils/cn';\r\n\r\ninterface SystemSleepDialogProps {\r\n  onResume: () => void;\r\n  onStop: () => void;\r\n}\r\n\r\nexport const SystemSleepDialog: React.FC<SystemSleepDialogProps> = ({\r\n  onResume,\r\n  onStop,\r\n}) => {\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\r\n      <div className=\"bg-white dark:bg-gray-800 rounded-2xl shadow-2xl max-w-md w-full p-6\">\r\n        {/* Header */}\r\n        <div className=\"flex items-center space-x-3 mb-4\">\r\n          <div className=\"p-2 bg-yellow-100 dark:bg-yellow-900 rounded-full\">\r\n            <AlertTriangle className=\"w-6 h-6 text-yellow-600 dark:text-yellow-400\" />\r\n          </div>\r\n          <div>\r\n            <h2 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\r\n              System Sleep Detected\r\n            </h2>\r\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n              Your timer has been paused\r\n            </p>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Message */}\r\n        <div className=\"mb-6\">\r\n          <p className=\"text-gray-700 dark:text-gray-300 leading-relaxed\">\r\n            It looks like your computer went to sleep or was inactive for a while. \r\n            Your timer has been automatically paused to ensure accurate time tracking.\r\n          </p>\r\n        </div>\r\n\r\n        {/* Actions */}\r\n        <div className=\"flex space-x-3\">\r\n          <button\r\n            onClick={onResume}\r\n            className={cn(\r\n              'flex-1 flex items-center justify-center space-x-2 px-4 py-3 rounded-xl',\r\n              'bg-blue-500 hover:bg-blue-600 text-white font-medium',\r\n              'shadow-lg hover:shadow-xl transform hover:scale-105',\r\n              'transition-all duration-200 focus:outline-none focus:ring-4 focus:ring-blue-300'\r\n            )}\r\n          >\r\n            <Play className=\"w-4 h-4\" />\r\n            <span>Resume Timer</span>\r\n          </button>\r\n          \r\n          <button\r\n            onClick={onStop}\r\n            className={cn(\r\n              'flex-1 flex items-center justify-center space-x-2 px-4 py-3 rounded-xl',\r\n              'bg-gray-500 hover:bg-gray-600 text-white font-medium',\r\n              'shadow-lg hover:shadow-xl transform hover:scale-105',\r\n              'transition-all duration-200 focus:outline-none focus:ring-4 focus:ring-gray-300'\r\n            )}\r\n          >\r\n            <Square className=\"w-4 h-4\" />\r\n            <span>Stop Session</span>\r\n          </button>\r\n        </div>\r\n\r\n        {/* Tip */}\r\n        <div className=\"mt-4 p-3 bg-blue-50 dark:bg-blue-900 rounded-lg\">\r\n          <p className=\"text-sm text-blue-700 dark:text-blue-300\">\r\n            <strong>Tip:</strong> To prevent interruptions, consider adjusting your computer's \r\n            sleep settings during focus sessions.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};","import React, { useState, useEffect } from 'react';\r\nimport { Search, Clock, Target, Plus } from 'lucide-react';\r\nimport { Task } from '../../../../shared/types';\r\nimport { useTaskStore } from '../../stores/taskStore';\r\nimport { useCategoryStore } from '../../stores/categoryStore';\r\nimport { cn } from '../../utils/cn';\r\n\r\ninterface TaskSelectorProps {\r\n  selectedTaskId?: number;\r\n  onTaskSelect: (task: Task | null) => void;\r\n  onCreateTask?: () => void;\r\n  className?: string;\r\n}\r\n\r\nexport const TaskSelector: React.FC<TaskSelectorProps> = ({\r\n  selectedTaskId,\r\n  onTaskSelect,\r\n  onCreateTask,\r\n  className,\r\n}) => {\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  \r\n  const { \r\n    tasks, \r\n    filteredTasks, \r\n    fetchTasks, \r\n    setFilters,\r\n    getTasksByStatus \r\n  } = useTaskStore();\r\n  \r\n  const { categories, fetchCategories } = useCategoryStore();\r\n\r\n  // Load tasks and categories on mount\r\n  useEffect(() => {\r\n    fetchTasks();\r\n    fetchCategories();\r\n  }, [fetchTasks, fetchCategories]);\r\n\r\n  // Filter tasks based on search query\r\n  useEffect(() => {\r\n    setFilters({ searchQuery: searchQuery || undefined });\r\n  }, [searchQuery, setFilters]);\r\n\r\n  // Get active tasks only\r\n  const activeTasks = getTasksByStatus('active');\r\n  const displayTasks = searchQuery ? filteredTasks.filter(t => t.status === 'active') : activeTasks;\r\n\r\n  // Get selected task details\r\n  const selectedTask = selectedTaskId ? tasks.find(t => t.id === selectedTaskId) : null;\r\n\r\n  // Get category for task\r\n  const getCategoryForTask = (task: Task) => {\r\n    return categories.find(c => c.id === task.categoryId);\r\n  };\r\n\r\n  // Format estimated duration\r\n  const formatDuration = (minutes?: number) => {\r\n    if (!minutes) return 'No estimate';\r\n    if (minutes < 60) return `${minutes}m`;\r\n    const hours = Math.floor(minutes / 60);\r\n    const mins = minutes % 60;\r\n    return mins > 0 ? `${hours}h ${mins}m` : `${hours}h`;\r\n  };\r\n\r\n  return (\r\n    <div className={cn('relative', className)}>\r\n      {/* Task Selection Button/Display */}\r\n      <button\r\n        onClick={() => setIsOpen(!isOpen)}\r\n        className={cn(\r\n          'w-full p-4 rounded-lg border-2 border-dashed transition-all duration-200',\r\n          'hover:border-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900/20',\r\n          selectedTask \r\n            ? 'border-blue-400 bg-blue-50 dark:bg-blue-900/20' \r\n            : 'border-gray-300 dark:border-gray-600 bg-gray-50 dark:bg-gray-800',\r\n          'focus:outline-none focus:ring-2 focus:ring-blue-500'\r\n        )}\r\n      >\r\n        {selectedTask ? (\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center space-x-3\">\r\n              <div \r\n                className=\"w-3 h-3 rounded-full\"\r\n                style={{ backgroundColor: getCategoryForTask(selectedTask)?.color || '#6B7280' }}\r\n              />\r\n              <div className=\"text-left\">\r\n                <p className=\"font-medium text-gray-900 dark:text-gray-100\">\r\n                  {selectedTask.title}\r\n                </p>\r\n                <p className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                  {getCategoryForTask(selectedTask)?.name} • {formatDuration(selectedTask.estimatedDuration)}\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <Target className=\"w-5 h-5 text-blue-500\" />\r\n          </div>\r\n        ) : (\r\n          <div className=\"flex items-center justify-center space-x-2 text-gray-500 dark:text-gray-400\">\r\n            <Target className=\"w-5 h-5\" />\r\n            <span>Select a task (optional)</span>\r\n          </div>\r\n        )}\r\n      </button>\r\n\r\n      {/* Task Selection Dropdown */}\r\n      {isOpen && (\r\n        <div className=\"absolute top-full left-0 right-0 mt-2 bg-white dark:bg-gray-800 rounded-lg shadow-xl border border-gray-200 dark:border-gray-700 z-50 max-h-96 overflow-hidden\">\r\n          {/* Search Input */}\r\n          <div className=\"p-3 border-b border-gray-200 dark:border-gray-700\">\r\n            <div className=\"relative\">\r\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Search tasks...\"\r\n                value={searchQuery}\r\n                onChange={(e) => setSearchQuery(e.target.value)}\r\n                className=\"w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                autoFocus\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* Task List */}\r\n          <div className=\"max-h-64 overflow-y-auto\">\r\n            {/* No Task Option */}\r\n            <button\r\n              onClick={() => {\r\n                onTaskSelect(null);\r\n                setIsOpen(false);\r\n              }}\r\n              className={cn(\r\n                'w-full p-3 text-left hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors',\r\n                !selectedTask && 'bg-blue-50 dark:bg-blue-900/20'\r\n              )}\r\n            >\r\n              <div className=\"flex items-center space-x-3\">\r\n                <div className=\"w-3 h-3 rounded-full bg-gray-400\" />\r\n                <div>\r\n                  <p className=\"font-medium text-gray-900 dark:text-gray-100\">\r\n                    No specific task\r\n                  </p>\r\n                  <p className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                    General focus session\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </button>\r\n\r\n            {/* Task Options */}\r\n            {displayTasks.map((task) => {\r\n              const category = getCategoryForTask(task);\r\n              const isSelected = selectedTask?.id === task.id;\r\n              \r\n              return (\r\n                <button\r\n                  key={task.id}\r\n                  onClick={() => {\r\n                    onTaskSelect(task);\r\n                    setIsOpen(false);\r\n                  }}\r\n                  className={cn(\r\n                    'w-full p-3 text-left hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors',\r\n                    isSelected && 'bg-blue-50 dark:bg-blue-900/20'\r\n                  )}\r\n                >\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div className=\"flex items-center space-x-3\">\r\n                      <div \r\n                        className=\"w-3 h-3 rounded-full\"\r\n                        style={{ backgroundColor: category?.color || '#6B7280' }}\r\n                      />\r\n                      <div>\r\n                        <p className=\"font-medium text-gray-900 dark:text-gray-100\">\r\n                          {task.title}\r\n                        </p>\r\n                        <p className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                          {category?.name} • {formatDuration(task.estimatedDuration)}\r\n                        </p>\r\n                        {task.description && (\r\n                          <p className=\"text-xs text-gray-400 dark:text-gray-500 mt-1 line-clamp-1\">\r\n                            {task.description}\r\n                          </p>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex items-center space-x-2 text-xs text-gray-500\">\r\n                      {task.estimatedDuration && (\r\n                        <div className=\"flex items-center space-x-1\">\r\n                          <Clock className=\"w-3 h-3\" />\r\n                          <span>{formatDuration(task.estimatedDuration)}</span>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </button>\r\n              );\r\n            })}\r\n\r\n            {/* No Tasks Found */}\r\n            {displayTasks.length === 0 && (\r\n              <div className=\"p-6 text-center text-gray-500 dark:text-gray-400\">\r\n                <Target className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\r\n                <p className=\"font-medium\">No active tasks found</p>\r\n                <p className=\"text-sm mt-1\">\r\n                  {searchQuery ? 'Try a different search term' : 'Create a task to get started'}\r\n                </p>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Create Task Button */}\r\n          {onCreateTask && (\r\n            <div className=\"p-3 border-t border-gray-200 dark:border-gray-700\">\r\n              <button\r\n                onClick={() => {\r\n                  onCreateTask();\r\n                  setIsOpen(false);\r\n                }}\r\n                className=\"w-full flex items-center justify-center space-x-2 p-2 text-blue-600 dark:text-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded-md transition-colors\"\r\n              >\r\n                <Plus className=\"w-4 h-4\" />\r\n                <span className=\"font-medium\">Create new task</span>\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* Backdrop to close dropdown */}\r\n      {isOpen && (\r\n        <div \r\n          className=\"fixed inset-0 z-40\" \r\n          onClick={() => setIsOpen(false)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};","import React, { useState } from 'react';\r\nimport { ArrowRightLeft, Clock, Target, ChevronDown } from 'lucide-react';\r\nimport { Task } from '../../../../shared/types';\r\nimport { useTaskStore } from '../../stores/taskStore';\r\nimport { useCategoryStore } from '../../stores/categoryStore';\r\nimport { cn } from '../../utils/cn';\r\n\r\ninterface TaskSwitcherProps {\r\n  currentTaskId?: number;\r\n  onTaskSwitch: (task: Task | null) => void;\r\n  sessionDuration: number; // minutes elapsed in current session\r\n  className?: string;\r\n}\r\n\r\nexport const TaskSwitcher: React.FC<TaskSwitcherProps> = ({\r\n  currentTaskId,\r\n  onTaskSwitch,\r\n  sessionDuration,\r\n  className,\r\n}) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  \r\n  const { tasks, getTasksByStatus } = useTaskStore();\r\n  const { categories } = useCategoryStore();\r\n\r\n  // Get active tasks excluding current task\r\n  const activeTasks = getTasksByStatus('active').filter(t => t.id !== currentTaskId);\r\n  const currentTask = currentTaskId ? tasks.find(t => t.id === currentTaskId) : null;\r\n\r\n  // Get category for task\r\n  const getCategoryForTask = (task: Task) => {\r\n    return categories.find(c => c.id === task.categoryId);\r\n  };\r\n\r\n  // Format duration\r\n  const formatDuration = (minutes: number) => {\r\n    if (minutes < 60) return `${minutes}m`;\r\n    const hours = Math.floor(minutes / 60);\r\n    const mins = minutes % 60;\r\n    return mins > 0 ? `${hours}h ${mins}m` : `${hours}h`;\r\n  };\r\n\r\n  // Handle task switch with confirmation\r\n  const handleTaskSwitch = (task: Task | null) => {\r\n    if (sessionDuration > 5) { // Only show confirmation if significant time has passed\r\n      const confirmMessage = task \r\n        ? `Switch to \"${task.title}\"? Current progress (${formatDuration(sessionDuration)}) will be saved.`\r\n        : `Switch to general focus? Current progress (${formatDuration(sessionDuration)}) will be saved.`;\r\n      \r\n      if (window.confirm(confirmMessage)) {\r\n        onTaskSwitch(task);\r\n        setIsOpen(false);\r\n      }\r\n    } else {\r\n      onTaskSwitch(task);\r\n      setIsOpen(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={cn('relative', className)}>\r\n      {/* Current Task Display with Switch Button */}\r\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-4\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div className=\"flex items-center space-x-3\">\r\n            <div className=\"flex items-center space-x-2\">\r\n              <Target className=\"w-4 h-4 text-blue-500\" />\r\n              <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n                Current Task:\r\n              </span>\r\n            </div>\r\n            \r\n            {currentTask ? (\r\n              <div className=\"flex items-center space-x-2\">\r\n                <div \r\n                  className=\"w-3 h-3 rounded-full\"\r\n                  style={{ backgroundColor: getCategoryForTask(currentTask)?.color || '#6B7280' }}\r\n                />\r\n                <span className=\"font-medium text-gray-900 dark:text-gray-100\">\r\n                  {currentTask.title}\r\n                </span>\r\n                <span className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                  ({getCategoryForTask(currentTask)?.name})\r\n                </span>\r\n              </div>\r\n            ) : (\r\n              <span className=\"text-gray-500 dark:text-gray-400 italic\">\r\n                General focus session\r\n              </span>\r\n            )}\r\n          </div>\r\n\r\n          {/* Switch Button */}\r\n          <button\r\n            onClick={() => setIsOpen(!isOpen)}\r\n            className={cn(\r\n              'flex items-center space-x-2 px-3 py-2 rounded-md transition-colors',\r\n              'hover:bg-gray-100 dark:hover:bg-gray-700',\r\n              'focus:outline-none focus:ring-2 focus:ring-blue-500',\r\n              isOpen && 'bg-gray-100 dark:bg-gray-700'\r\n            )}\r\n            title=\"Switch task\"\r\n          >\r\n            <ArrowRightLeft className=\"w-4 h-4 text-gray-600 dark:text-gray-400\" />\r\n            <span className=\"text-sm text-gray-600 dark:text-gray-400\">Switch</span>\r\n            <ChevronDown className={cn(\r\n              'w-4 h-4 text-gray-600 dark:text-gray-400 transition-transform',\r\n              isOpen && 'rotate-180'\r\n            )} />\r\n          </button>\r\n        </div>\r\n\r\n        {/* Session Progress Info */}\r\n        <div className=\"mt-3 flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400\">\r\n          <div className=\"flex items-center space-x-1\">\r\n            <Clock className=\"w-3 h-3\" />\r\n            <span>Session time: {formatDuration(sessionDuration)}</span>\r\n          </div>\r\n          {currentTask?.estimatedDuration && (\r\n            <div className=\"flex items-center space-x-1\">\r\n              <Target className=\"w-3 h-3\" />\r\n              <span>\r\n                Estimated: {formatDuration(currentTask.estimatedDuration)}\r\n                {sessionDuration > 0 && (\r\n                  <span className={cn(\r\n                    'ml-1',\r\n                    sessionDuration > currentTask.estimatedDuration \r\n                      ? 'text-orange-500' \r\n                      : 'text-green-500'\r\n                  )}>\r\n                    ({sessionDuration > currentTask.estimatedDuration ? '+' : ''}\r\n                    {sessionDuration - currentTask.estimatedDuration}m)\r\n                  </span>\r\n                )}\r\n              </span>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Task Switch Dropdown */}\r\n      {isOpen && (\r\n        <div className=\"absolute top-full left-0 right-0 mt-2 bg-white dark:bg-gray-800 rounded-lg shadow-xl border border-gray-200 dark:border-gray-700 z-50 max-h-64 overflow-hidden\">\r\n          <div className=\"p-3 border-b border-gray-200 dark:border-gray-700\">\r\n            <h3 className=\"font-medium text-gray-900 dark:text-gray-100\">\r\n              Switch to different task\r\n            </h3>\r\n            <p className=\"text-sm text-gray-500 dark:text-gray-400 mt-1\">\r\n              Current progress will be saved automatically\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"max-h-48 overflow-y-auto\">\r\n            {/* No Task Option */}\r\n            {currentTaskId && (\r\n              <button\r\n                onClick={() => handleTaskSwitch(null)}\r\n                className=\"w-full p-3 text-left hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors\"\r\n              >\r\n                <div className=\"flex items-center space-x-3\">\r\n                  <div className=\"w-3 h-3 rounded-full bg-gray-400\" />\r\n                  <div>\r\n                    <p className=\"font-medium text-gray-900 dark:text-gray-100\">\r\n                      General focus session\r\n                    </p>\r\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                      No specific task\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </button>\r\n            )}\r\n\r\n            {/* Available Tasks */}\r\n            {activeTasks.map((task) => {\r\n              const category = getCategoryForTask(task);\r\n              \r\n              return (\r\n                <button\r\n                  key={task.id}\r\n                  onClick={() => handleTaskSwitch(task)}\r\n                  className=\"w-full p-3 text-left hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors\"\r\n                >\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div className=\"flex items-center space-x-3\">\r\n                      <div \r\n                        className=\"w-3 h-3 rounded-full\"\r\n                        style={{ backgroundColor: category?.color || '#6B7280' }}\r\n                      />\r\n                      <div>\r\n                        <p className=\"font-medium text-gray-900 dark:text-gray-100\">\r\n                          {task.title}\r\n                        </p>\r\n                        <p className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                          {category?.name}\r\n                          {task.estimatedDuration && ` • ${formatDuration(task.estimatedDuration)}`}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                    <ArrowRightLeft className=\"w-4 h-4 text-gray-400\" />\r\n                  </div>\r\n                </button>\r\n              );\r\n            })}\r\n\r\n            {/* No Tasks Available */}\r\n            {activeTasks.length === 0 && !currentTaskId && (\r\n              <div className=\"p-6 text-center text-gray-500 dark:text-gray-400\">\r\n                <Target className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\r\n                <p className=\"font-medium\">No other tasks available</p>\r\n                <p className=\"text-sm mt-1\">\r\n                  Create more tasks to switch between them\r\n                </p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Backdrop to close dropdown */}\r\n      {isOpen && (\r\n        <div \r\n          className=\"fixed inset-0 z-40\" \r\n          onClick={() => setIsOpen(false)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};","import React, { useState, useEffect } from 'react';\r\nimport { Sparkles, Sun, Moon, Coffee, Zap, Heart } from 'lucide-react';\r\n\r\ninterface TransitionAnimationProps {\r\n  type: 'session_start' | 'session_end' | 'break_start' | 'break_end' | 'task_complete';\r\n  isVisible: boolean;\r\n  onComplete: () => void;\r\n  duration?: number; // milliseconds\r\n  message?: string;\r\n}\r\n\r\n/**\r\n * Transition animations component for mindful session transitions\r\n * Provides calming visual cues between different states\r\n */\r\nconst TransitionAnimations: React.FC<TransitionAnimationProps> = ({\r\n  type,\r\n  isVisible,\r\n  onComplete,\r\n  duration = 3000,\r\n  message,\r\n}) => {\r\n  const [animationPhase, setAnimationPhase] = useState<'enter' | 'display' | 'exit'>('enter');\r\n  const [progress, setProgress] = useState(0);\r\n\r\n  // Animation configuration based on type\r\n  const getAnimationConfig = () => {\r\n    switch (type) {\r\n      case 'session_start':\r\n        return {\r\n          icon: Sun,\r\n          color: 'from-yellow-400 to-orange-500',\r\n          bgColor: 'from-yellow-50 to-orange-50',\r\n          title: 'Focus Session Starting',\r\n          defaultMessage: 'Take a deep breath and prepare to focus',\r\n          particles: '✨',\r\n          animation: 'sunrise',\r\n        };\r\n      case 'session_end':\r\n        return {\r\n          icon: Sparkles,\r\n          color: 'from-green-400 to-blue-500',\r\n          bgColor: 'from-green-50 to-blue-50',\r\n          title: 'Session Complete',\r\n          defaultMessage: 'Well done! Take a moment to appreciate your progress',\r\n          particles: '🌟',\r\n          animation: 'celebration',\r\n        };\r\n      case 'break_start':\r\n        return {\r\n          icon: Coffee,\r\n          color: 'from-purple-400 to-pink-500',\r\n          bgColor: 'from-purple-50 to-pink-50',\r\n          title: 'Break Time',\r\n          defaultMessage: 'Relax and recharge your energy',\r\n          particles: '☕',\r\n          animation: 'gentle-wave',\r\n        };\r\n      case 'break_end':\r\n        return {\r\n          icon: Zap,\r\n          color: 'from-blue-400 to-cyan-500',\r\n          bgColor: 'from-blue-50 to-cyan-50',\r\n          title: 'Break Complete',\r\n          defaultMessage: 'Ready to return to focused work',\r\n          particles: '⚡',\r\n          animation: 'energy-pulse',\r\n        };\r\n      case 'task_complete':\r\n        return {\r\n          icon: Heart,\r\n          color: 'from-red-400 to-pink-500',\r\n          bgColor: 'from-red-50 to-pink-50',\r\n          title: 'Task Completed',\r\n          defaultMessage: 'Excellent work! Your dedication is paying off',\r\n          particles: '💖',\r\n          animation: 'heart-pulse',\r\n        };\r\n      default:\r\n        return {\r\n          icon: Moon,\r\n          color: 'from-indigo-400 to-purple-500',\r\n          bgColor: 'from-indigo-50 to-purple-50',\r\n          title: 'Transition',\r\n          defaultMessage: 'Taking a mindful moment',\r\n          particles: '🌙',\r\n          animation: 'gentle-fade',\r\n        };\r\n    }\r\n  };\r\n\r\n  const config = getAnimationConfig();\r\n  const Icon = config.icon;\r\n\r\n  // Animation lifecycle\r\n  useEffect(() => {\r\n    if (!isVisible) return;\r\n\r\n    const enterDuration = 800;\r\n    const displayDuration = duration - 1600; // Total minus enter and exit\r\n    const exitDuration = 800;\r\n\r\n    // Enter phase\r\n    setAnimationPhase('enter');\r\n    \r\n    const enterTimer = setTimeout(() => {\r\n      setAnimationPhase('display');\r\n      \r\n      // Display phase with progress\r\n      const displayTimer = setTimeout(() => {\r\n        setAnimationPhase('exit');\r\n        \r\n        // Exit phase\r\n        const exitTimer = setTimeout(() => {\r\n          onComplete();\r\n        }, exitDuration);\r\n\r\n        return () => clearTimeout(exitTimer);\r\n      }, displayDuration);\r\n\r\n      return () => clearTimeout(displayTimer);\r\n    }, enterDuration);\r\n\r\n    return () => clearTimeout(enterTimer);\r\n  }, [isVisible, duration, onComplete]);\r\n\r\n  // Progress tracking during display phase\r\n  useEffect(() => {\r\n    if (animationPhase !== 'display') return;\r\n\r\n    const displayDuration = duration - 1600;\r\n    const interval = setInterval(() => {\r\n      setProgress(prev => {\r\n        const newProgress = prev + (100 / (displayDuration / 100));\r\n        return Math.min(newProgress, 100);\r\n      });\r\n    }, 100);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [animationPhase, duration]);\r\n\r\n  // Generate floating particles\r\n  const generateParticles = () => {\r\n    return Array.from({ length: 12 }, (_, i) => (\r\n      <div\r\n        key={i}\r\n        className={`absolute text-2xl opacity-60 animate-float-${i % 4}`}\r\n        style={{\r\n          left: `${10 + (i * 7)}%`,\r\n          top: `${20 + (i % 3) * 20}%`,\r\n          animationDelay: `${i * 0.2}s`,\r\n          animationDuration: `${3 + (i % 2)}s`,\r\n        }}\r\n      >\r\n        {config.particles}\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  // Get animation classes based on phase and type\r\n  const getAnimationClasses = () => {\r\n    const baseClasses = 'transition-all duration-800 ease-in-out';\r\n    \r\n    switch (animationPhase) {\r\n      case 'enter':\r\n        return `${baseClasses} opacity-0 scale-95 translate-y-4`;\r\n      case 'display':\r\n        return `${baseClasses} opacity-100 scale-100 translate-y-0`;\r\n      case 'exit':\r\n        return `${baseClasses} opacity-0 scale-105 translate-y-2`;\r\n      default:\r\n        return baseClasses;\r\n    }\r\n  };\r\n\r\n  // Get icon animation classes\r\n  const getIconAnimationClasses = () => {\r\n    switch (config.animation) {\r\n      case 'sunrise':\r\n        return 'animate-spin-slow';\r\n      case 'celebration':\r\n        return 'animate-bounce';\r\n      case 'gentle-wave':\r\n        return 'animate-pulse';\r\n      case 'energy-pulse':\r\n        return 'animate-ping';\r\n      case 'heart-pulse':\r\n        return 'animate-pulse';\r\n      default:\r\n        return 'animate-pulse';\r\n    }\r\n  };\r\n\r\n  if (!isVisible) return null;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50\">\r\n      <div className={`relative ${getAnimationClasses()}`}>\r\n        {/* Background with gradient */}\r\n        <div className={`absolute inset-0 bg-gradient-to-br ${config.bgColor} rounded-3xl blur-xl scale-110`} />\r\n        \r\n        {/* Main content */}\r\n        <div className={`relative bg-white bg-opacity-90 backdrop-blur-sm rounded-3xl p-12 max-w-md w-full mx-4 shadow-2xl border border-white border-opacity-50`}>\r\n          {/* Floating particles */}\r\n          <div className=\"absolute inset-0 overflow-hidden rounded-3xl\">\r\n            {generateParticles()}\r\n          </div>\r\n          \r\n          {/* Icon */}\r\n          <div className=\"text-center mb-6\">\r\n            <div className={`inline-flex items-center justify-center w-20 h-20 rounded-full bg-gradient-to-br ${config.color} text-white mb-4 ${getIconAnimationClasses()}`}>\r\n              <Icon className=\"w-10 h-10\" />\r\n            </div>\r\n            \r\n            {/* Title */}\r\n            <h2 className=\"text-2xl font-bold text-gray-800 mb-2\">\r\n              {config.title}\r\n            </h2>\r\n            \r\n            {/* Message */}\r\n            <p className=\"text-gray-600 text-center leading-relaxed\">\r\n              {message || config.defaultMessage}\r\n            </p>\r\n          </div>\r\n          \r\n          {/* Progress indicator during display phase */}\r\n          {animationPhase === 'display' && (\r\n            <div className=\"mt-6\">\r\n              <div className=\"w-full bg-gray-200 bg-opacity-50 rounded-full h-1\">\r\n                <div\r\n                  className={`h-1 rounded-full bg-gradient-to-r ${config.color} transition-all duration-100 ease-out`}\r\n                  style={{ width: `${progress}%` }}\r\n                />\r\n              </div>\r\n            </div>\r\n          )}\r\n          \r\n          {/* Breathing indicator for longer transitions */}\r\n          {duration > 5000 && animationPhase === 'display' && (\r\n            <div className=\"mt-6 text-center\">\r\n              <div className=\"inline-flex items-center space-x-2 text-sm text-gray-500\">\r\n                <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-pulse\" />\r\n                <span>Take slow, deep breaths</span>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n        \r\n        {/* Ambient glow effect */}\r\n        <div className={`absolute inset-0 bg-gradient-to-br ${config.color} opacity-10 rounded-3xl animate-pulse`} />\r\n      </div>\r\n      \r\n      {/* Custom CSS for floating animations */}\r\n      <style jsx>{`\r\n        @keyframes float-0 {\r\n          0%, 100% { transform: translateY(0px) rotate(0deg); }\r\n          50% { transform: translateY(-20px) rotate(180deg); }\r\n        }\r\n        @keyframes float-1 {\r\n          0%, 100% { transform: translateY(0px) rotate(0deg); }\r\n          50% { transform: translateY(-15px) rotate(-180deg); }\r\n        }\r\n        @keyframes float-2 {\r\n          0%, 100% { transform: translateY(0px) rotate(0deg); }\r\n          50% { transform: translateY(-25px) rotate(90deg); }\r\n        }\r\n        @keyframes float-3 {\r\n          0%, 100% { transform: translateY(0px) rotate(0deg); }\r\n          50% { transform: translateY(-18px) rotate(-90deg); }\r\n        }\r\n        .animate-float-0 { animation: float-0 3s ease-in-out infinite; }\r\n        .animate-float-1 { animation: float-1 3.5s ease-in-out infinite; }\r\n        .animate-float-2 { animation: float-2 4s ease-in-out infinite; }\r\n        .animate-float-3 { animation: float-3 3.2s ease-in-out infinite; }\r\n        .animate-spin-slow { animation: spin 4s linear infinite; }\r\n      `}</style>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransitionAnimations;","import React, { useState, useEffect } from 'react';\r\nimport { Heart, Flower, Sparkles, X, Play, Pause, RotateCcw } from 'lucide-react';\r\n\r\ninterface MindfulnessExercise {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  duration: number; // seconds\r\n  type: 'breathing' | 'reflection' | 'gratitude' | 'body_scan';\r\n  icon: React.ReactNode;\r\n  color: string;\r\n  instructions: string[];\r\n}\r\n\r\ninterface MindfulnessPromptProps {\r\n  isVisible: boolean;\r\n  onClose: () => void;\r\n  onComplete: (exerciseId: string, duration: number) => void;\r\n  triggerType: 'session_end' | 'session_start' | 'break_start' | 'manual';\r\n}\r\n\r\n/**\r\n * Mindfulness prompt component for mindful transitions between sessions\r\n * Provides guided exercises to help users transition mindfully\r\n */\r\nconst MindfulnessPrompt: React.FC<MindfulnessPromptProps> = ({\r\n  isVisible,\r\n  onClose,\r\n  onComplete,\r\n  triggerType,\r\n}) => {\r\n  const [selectedExercise, setSelectedExercise] = useState<MindfulnessExercise | null>(null);\r\n  const [isExerciseActive, setIsExerciseActive] = useState(false);\r\n  const [exerciseTime, setExerciseTime] = useState(0);\r\n  const [currentStep, setCurrentStep] = useState(0);\r\n\r\n  // Available mindfulness exercises\r\n  const exercises: MindfulnessExercise[] = [\r\n    {\r\n      id: 'box_breathing',\r\n      name: '4-7-8 Breathing',\r\n      description: 'Calming breath work to center yourself',\r\n      duration: 120, // 2 minutes\r\n      type: 'breathing',\r\n      icon: <Heart className=\"w-5 h-5\" />,\r\n      color: 'bg-blue-500',\r\n      instructions: [\r\n        'Sit comfortably with your back straight',\r\n        'Inhale quietly through your nose for 4 counts',\r\n        'Hold your breath for 7 counts',\r\n        'Exhale completely through your mouth for 8 counts',\r\n        'Repeat this cycle 4 times',\r\n      ],\r\n    },\r\n    {\r\n      id: 'gratitude_moment',\r\n      name: 'Gratitude Reflection',\r\n      description: 'Take a moment to appreciate what went well',\r\n      duration: 90, // 1.5 minutes\r\n      type: 'gratitude',\r\n      icon: <Sparkles className=\"w-5 h-5\" />,\r\n      color: 'bg-yellow-500',\r\n      instructions: [\r\n        'Close your eyes and take three deep breaths',\r\n        'Think of one thing that went well in your last session',\r\n        'Feel genuine appreciation for this accomplishment',\r\n        'Think of one person you\\'re grateful for today',\r\n        'Hold this feeling of gratitude for a moment',\r\n      ],\r\n    },\r\n    {\r\n      id: 'body_scan',\r\n      name: 'Quick Body Scan',\r\n      description: 'Release tension and reset your body',\r\n      duration: 180, // 3 minutes\r\n      type: 'body_scan',\r\n      icon: <Flower className=\"w-5 h-5\" />,\r\n      color: 'bg-green-500',\r\n      instructions: [\r\n        'Sit or stand comfortably',\r\n        'Start by noticing your feet and legs',\r\n        'Move your attention to your torso and arms',\r\n        'Notice any tension in your shoulders and neck',\r\n        'Relax your face and jaw',\r\n        'Take three deep breaths to finish',\r\n      ],\r\n    },\r\n    {\r\n      id: 'intention_setting',\r\n      name: 'Set Your Intention',\r\n      description: 'Clarify your focus for the next session',\r\n      duration: 60, // 1 minute\r\n      type: 'reflection',\r\n      icon: <Heart className=\"w-5 h-5\" />,\r\n      color: 'bg-purple-500',\r\n      instructions: [\r\n        'Take a moment to center yourself',\r\n        'Think about what you want to accomplish next',\r\n        'Set a clear, positive intention',\r\n        'Visualize yourself succeeding',\r\n        'Carry this intention into your next session',\r\n      ],\r\n    },\r\n  ];\r\n\r\n  // Filter exercises based on trigger type\r\n  const getRelevantExercises = () => {\r\n    switch (triggerType) {\r\n      case 'session_end':\r\n        return exercises.filter(e => e.type === 'gratitude' || e.type === 'body_scan');\r\n      case 'session_start':\r\n        return exercises.filter(e => e.type === 'breathing' || e.type === 'reflection');\r\n      case 'break_start':\r\n        return exercises.filter(e => e.type === 'body_scan' || e.type === 'breathing');\r\n      default:\r\n        return exercises;\r\n    }\r\n  };\r\n\r\n  // Exercise timer effect\r\n  useEffect(() => {\r\n    let interval: NodeJS.Timeout;\r\n    \r\n    if (isExerciseActive && selectedExercise) {\r\n      interval = setInterval(() => {\r\n        setExerciseTime(prev => {\r\n          if (prev >= selectedExercise.duration) {\r\n            setIsExerciseActive(false);\r\n            onComplete(selectedExercise.id, selectedExercise.duration);\r\n            return prev;\r\n          }\r\n          return prev + 1;\r\n        });\r\n      }, 1000);\r\n    }\r\n    \r\n    return () => {\r\n      if (interval) clearInterval(interval);\r\n    };\r\n  }, [isExerciseActive, selectedExercise, onComplete]);\r\n\r\n  // Auto-advance steps for guided exercises\r\n  useEffect(() => {\r\n    if (!isExerciseActive || !selectedExercise) return;\r\n    \r\n    const stepDuration = selectedExercise.duration / selectedExercise.instructions.length;\r\n    const targetStep = Math.floor(exerciseTime / stepDuration);\r\n    \r\n    if (targetStep !== currentStep && targetStep < selectedExercise.instructions.length) {\r\n      setCurrentStep(targetStep);\r\n    }\r\n  }, [exerciseTime, selectedExercise, currentStep, isExerciseActive]);\r\n\r\n  // Start exercise\r\n  const startExercise = (exercise: MindfulnessExercise) => {\r\n    setSelectedExercise(exercise);\r\n    setIsExerciseActive(true);\r\n    setExerciseTime(0);\r\n    setCurrentStep(0);\r\n  };\r\n\r\n  // Pause/resume exercise\r\n  const toggleExercise = () => {\r\n    setIsExerciseActive(!isExerciseActive);\r\n  };\r\n\r\n  // Reset exercise\r\n  const resetExercise = () => {\r\n    setIsExerciseActive(false);\r\n    setExerciseTime(0);\r\n    setCurrentStep(0);\r\n  };\r\n\r\n  // Complete exercise early\r\n  const completeExercise = () => {\r\n    if (selectedExercise) {\r\n      setIsExerciseActive(false);\r\n      onComplete(selectedExercise.id, exerciseTime);\r\n    }\r\n  };\r\n\r\n  // Format time display\r\n  const formatTime = (seconds: number) => {\r\n    const mins = Math.floor(seconds / 60);\r\n    const secs = seconds % 60;\r\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\r\n  };\r\n\r\n  // Get prompt title based on trigger\r\n  const getPromptTitle = () => {\r\n    switch (triggerType) {\r\n      case 'session_end':\r\n        return 'Session Complete - Take a Mindful Moment';\r\n      case 'session_start':\r\n        return 'Prepare Mindfully for Your Session';\r\n      case 'break_start':\r\n        return 'Mindful Break Time';\r\n      default:\r\n        return 'Mindfulness Moment';\r\n    }\r\n  };\r\n\r\n  if (!isVisible) return null;\r\n\r\n  const relevantExercises = getRelevantExercises();\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\r\n      <div className=\"bg-white rounded-2xl shadow-2xl max-w-md w-full max-h-[90vh] overflow-hidden\">\r\n        {!selectedExercise ? (\r\n          // Exercise selection screen\r\n          <>\r\n            <div className=\"bg-gradient-to-r from-purple-500 to-pink-500 text-white p-6\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <h2 className=\"text-xl font-semibold\">{getPromptTitle()}</h2>\r\n                  <p className=\"text-purple-100 text-sm mt-1\">\r\n                    Choose a mindful transition exercise\r\n                  </p>\r\n                </div>\r\n                <button\r\n                  onClick={onClose}\r\n                  className=\"text-white hover:text-gray-200 transition-colors\"\r\n                  aria-label=\"Close mindfulness prompt\"\r\n                >\r\n                  <X className=\"w-5 h-5\" />\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"p-6\">\r\n              <div className=\"space-y-3\">\r\n                {relevantExercises.map((exercise) => (\r\n                  <button\r\n                    key={exercise.id}\r\n                    onClick={() => startExercise(exercise)}\r\n                    className=\"w-full p-4 rounded-lg border-2 border-gray-200 hover:border-gray-300 hover:bg-gray-50 transition-all text-left group\"\r\n                  >\r\n                    <div className=\"flex items-start space-x-3\">\r\n                      <div className={`p-2 rounded-lg ${exercise.color} text-white group-hover:scale-110 transition-transform`}>\r\n                        {exercise.icon}\r\n                      </div>\r\n                      <div className=\"flex-1\">\r\n                        <h3 className=\"font-medium text-gray-900 mb-1\">\r\n                          {exercise.name}\r\n                        </h3>\r\n                        <p className=\"text-sm text-gray-600 mb-2\">\r\n                          {exercise.description}\r\n                        </p>\r\n                        <div className=\"flex items-center space-x-4 text-xs text-gray-500\">\r\n                          <span>{formatTime(exercise.duration)}</span>\r\n                          <span className=\"capitalize\">{exercise.type.replace('_', ' ')}</span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </button>\r\n                ))}\r\n              </div>\r\n\r\n              <div className=\"mt-6 pt-4 border-t border-gray-200\">\r\n                <button\r\n                  onClick={onClose}\r\n                  className=\"w-full py-2 text-gray-600 hover:text-gray-800 transition-colors text-sm\"\r\n                >\r\n                  Skip mindfulness moment\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          // Exercise execution screen\r\n          <>\r\n            <div className={`${selectedExercise.color} text-white p-6`}>\r\n              <div className=\"flex items-center justify-between\">\r\n                <div className=\"flex items-center space-x-3\">\r\n                  <div className=\"p-2 bg-white bg-opacity-20 rounded-lg\">\r\n                    {selectedExercise.icon}\r\n                  </div>\r\n                  <div>\r\n                    <h2 className=\"text-xl font-semibold\">{selectedExercise.name}</h2>\r\n                    <p className=\"text-white text-opacity-80 text-sm\">\r\n                      {formatTime(exerciseTime)} / {formatTime(selectedExercise.duration)}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                <button\r\n                  onClick={() => setSelectedExercise(null)}\r\n                  className=\"text-white hover:text-gray-200 transition-colors\"\r\n                  aria-label=\"Back to exercise selection\"\r\n                >\r\n                  <X className=\"w-5 h-5\" />\r\n                </button>\r\n              </div>\r\n\r\n              {/* Progress bar */}\r\n              <div className=\"mt-4\">\r\n                <div className=\"w-full bg-white bg-opacity-20 rounded-full h-2\">\r\n                  <div\r\n                    className=\"bg-white h-2 rounded-full transition-all duration-1000\"\r\n                    style={{ width: `${(exerciseTime / selectedExercise.duration) * 100}%` }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"p-6 flex-1 overflow-y-auto\">\r\n              {/* Current instruction */}\r\n              <div className=\"text-center mb-6\">\r\n                <div className=\"text-sm text-gray-500 mb-2\">\r\n                  Step {currentStep + 1} of {selectedExercise.instructions.length}\r\n                </div>\r\n                <p className=\"text-lg text-gray-900 leading-relaxed\">\r\n                  {selectedExercise.instructions[currentStep]}\r\n                </p>\r\n              </div>\r\n\r\n              {/* All instructions list */}\r\n              <div className=\"space-y-2 mb-6\">\r\n                {selectedExercise.instructions.map((instruction, index) => (\r\n                  <div\r\n                    key={index}\r\n                    className={`p-3 rounded-lg text-sm transition-all ${\r\n                      index === currentStep\r\n                        ? `${selectedExercise.color} bg-opacity-10 border border-current border-opacity-20`\r\n                        : index < currentStep\r\n                        ? 'bg-green-50 text-green-700 border border-green-200'\r\n                        : 'bg-gray-50 text-gray-600'\r\n                    }`}\r\n                  >\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <div className={`w-2 h-2 rounded-full ${\r\n                        index === currentStep\r\n                          ? 'bg-current animate-pulse'\r\n                          : index < currentStep\r\n                          ? 'bg-green-500'\r\n                          : 'bg-gray-300'\r\n                      }`} />\r\n                      <span>{instruction}</span>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Exercise controls */}\r\n            <div className=\"p-6 border-t border-gray-200 bg-gray-50\">\r\n              <div className=\"flex items-center justify-center space-x-4\">\r\n                <button\r\n                  onClick={resetExercise}\r\n                  className=\"p-2 text-gray-600 hover:text-gray-800 hover:bg-gray-200 rounded-lg transition-colors\"\r\n                  title=\"Reset exercise\"\r\n                >\r\n                  <RotateCcw className=\"w-5 h-5\" />\r\n                </button>\r\n                \r\n                <button\r\n                  onClick={toggleExercise}\r\n                  className={`px-6 py-3 rounded-lg font-medium transition-all flex items-center space-x-2 ${\r\n                    isExerciseActive\r\n                      ? 'bg-yellow-500 text-white hover:bg-yellow-600'\r\n                      : 'bg-green-500 text-white hover:bg-green-600'\r\n                  }`}\r\n                >\r\n                  {isExerciseActive ? (\r\n                    <>\r\n                      <Pause className=\"w-4 h-4\" />\r\n                      <span>Pause</span>\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <Play className=\"w-4 h-4\" />\r\n                      <span>Continue</span>\r\n                    </>\r\n                  )}\r\n                </button>\r\n                \r\n                <button\r\n                  onClick={completeExercise}\r\n                  className=\"px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors\"\r\n                >\r\n                  Complete\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MindfulnessPrompt;","import React, { useState } from 'react';\r\nimport { Star, Heart, MessageSquare, TrendingUp, Clock, Target, X, CheckCircle } from 'lucide-react';\r\nimport { Session, Task } from '../../../../shared/types';\r\n\r\ninterface SessionReflectionProps {\r\n  isVisible: boolean;\r\n  onClose: () => void;\r\n  onSubmit: (reflection: SessionReflectionData) => void;\r\n  session: Session;\r\n  task?: Task;\r\n  sessionDuration: number; // minutes\r\n}\r\n\r\ninterface SessionReflectionData {\r\n  qualityRating: number; // 1-5\r\n  focusRating: number; // 1-5\r\n  energyLevel: number; // 1-5\r\n  accomplishments: string;\r\n  challenges: string;\r\n  improvements: string;\r\n  gratitude: string;\r\n  nextSessionGoal: string;\r\n  mood: 'energized' | 'calm' | 'tired' | 'frustrated' | 'satisfied' | 'motivated';\r\n  tags: string[];\r\n}\r\n\r\n/**\r\n * Session reflection component for mindful session endings\r\n * Helps users reflect on their productivity and set intentions\r\n */\r\nconst SessionReflection: React.FC<SessionReflectionProps> = ({\r\n  isVisible,\r\n  onClose,\r\n  onSubmit,\r\n  session,\r\n  task,\r\n  sessionDuration,\r\n}) => {\r\n  const [currentStep, setCurrentStep] = useState(0);\r\n  const [reflection, setReflection] = useState<SessionReflectionData>({\r\n    qualityRating: 0,\r\n    focusRating: 0,\r\n    energyLevel: 0,\r\n    accomplishments: '',\r\n    challenges: '',\r\n    improvements: '',\r\n    gratitude: '',\r\n    nextSessionGoal: '',\r\n    mood: 'satisfied',\r\n    tags: [],\r\n  });\r\n\r\n  const moods = [\r\n    { id: 'energized', name: 'Energized', icon: '⚡', color: 'bg-yellow-100 text-yellow-800' },\r\n    { id: 'calm', name: 'Calm', icon: '🧘', color: 'bg-blue-100 text-blue-800' },\r\n    { id: 'satisfied', name: 'Satisfied', icon: '😊', color: 'bg-green-100 text-green-800' },\r\n    { id: 'motivated', name: 'Motivated', icon: '🚀', color: 'bg-purple-100 text-purple-800' },\r\n    { id: 'tired', name: 'Tired', icon: '😴', color: 'bg-gray-100 text-gray-800' },\r\n    { id: 'frustrated', name: 'Frustrated', icon: '😤', color: 'bg-red-100 text-red-800' },\r\n  ];\r\n\r\n  const commonTags = [\r\n    'Deep Work', 'Flow State', 'Distracted', 'Productive', 'Creative',\r\n    'Problem Solving', 'Learning', 'Planning', 'Research', 'Writing',\r\n    'Coding', 'Design', 'Meeting', 'Email', 'Admin'\r\n  ];\r\n\r\n  const reflectionSteps = [\r\n    {\r\n      title: 'Rate Your Session',\r\n      description: 'How did this session go overall?',\r\n      component: 'ratings',\r\n    },\r\n    {\r\n      title: 'Reflect on Progress',\r\n      description: 'What did you accomplish and learn?',\r\n      component: 'accomplishments',\r\n    },\r\n    {\r\n      title: 'Identify Challenges',\r\n      description: 'What obstacles did you face?',\r\n      component: 'challenges',\r\n    },\r\n    {\r\n      title: 'Express Gratitude',\r\n      description: 'What are you grateful for right now?',\r\n      component: 'gratitude',\r\n    },\r\n    {\r\n      title: 'Set Next Intention',\r\n      description: 'What will you focus on next?',\r\n      component: 'intention',\r\n    },\r\n  ];\r\n\r\n  // Update reflection data\r\n  const updateReflection = (key: keyof SessionReflectionData, value: any) => {\r\n    setReflection(prev => ({ ...prev, [key]: value }));\r\n  };\r\n\r\n  // Handle tag toggle\r\n  const toggleTag = (tag: string) => {\r\n    setReflection(prev => ({\r\n      ...prev,\r\n      tags: prev.tags.includes(tag)\r\n        ? prev.tags.filter(t => t !== tag)\r\n        : [...prev.tags, tag],\r\n    }));\r\n  };\r\n\r\n  // Navigate steps\r\n  const nextStep = () => {\r\n    if (currentStep < reflectionSteps.length - 1) {\r\n      setCurrentStep(prev => prev + 1);\r\n    } else {\r\n      handleSubmit();\r\n    }\r\n  };\r\n\r\n  const prevStep = () => {\r\n    if (currentStep > 0) {\r\n      setCurrentStep(prev => prev - 1);\r\n    }\r\n  };\r\n\r\n  // Submit reflection\r\n  const handleSubmit = () => {\r\n    onSubmit(reflection);\r\n  };\r\n\r\n  // Render rating component\r\n  const renderRating = (\r\n    label: string,\r\n    value: number,\r\n    onChange: (rating: number) => void,\r\n    icon: React.ReactNode,\r\n    color: string\r\n  ) => (\r\n    <div className=\"mb-6\">\r\n      <div className=\"flex items-center space-x-2 mb-3\">\r\n        <div className={`p-2 rounded-lg ${color}`}>\r\n          {icon}\r\n        </div>\r\n        <label className=\"font-medium text-gray-900\">{label}</label>\r\n      </div>\r\n      <div className=\"flex items-center space-x-2\">\r\n        {[1, 2, 3, 4, 5].map((rating) => (\r\n          <button\r\n            key={rating}\r\n            onClick={() => onChange(rating)}\r\n            className={`w-10 h-10 rounded-full border-2 transition-all ${\r\n              value >= rating\r\n                ? 'border-blue-600 bg-blue-600 text-white'\r\n                : 'border-gray-300 text-gray-600 hover:border-blue-400'\r\n            }`}\r\n          >\r\n            {rating}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\r\n        <span>Poor</span>\r\n        <span>Excellent</span>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  // Render current step\r\n  const renderCurrentStep = () => {\r\n    const step = reflectionSteps[currentStep];\r\n    \r\n    switch (step.component) {\r\n      case 'ratings':\r\n        return (\r\n          <div className=\"space-y-6\">\r\n            {renderRating(\r\n              'Session Quality',\r\n              reflection.qualityRating,\r\n              (rating) => updateReflection('qualityRating', rating),\r\n              <Star className=\"w-4 h-4\" />,\r\n              'bg-yellow-100 text-yellow-600'\r\n            )}\r\n            \r\n            {renderRating(\r\n              'Focus Level',\r\n              reflection.focusRating,\r\n              (rating) => updateReflection('focusRating', rating),\r\n              <Target className=\"w-4 h-4\" />,\r\n              'bg-blue-100 text-blue-600'\r\n            )}\r\n            \r\n            {renderRating(\r\n              'Energy Level',\r\n              reflection.energyLevel,\r\n              (rating) => updateReflection('energyLevel', rating),\r\n              <TrendingUp className=\"w-4 h-4\" />,\r\n              'bg-green-100 text-green-600'\r\n            )}\r\n            \r\n            {/* Mood selection */}\r\n            <div className=\"mb-6\">\r\n              <label className=\"block font-medium text-gray-900 mb-3\">How are you feeling?</label>\r\n              <div className=\"grid grid-cols-3 gap-2\">\r\n                {moods.map((mood) => (\r\n                  <button\r\n                    key={mood.id}\r\n                    onClick={() => updateReflection('mood', mood.id)}\r\n                    className={`p-3 rounded-lg border-2 transition-all text-center ${\r\n                      reflection.mood === mood.id\r\n                        ? 'border-blue-500 bg-blue-50'\r\n                        : 'border-gray-200 hover:border-gray-300'\r\n                    }`}\r\n                  >\r\n                    <div className=\"text-2xl mb-1\">{mood.icon}</div>\r\n                    <div className=\"text-xs font-medium\">{mood.name}</div>\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n        \r\n      case 'accomplishments':\r\n        return (\r\n          <div className=\"space-y-4\">\r\n            <div>\r\n              <label className=\"block font-medium text-gray-900 mb-2\">\r\n                What did you accomplish in this session?\r\n              </label>\r\n              <textarea\r\n                value={reflection.accomplishments}\r\n                onChange={(e) => updateReflection('accomplishments', e.target.value)}\r\n                placeholder=\"Describe what you completed, learned, or made progress on...\"\r\n                className=\"w-full p-3 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                rows={4}\r\n              />\r\n            </div>\r\n            \r\n            {/* Session tags */}\r\n            <div>\r\n              <label className=\"block font-medium text-gray-900 mb-2\">\r\n                Tag this session (optional)\r\n              </label>\r\n              <div className=\"flex flex-wrap gap-2\">\r\n                {commonTags.map((tag) => (\r\n                  <button\r\n                    key={tag}\r\n                    onClick={() => toggleTag(tag)}\r\n                    className={`px-3 py-1 rounded-full text-sm transition-all ${\r\n                      reflection.tags.includes(tag)\r\n                        ? 'bg-blue-100 text-blue-800 border border-blue-300'\r\n                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\r\n                    }`}\r\n                  >\r\n                    {tag}\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n        \r\n      case 'challenges':\r\n        return (\r\n          <div className=\"space-y-4\">\r\n            <div>\r\n              <label className=\"block font-medium text-gray-900 mb-2\">\r\n                What challenges did you face?\r\n              </label>\r\n              <textarea\r\n                value={reflection.challenges}\r\n                onChange={(e) => updateReflection('challenges', e.target.value)}\r\n                placeholder=\"Describe any obstacles, distractions, or difficulties...\"\r\n                className=\"w-full p-3 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                rows={3}\r\n              />\r\n            </div>\r\n            \r\n            <div>\r\n              <label className=\"block font-medium text-gray-900 mb-2\">\r\n                How could you improve next time?\r\n              </label>\r\n              <textarea\r\n                value={reflection.improvements}\r\n                onChange={(e) => updateReflection('improvements', e.target.value)}\r\n                placeholder=\"What strategies or changes might help you be more effective?\"\r\n                className=\"w-full p-3 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                rows={3}\r\n              />\r\n            </div>\r\n          </div>\r\n        );\r\n        \r\n      case 'gratitude':\r\n        return (\r\n          <div>\r\n            <label className=\"block font-medium text-gray-900 mb-2\">\r\n              What are you grateful for right now?\r\n            </label>\r\n            <textarea\r\n              value={reflection.gratitude}\r\n              onChange={(e) => updateReflection('gratitude', e.target.value)}\r\n              placeholder=\"Take a moment to appreciate something positive from this session or your day...\"\r\n              className=\"w-full p-3 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n              rows={4}\r\n            />\r\n            <p className=\"text-sm text-gray-500 mt-2\">\r\n              Gratitude helps reinforce positive experiences and build resilience.\r\n            </p>\r\n          </div>\r\n        );\r\n        \r\n      case 'intention':\r\n        return (\r\n          <div>\r\n            <label className=\"block font-medium text-gray-900 mb-2\">\r\n              What will you focus on in your next session?\r\n            </label>\r\n            <textarea\r\n              value={reflection.nextSessionGoal}\r\n              onChange={(e) => updateReflection('nextSessionGoal', e.target.value)}\r\n              placeholder=\"Set a clear intention for your next work session...\"\r\n              className=\"w-full p-3 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n              rows={3}\r\n            />\r\n            <p className=\"text-sm text-gray-500 mt-2\">\r\n              Setting intentions helps maintain momentum and clarity.\r\n            </p>\r\n          </div>\r\n        );\r\n        \r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  if (!isVisible) return null;\r\n\r\n  const currentStepData = reflectionSteps[currentStep];\r\n  const isLastStep = currentStep === reflectionSteps.length - 1;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\r\n      <div className=\"bg-white rounded-2xl shadow-2xl max-w-lg w-full max-h-[90vh] overflow-hidden\">\r\n        {/* Header */}\r\n        <div className=\"bg-gradient-to-r from-indigo-500 to-purple-600 text-white p-6\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <h2 className=\"text-xl font-semibold\">Session Reflection</h2>\r\n              <p className=\"text-indigo-100 text-sm mt-1\">\r\n                {task ? `Task: ${task.title}` : `${session.sessionType} session`} • {sessionDuration} min\r\n              </p>\r\n            </div>\r\n            <button\r\n              onClick={onClose}\r\n              className=\"text-white hover:text-gray-200 transition-colors\"\r\n              aria-label=\"Close reflection\"\r\n            >\r\n              <X className=\"w-5 h-5\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Progress indicator */}\r\n        <div className=\"px-6 py-3 bg-gray-50 border-b\">\r\n          <div className=\"flex items-center justify-between text-sm text-gray-600 mb-2\">\r\n            <span>{currentStepData.title}</span>\r\n            <span>Step {currentStep + 1} of {reflectionSteps.length}</span>\r\n          </div>\r\n          <div className=\"w-full bg-gray-200 rounded-full h-2\">\r\n            <div\r\n              className=\"bg-indigo-600 h-2 rounded-full transition-all duration-300\"\r\n              style={{ width: `${((currentStep + 1) / reflectionSteps.length) * 100}%` }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* Content */}\r\n        <div className=\"p-6 flex-1 overflow-y-auto\">\r\n          <div className=\"mb-4\">\r\n            <p className=\"text-gray-600 text-sm\">{currentStepData.description}</p>\r\n          </div>\r\n          \r\n          {renderCurrentStep()}\r\n        </div>\r\n\r\n        {/* Footer */}\r\n        <div className=\"px-6 py-4 bg-gray-50 border-t\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <button\r\n              onClick={prevStep}\r\n              disabled={currentStep === 0}\r\n              className=\"px-4 py-2 text-gray-600 hover:text-gray-800 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n            >\r\n              Previous\r\n            </button>\r\n            \r\n            <button\r\n              onClick={nextStep}\r\n              className=\"px-6 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors flex items-center space-x-2\"\r\n            >\r\n              {isLastStep ? (\r\n                <>\r\n                  <CheckCircle className=\"w-4 h-4\" />\r\n                  <span>Complete Reflection</span>\r\n                </>\r\n              ) : (\r\n                <span>Next</span>\r\n              )}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SessionReflection;","import React, { useState } from 'react';\r\nimport { CheckCircle, Clock, Target, Star, MessageSquare, X } from 'lucide-react';\r\nimport { Task, Session } from '../../../../shared/types';\r\nimport { useTaskStore } from '../../stores/taskStore';\r\nimport { useCategoryStore } from '../../stores/categoryStore';\r\nimport { useMindfulnessStore } from '../../stores/mindfulnessStore';\r\nimport TransitionAnimations from '../Mindfulness/TransitionAnimations';\r\nimport MindfulnessPrompt from '../Mindfulness/MindfulnessPrompt';\r\nimport SessionReflection from '../Mindfulness/SessionReflection';\r\nimport { cn } from '../../utils/cn';\r\n\r\ninterface TaskCompletionDialogProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  task: Task | null;\r\n  session: Session;\r\n  onTaskComplete: (taskId: number) => Promise<void>;\r\n  onSessionComplete: (qualityRating?: number, notes?: string) => Promise<void>;\r\n}\r\n\r\nexport const TaskCompletionDialog: React.FC<TaskCompletionDialogProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  task,\r\n  session,\r\n  onTaskComplete,\r\n  onSessionComplete,\r\n}) => {\r\n  const [qualityRating, setQualityRating] = useState<number>(4);\r\n  const [notes, setNotes] = useState('');\r\n  const [markTaskComplete, setMarkTaskComplete] = useState(false);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [showMindfulTransition, setShowMindfulTransition] = useState(true);\r\n  const [currentTransitionStep, setCurrentTransitionStep] = useState<'animation' | 'prompt' | 'reflection' | 'completion'>('animation');\r\n\r\n  const { categories } = useCategoryStore();\r\n  const { \r\n    mindfulnessEnabled,\r\n    transitionAnimationsEnabled,\r\n    breathingExerciseEnabled,\r\n    sessionReflectionEnabled,\r\n    recordMindfulnessSession \r\n  } = useMindfulnessStore();\r\n\r\n  if (!isOpen) return null;\r\n\r\n  // Get category for task\r\n  const category = task ? categories.find(c => c.id === task.categoryId) : null;\r\n\r\n  // Format duration\r\n  const formatDuration = (minutes: number) => {\r\n    if (minutes < 60) return `${minutes}m`;\r\n    const hours = Math.floor(minutes / 60);\r\n    const mins = minutes % 60;\r\n    return mins > 0 ? `${hours}h ${mins}m` : `${hours}h`;\r\n  };\r\n\r\n  // Calculate session duration\r\n  const sessionDuration = session.actualDuration || 0;\r\n\r\n  // Calculate progress vs estimate\r\n  const getProgressInfo = () => {\r\n    if (!task?.estimatedDuration) return null;\r\n    \r\n    const totalActualTime = (task.actualDuration || 0) + sessionDuration;\r\n    const estimatedTime = task.estimatedDuration;\r\n    const progressPercentage = Math.round((totalActualTime / estimatedTime) * 100);\r\n    const timeVariance = totalActualTime - estimatedTime;\r\n    \r\n    return {\r\n      totalActualTime,\r\n      estimatedTime,\r\n      progressPercentage,\r\n      timeVariance,\r\n      isOverEstimate: timeVariance > 0,\r\n      isComplete: progressPercentage >= 100,\r\n    };\r\n  };\r\n\r\n  const progressInfo = getProgressInfo();\r\n\r\n  // Handle mindful transition steps\r\n  const handleTransitionNext = () => {\r\n    if (currentTransitionStep === 'animation') {\r\n      setCurrentTransitionStep('prompt');\r\n    } else if (currentTransitionStep === 'prompt') {\r\n      setCurrentTransitionStep('reflection');\r\n    } else if (currentTransitionStep === 'reflection') {\r\n      setCurrentTransitionStep('completion');\r\n      setShowMindfulTransition(false);\r\n    }\r\n  };\r\n\r\n  const handleSkipTransition = () => {\r\n    setShowMindfulTransition(false);\r\n    setCurrentTransitionStep('completion');\r\n  };\r\n\r\n  // Handle form submission\r\n  const handleSubmit = async () => {\r\n    setIsSubmitting(true);\r\n    \r\n    try {\r\n      // Complete the session first\r\n      await onSessionComplete(qualityRating, notes || undefined);\r\n      \r\n      // Mark task as complete if requested\r\n      if (markTaskComplete && task) {\r\n        await onTaskComplete(task.id);\r\n      }\r\n      \r\n      // Record mindful transition if it was used\r\n      if (mindfulnessEnabled && !showMindfulTransition) {\r\n        recordMindfulnessSession('session_completion', 30); // 30 seconds average\r\n      }\r\n      \r\n      onClose();\r\n    } catch (error) {\r\n      console.error('Failed to complete session/task:', error);\r\n      // TODO: Show error toast\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  // Show mindful transition if enabled and not skipped\r\n  if (isOpen && mindfulnessEnabled && showMindfulTransition) {\r\n    return (\r\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\r\n        <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-2xl max-w-lg w-full max-h-[90vh] overflow-y-auto\">\r\n          {currentTransitionStep === 'animation' && (\r\n            <TransitionAnimations\r\n              onComplete={handleTransitionNext}\r\n              onSkip={handleSkipTransition}\r\n            />\r\n          )}\r\n          \r\n          {currentTransitionStep === 'prompt' && breathingExerciseEnabled && (\r\n            <MindfulnessPrompt\r\n              onComplete={handleTransitionNext}\r\n              onSkip={handleSkipTransition}\r\n            />\r\n          )}\r\n          \r\n          {currentTransitionStep === 'reflection' && sessionReflectionEnabled && (\r\n            <SessionReflection\r\n              session={session}\r\n              task={task}\r\n              onComplete={handleTransitionNext}\r\n              onSkip={handleSkipTransition}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\r\n      <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-2xl max-w-md w-full max-h-[90vh] overflow-y-auto\">\r\n        {/* Header */}\r\n        <div className=\"p-6 border-b border-gray-200 dark:border-gray-700\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center space-x-3\">\r\n              <div className=\"w-10 h-10 bg-green-100 dark:bg-green-900/30 rounded-full flex items-center justify-center\">\r\n                <CheckCircle className=\"w-5 h-5 text-green-600 dark:text-green-400\" />\r\n              </div>\r\n              <div>\r\n                <h2 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\r\n                  Session Complete!\r\n                </h2>\r\n                <p className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                  {formatDuration(sessionDuration)} of focused work\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <button\r\n              onClick={onClose}\r\n              className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\"\r\n            >\r\n              <X className=\"w-5 h-5\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Task Information */}\r\n        {task && (\r\n          <div className=\"p-6 border-b border-gray-200 dark:border-gray-700\">\r\n            <div className=\"flex items-start space-x-3\">\r\n              <div \r\n                className=\"w-4 h-4 rounded-full mt-0.5\"\r\n                style={{ backgroundColor: category?.color || '#6B7280' }}\r\n              />\r\n              <div className=\"flex-1\">\r\n                <h3 className=\"font-medium text-gray-900 dark:text-gray-100\">\r\n                  {task.title}\r\n                </h3>\r\n                <p className=\"text-sm text-gray-500 dark:text-gray-400 mt-1\">\r\n                  {category?.name}\r\n                </p>\r\n                \r\n                {/* Progress Information */}\r\n                {progressInfo && (\r\n                  <div className=\"mt-3 space-y-2\">\r\n                    <div className=\"flex items-center justify-between text-sm\">\r\n                      <span className=\"text-gray-600 dark:text-gray-400\">Progress:</span>\r\n                      <span className={cn(\r\n                        'font-medium',\r\n                        progressInfo.isComplete \r\n                          ? 'text-green-600 dark:text-green-400'\r\n                          : 'text-blue-600 dark:text-blue-400'\r\n                      )}>\r\n                        {progressInfo.progressPercentage}%\r\n                      </span>\r\n                    </div>\r\n                    \r\n                    <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\r\n                      <div \r\n                        className={cn(\r\n                          'h-2 rounded-full transition-all duration-300',\r\n                          progressInfo.isComplete \r\n                            ? 'bg-green-500' \r\n                            : 'bg-blue-500'\r\n                        )}\r\n                        style={{ width: `${Math.min(progressInfo.progressPercentage, 100)}%` }}\r\n                      />\r\n                    </div>\r\n                    \r\n                    <div className=\"flex items-center justify-between text-xs text-gray-500 dark:text-gray-400\">\r\n                      <div className=\"flex items-center space-x-1\">\r\n                        <Clock className=\"w-3 h-3\" />\r\n                        <span>Total: {formatDuration(progressInfo.totalActualTime)}</span>\r\n                      </div>\r\n                      <div className=\"flex items-center space-x-1\">\r\n                        <Target className=\"w-3 h-3\" />\r\n                        <span>Est: {formatDuration(progressInfo.estimatedTime)}</span>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {progressInfo.timeVariance !== 0 && (\r\n                      <p className={cn(\r\n                        'text-xs text-center',\r\n                        progressInfo.isOverEstimate \r\n                          ? 'text-orange-600 dark:text-orange-400'\r\n                          : 'text-green-600 dark:text-green-400'\r\n                      )}>\r\n                        {progressInfo.isOverEstimate ? '+' : '-'}\r\n                        {formatDuration(Math.abs(progressInfo.timeVariance))} \r\n                        {progressInfo.isOverEstimate ? ' over estimate' : ' under estimate'}\r\n                      </p>\r\n                    )}\r\n                  </div>\r\n                )}\r\n\r\n                {/* Task Completion Option */}\r\n                <div className=\"mt-4\">\r\n                  <label className=\"flex items-center space-x-2 cursor-pointer\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={markTaskComplete}\r\n                      onChange={(e) => setMarkTaskComplete(e.target.checked)}\r\n                      className=\"w-4 h-4 text-green-600 border-gray-300 rounded focus:ring-green-500\"\r\n                    />\r\n                    <span className=\"text-sm text-gray-700 dark:text-gray-300\">\r\n                      Mark this task as complete\r\n                    </span>\r\n                  </label>\r\n                  {markTaskComplete && (\r\n                    <p className=\"text-xs text-green-600 dark:text-green-400 mt-1 ml-6\">\r\n                      Task will be moved to completed status\r\n                    </p>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Session Quality Rating */}\r\n        <div className=\"p-6 border-b border-gray-200 dark:border-gray-700\">\r\n          <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\r\n            How was your focus quality?\r\n          </label>\r\n          <div className=\"flex items-center space-x-2\">\r\n            {[1, 2, 3, 4, 5].map((rating) => (\r\n              <button\r\n                key={rating}\r\n                onClick={() => setQualityRating(rating)}\r\n                className={cn(\r\n                  'w-8 h-8 rounded-full flex items-center justify-center transition-colors',\r\n                  rating <= qualityRating\r\n                    ? 'text-yellow-400 hover:text-yellow-500'\r\n                    : 'text-gray-300 dark:text-gray-600 hover:text-gray-400'\r\n                )}\r\n              >\r\n                <Star className={cn(\r\n                  'w-5 h-5',\r\n                  rating <= qualityRating && 'fill-current'\r\n                )} />\r\n              </button>\r\n            ))}\r\n            <span className=\"ml-2 text-sm text-gray-600 dark:text-gray-400\">\r\n              {qualityRating === 1 && 'Poor'}\r\n              {qualityRating === 2 && 'Fair'}\r\n              {qualityRating === 3 && 'Good'}\r\n              {qualityRating === 4 && 'Great'}\r\n              {qualityRating === 5 && 'Excellent'}\r\n            </span>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Session Notes */}\r\n        <div className=\"p-6 border-b border-gray-200 dark:border-gray-700\">\r\n          <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n            Session notes (optional)\r\n          </label>\r\n          <div className=\"relative\">\r\n            <MessageSquare className=\"absolute left-3 top-3 w-4 h-4 text-gray-400\" />\r\n            <textarea\r\n              value={notes}\r\n              onChange={(e) => setNotes(e.target.value)}\r\n              placeholder=\"What did you accomplish? Any insights or challenges?\"\r\n              rows={3}\r\n              className=\"w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* Actions */}\r\n        <div className=\"p-6 flex items-center justify-end space-x-3\">\r\n          <button\r\n            onClick={onClose}\r\n            disabled={isSubmitting}\r\n            className=\"px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-md transition-colors disabled:opacity-50\"\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button\r\n            onClick={handleSubmit}\r\n            disabled={isSubmitting}\r\n            className=\"px-6 py-2 bg-green-600 hover:bg-green-700 text-white rounded-md transition-colors disabled:opacity-50 flex items-center space-x-2\"\r\n          >\r\n            {isSubmitting ? (\r\n              <>\r\n                <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\r\n                <span>Saving...</span>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <CheckCircle className=\"w-4 h-4\" />\r\n                <span>Complete Session</span>\r\n              </>\r\n            )}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};","import React, { useState, useEffect } from 'react';\r\nimport { Eye, EyeOff, Maximize, Minimize, Volume2, VolumeX, Shield } from 'lucide-react';\r\nimport { useTimerStore } from '../../stores/timerStore';\r\n\r\ninterface FocusModeState {\r\n  isEnabled: boolean;\r\n  isFullscreen: boolean;\r\n  notificationsSuppressed: boolean;\r\n  ambientSoundEnabled: boolean;\r\n  websiteBlockingEnabled: boolean;\r\n  currentAmbientSound: string | null;\r\n}\r\n\r\n/**\r\n * Focus mode toggle component that provides distraction-free environment\r\n * Includes fullscreen mode, notification suppression, and ambient sounds\r\n */\r\nconst FocusModeToggle: React.FC = () => {\r\n  const { isRunning, currentSession } = useTimerStore();\r\n  const [focusMode, setFocusMode] = useState<FocusModeState>({\r\n    isEnabled: false,\r\n    isFullscreen: false,\r\n    notificationsSuppressed: false,\r\n    ambientSoundEnabled: false,\r\n    websiteBlockingEnabled: false,\r\n    currentAmbientSound: null,\r\n  });\r\n  \r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n\r\n  // Available ambient sounds\r\n  const ambientSounds = [\r\n    { id: 'rain', name: 'Rain', icon: '🌧️' },\r\n    { id: 'forest', name: 'Forest', icon: '🌲' },\r\n    { id: 'ocean', name: 'Ocean Waves', icon: '🌊' },\r\n    { id: 'cafe', name: 'Coffee Shop', icon: '☕' },\r\n    { id: 'white_noise', name: 'White Noise', icon: '📻' },\r\n    { id: 'brown_noise', name: 'Brown Noise', icon: '🎵' },\r\n  ];\r\n\r\n  // Auto-enable focus mode when session starts\r\n  useEffect(() => {\r\n    if (isRunning && currentSession && !focusMode.isEnabled) {\r\n      handleToggleFocusMode();\r\n    }\r\n  }, [isRunning, currentSession]);\r\n\r\n  // Handle fullscreen changes\r\n  useEffect(() => {\r\n    const handleFullscreenChange = () => {\r\n      const isFullscreen = !!document.fullscreenElement;\r\n      setFocusMode(prev => ({ ...prev, isFullscreen }));\r\n    };\r\n\r\n    document.addEventListener('fullscreenchange', handleFullscreenChange);\r\n    return () => document.removeEventListener('fullscreenchange', handleFullscreenChange);\r\n  }, []);\r\n\r\n  // Toggle focus mode\r\n  const handleToggleFocusMode = () => {\r\n    const newEnabled = !focusMode.isEnabled;\r\n    \r\n    setFocusMode(prev => ({\r\n      ...prev,\r\n      isEnabled: newEnabled,\r\n      notificationsSuppressed: newEnabled,\r\n    }));\r\n\r\n    // Apply focus mode styles to body\r\n    if (newEnabled) {\r\n      document.body.classList.add('focus-mode');\r\n      // Request notification permission if not granted\r\n      if ('Notification' in window && Notification.permission === 'default') {\r\n        Notification.requestPermission();\r\n      }\r\n    } else {\r\n      document.body.classList.remove('focus-mode');\r\n      // Exit fullscreen if active\r\n      if (document.fullscreenElement) {\r\n        document.exitFullscreen();\r\n      }\r\n      // Stop ambient sound\r\n      if (focusMode.currentAmbientSound) {\r\n        stopAmbientSound();\r\n      }\r\n    }\r\n  };\r\n\r\n  // Toggle fullscreen mode\r\n  const handleToggleFullscreen = async () => {\r\n    try {\r\n      if (!document.fullscreenElement) {\r\n        await document.documentElement.requestFullscreen();\r\n      } else {\r\n        await document.exitFullscreen();\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to toggle fullscreen:', error);\r\n    }\r\n  };\r\n\r\n  // Toggle notification suppression\r\n  const handleToggleNotifications = () => {\r\n    setFocusMode(prev => ({\r\n      ...prev,\r\n      notificationsSuppressed: !prev.notificationsSuppressed,\r\n    }));\r\n  };\r\n\r\n  // Toggle ambient sound\r\n  const handleToggleAmbientSound = (soundId?: string) => {\r\n    if (focusMode.ambientSoundEnabled && focusMode.currentAmbientSound === soundId) {\r\n      // Stop current sound\r\n      stopAmbientSound();\r\n    } else {\r\n      // Start new sound\r\n      startAmbientSound(soundId || 'rain');\r\n    }\r\n  };\r\n\r\n  // Start ambient sound\r\n  const startAmbientSound = (soundId: string) => {\r\n    // In a real implementation, this would play actual audio files\r\n    console.log(`Starting ambient sound: ${soundId}`);\r\n    \r\n    setFocusMode(prev => ({\r\n      ...prev,\r\n      ambientSoundEnabled: true,\r\n      currentAmbientSound: soundId,\r\n    }));\r\n\r\n    // Show notification that ambient sound started\r\n    if ('Notification' in window && Notification.permission === 'granted') {\r\n      const sound = ambientSounds.find(s => s.id === soundId);\r\n      new Notification('Focus Mode', {\r\n        body: `${sound?.name} ambient sound started`,\r\n        icon: '/favicon.ico',\r\n        silent: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Stop ambient sound\r\n  const stopAmbientSound = () => {\r\n    console.log('Stopping ambient sound');\r\n    \r\n    setFocusMode(prev => ({\r\n      ...prev,\r\n      ambientSoundEnabled: false,\r\n      currentAmbientSound: null,\r\n    }));\r\n  };\r\n\r\n  // Toggle website blocking\r\n  const handleToggleWebsiteBlocking = () => {\r\n    const newBlocking = !focusMode.websiteBlockingEnabled;\r\n    \r\n    setFocusMode(prev => ({\r\n      ...prev,\r\n      websiteBlockingEnabled: newBlocking,\r\n    }));\r\n\r\n    // In a real implementation, this would integrate with browser extensions\r\n    // or system-level blocking tools\r\n    if (newBlocking) {\r\n      console.log('Website blocking enabled');\r\n      if ('Notification' in window && Notification.permission === 'granted') {\r\n        new Notification('Focus Mode', {\r\n          body: 'Distracting websites are now blocked',\r\n          icon: '/favicon.ico',\r\n          silent: true,\r\n        });\r\n      }\r\n    } else {\r\n      console.log('Website blocking disabled');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"relative\">\r\n      {/* Main focus mode toggle */}\r\n      <div className=\"flex items-center space-x-2\">\r\n        <button\r\n          onClick={handleToggleFocusMode}\r\n          className={`flex items-center space-x-2 px-4 py-2 rounded-lg font-medium transition-all ${\r\n            focusMode.isEnabled\r\n              ? 'bg-purple-600 text-white shadow-lg'\r\n              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\r\n          }`}\r\n          title={focusMode.isEnabled ? 'Exit focus mode' : 'Enter focus mode'}\r\n        >\r\n          {focusMode.isEnabled ? (\r\n            <EyeOff className=\"w-4 h-4\" />\r\n          ) : (\r\n            <Eye className=\"w-4 h-4\" />\r\n          )}\r\n          <span>Focus Mode</span>\r\n        </button>\r\n\r\n        {/* Expand options button */}\r\n        {focusMode.isEnabled && (\r\n          <button\r\n            onClick={() => setIsExpanded(!isExpanded)}\r\n            className=\"p-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded-lg transition-colors\"\r\n            title=\"Focus mode options\"\r\n          >\r\n            <Shield className=\"w-4 h-4\" />\r\n          </button>\r\n        )}\r\n      </div>\r\n\r\n      {/* Focus mode options panel */}\r\n      {focusMode.isEnabled && isExpanded && (\r\n        <div className=\"absolute top-full right-0 mt-2 bg-white border border-gray-200 rounded-lg shadow-lg p-4 min-w-[300px] z-50\">\r\n          <h3 className=\"font-semibold text-gray-900 mb-3\">Focus Mode Options</h3>\r\n          \r\n          <div className=\"space-y-3\">\r\n            {/* Fullscreen toggle */}\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center space-x-2\">\r\n                {focusMode.isFullscreen ? (\r\n                  <Minimize className=\"w-4 h-4 text-blue-600\" />\r\n                ) : (\r\n                  <Maximize className=\"w-4 h-4 text-gray-600\" />\r\n                )}\r\n                <span className=\"text-sm text-gray-700\">Fullscreen</span>\r\n              </div>\r\n              <button\r\n                onClick={handleToggleFullscreen}\r\n                className={`px-3 py-1 rounded text-xs font-medium transition-colors ${\r\n                  focusMode.isFullscreen\r\n                    ? 'bg-blue-100 text-blue-700'\r\n                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\r\n                }`}\r\n              >\r\n                {focusMode.isFullscreen ? 'Exit' : 'Enable'}\r\n              </button>\r\n            </div>\r\n\r\n            {/* Notification suppression */}\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center space-x-2\">\r\n                <VolumeX className=\"w-4 h-4 text-red-600\" />\r\n                <span className=\"text-sm text-gray-700\">Block notifications</span>\r\n              </div>\r\n              <button\r\n                onClick={handleToggleNotifications}\r\n                className={`px-3 py-1 rounded text-xs font-medium transition-colors ${\r\n                  focusMode.notificationsSuppressed\r\n                    ? 'bg-red-100 text-red-700'\r\n                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\r\n                }`}\r\n              >\r\n                {focusMode.notificationsSuppressed ? 'Blocked' : 'Allow'}\r\n              </button>\r\n            </div>\r\n\r\n            {/* Website blocking */}\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center space-x-2\">\r\n                <Shield className=\"w-4 h-4 text-orange-600\" />\r\n                <span className=\"text-sm text-gray-700\">Block websites</span>\r\n              </div>\r\n              <button\r\n                onClick={handleToggleWebsiteBlocking}\r\n                className={`px-3 py-1 rounded text-xs font-medium transition-colors ${\r\n                  focusMode.websiteBlockingEnabled\r\n                    ? 'bg-orange-100 text-orange-700'\r\n                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\r\n                }`}\r\n              >\r\n                {focusMode.websiteBlockingEnabled ? 'Blocked' : 'Allow'}\r\n              </button>\r\n            </div>\r\n\r\n            {/* Ambient sounds */}\r\n            <div className=\"border-t pt-3\">\r\n              <div className=\"flex items-center justify-between mb-2\">\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <Volume2 className=\"w-4 h-4 text-green-600\" />\r\n                  <span className=\"text-sm text-gray-700\">Ambient sounds</span>\r\n                </div>\r\n                {focusMode.ambientSoundEnabled && (\r\n                  <button\r\n                    onClick={() => handleToggleAmbientSound()}\r\n                    className=\"text-xs text-red-600 hover:text-red-700\"\r\n                  >\r\n                    Stop\r\n                  </button>\r\n                )}\r\n              </div>\r\n              \r\n              <div className=\"grid grid-cols-2 gap-2\">\r\n                {ambientSounds.map((sound) => (\r\n                  <button\r\n                    key={sound.id}\r\n                    onClick={() => handleToggleAmbientSound(sound.id)}\r\n                    className={`flex items-center space-x-2 p-2 rounded text-xs transition-colors ${\r\n                      focusMode.currentAmbientSound === sound.id\r\n                        ? 'bg-green-100 text-green-700 border border-green-300'\r\n                        : 'bg-gray-50 text-gray-600 hover:bg-gray-100'\r\n                    }`}\r\n                  >\r\n                    <span>{sound.icon}</span>\r\n                    <span>{sound.name}</span>\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Focus mode status */}\r\n            <div className=\"border-t pt-3\">\r\n              <div className=\"text-xs text-gray-500 space-y-1\">\r\n                <div className=\"flex justify-between\">\r\n                  <span>Session active:</span>\r\n                  <span className={isRunning ? 'text-green-600' : 'text-gray-400'}>\r\n                    {isRunning ? 'Yes' : 'No'}\r\n                  </span>\r\n                </div>\r\n                <div className=\"flex justify-between\">\r\n                  <span>Distractions blocked:</span>\r\n                  <span className=\"text-purple-600\">\r\n                    {[\r\n                      focusMode.notificationsSuppressed && 'Notifications',\r\n                      focusMode.websiteBlockingEnabled && 'Websites',\r\n                    ].filter(Boolean).join(', ') || 'None'}\r\n                  </span>\r\n                </div>\r\n                {focusMode.currentAmbientSound && (\r\n                  <div className=\"flex justify-between\">\r\n                    <span>Ambient sound:</span>\r\n                    <span className=\"text-green-600\">\r\n                      {ambientSounds.find(s => s.id === focusMode.currentAmbientSound)?.name}\r\n                    </span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Focus mode indicator overlay */}\r\n      {focusMode.isEnabled && (\r\n        <div className=\"fixed top-4 left-4 z-40 bg-purple-600 text-white px-3 py-1 rounded-full text-sm font-medium shadow-lg\">\r\n          <div className=\"flex items-center space-x-2\">\r\n            <div className=\"w-2 h-2 bg-white rounded-full animate-pulse\" />\r\n            <span>Focus Mode Active</span>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FocusModeToggle;","import React, { useState } from 'react';\r\nimport { useTimer } from '../../hooks/useTimer';\r\nimport { useTaskStore } from '../../stores/taskStore';\r\nimport { CountdownDisplay } from './CountdownDisplay';\r\nimport { ProgressRing } from './ProgressRing';\r\nimport { SessionControls } from './SessionControls';\r\nimport { SessionTypeSelector } from './SessionTypeSelector';\r\nimport { SystemSleepDialog } from './SystemSleepDialog';\r\nimport { TaskSelector } from './TaskSelector';\r\nimport { TaskSwitcher } from './TaskSwitcher';\r\nimport { TaskCompletionDialog } from './TaskCompletionDialog';\r\nimport FocusModeToggle from '../Focus/FocusModeToggle';\r\nimport { Task } from '../../../../shared/types';\r\n\r\nexport const Timer: React.FC = () => {\r\n  const [selectedTask, setSelectedTask] = useState<Task | null>(null);\r\n  const [showCompletionDialog, setShowCompletionDialog] = useState(false);\r\n  const [showTaskCreation, setShowTaskCreation] = useState(false);\r\n\r\n  const {\r\n    isRunning,\r\n    isPaused,\r\n    formattedTime,\r\n    progress,\r\n    sessionType,\r\n    sessionTypeColor,\r\n    sessionTypeDisplayName,\r\n    isSystemSleepDetected,\r\n    currentSession,\r\n    plannedDuration,\r\n    remainingTime,\r\n    startTimer,\r\n    pauseTimer,\r\n    resumeTimer,\r\n    stopTimer,\r\n    completeSession,\r\n    updateSessionType,\r\n    switchTask,\r\n    completeCurrentTask,\r\n    canStartTimer,\r\n    canPauseTimer,\r\n    canResumeTimer,\r\n    canStopTimer,\r\n  } = useTimer();\r\n\r\n  const { tasks, completeTask } = useTaskStore();\r\n\r\n  // Get current task details\r\n  const currentTask = currentSession?.taskId \r\n    ? tasks.find(t => t.id === currentSession.taskId) \r\n    : null;\r\n\r\n  // Calculate session duration in minutes\r\n  const sessionDurationMinutes = Math.round((plannedDuration * 60 - remainingTime) / 60);\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800 p-8\">\r\n      {/* System Sleep Detection Dialog */}\r\n      {isSystemSleepDetected && (\r\n        <SystemSleepDialog\r\n          onResume={resumeTimer}\r\n          onStop={stopTimer}\r\n        />\r\n      )}\r\n\r\n      {/* Focus Mode Toggle */}\r\n      <div className=\"absolute top-4 right-4 z-10\">\r\n        <FocusModeToggle />\r\n      </div>\r\n\r\n      {/* Main Timer Container */}\r\n      <div className=\"bg-white dark:bg-gray-800 rounded-3xl shadow-2xl p-12 max-w-2xl w-full\">\r\n        {/* Session Type Display */}\r\n        <div className=\"text-center mb-8\">\r\n          <h1 className=\"text-2xl font-semibold text-gray-800 dark:text-gray-200 mb-2\">\r\n            {sessionTypeDisplayName}\r\n          </h1>\r\n          {currentTask && (\r\n            <p className=\"text-gray-600 dark:text-gray-400\">\r\n              Working on: {currentTask.title}\r\n            </p>\r\n          )}\r\n        </div>\r\n\r\n        {/* Progress Ring and Countdown */}\r\n        <div className=\"relative flex items-center justify-center mb-12\">\r\n          {/* Progress Ring Container with proper positioning */}\r\n          <div className=\"relative\">\r\n            <ProgressRing\r\n              progress={progress}\r\n              color={sessionTypeColor}\r\n              size={320}\r\n              strokeWidth={8}\r\n              isRunning={isRunning}\r\n              isPaused={isPaused}\r\n            />\r\n            {/* Countdown Display positioned precisely in center of ring */}\r\n            <div className=\"absolute inset-0 flex items-center justify-center\">\r\n              <CountdownDisplay\r\n                time={formattedTime}\r\n                isRunning={isRunning}\r\n                isPaused={isPaused}\r\n                color={sessionTypeColor}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Session Controls */}\r\n        <div className=\"mb-8\">\r\n          <SessionControls\r\n            isRunning={isRunning}\r\n            isPaused={isPaused}\r\n            canStart={canStartTimer()}\r\n            canPause={canPauseTimer()}\r\n            canResume={canResumeTimer()}\r\n            canStop={canStopTimer()}\r\n            onStart={() => startTimer(sessionType, plannedDuration, selectedTask?.id)}\r\n            onPause={pauseTimer}\r\n            onResume={resumeTimer}\r\n            onStop={stopTimer}\r\n            onComplete={() => setShowCompletionDialog(true)}\r\n          />\r\n        </div>\r\n\r\n        {/* Task Selection (when not running) */}\r\n        {!isRunning && (\r\n          <div className=\"mb-6\">\r\n            <TaskSelector\r\n              selectedTaskId={selectedTask?.id}\r\n              onTaskSelect={setSelectedTask}\r\n              onCreateTask={() => setShowTaskCreation(true)}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {/* Task Switcher (when running) */}\r\n        {isRunning && (\r\n          <div className=\"mb-6\">\r\n            <TaskSwitcher\r\n              currentTaskId={currentSession?.taskId}\r\n              onTaskSwitch={(task) => switchTask(task?.id)}\r\n              sessionDuration={sessionDurationMinutes}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {/* Session Type Selector */}\r\n        {!isRunning && (\r\n          <div className=\"mt-8\">\r\n            <SessionTypeSelector\r\n              currentType={sessionType}\r\n              onTypeChange={updateSessionType}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {/* Session Status */}\r\n        <div className=\"text-center mt-6\">\r\n          {isRunning && !isPaused && (\r\n            <div className=\"flex items-center justify-center space-x-2\">\r\n              <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\r\n              <span className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                Session in progress\r\n              </span>\r\n            </div>\r\n          )}\r\n          {isRunning && isPaused && (\r\n            <div className=\"flex items-center justify-center space-x-2\">\r\n              <div className=\"w-2 h-2 bg-yellow-500 rounded-full\"></div>\r\n              <span className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                Session paused\r\n              </span>\r\n            </div>\r\n          )}\r\n          {!isRunning && (\r\n            <div className=\"flex items-center justify-center space-x-2\">\r\n              <div className=\"w-2 h-2 bg-gray-400 rounded-full\"></div>\r\n              <span className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                Ready to start\r\n              </span>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Keyboard Shortcuts Help */}\r\n      <div className=\"mt-8 text-center\">\r\n        <p className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n          Keyboard shortcuts: <kbd className=\"px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded text-xs\">Space</kbd> to start/pause, \r\n          <kbd className=\"px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded text-xs ml-2\">Esc</kbd> to stop,\r\n          <kbd className=\"px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded text-xs ml-2\">Enter</kbd> to complete\r\n        </p>\r\n      </div>\r\n\r\n      {/* Task Completion Dialog */}\r\n      {showCompletionDialog && currentSession && (\r\n        <TaskCompletionDialog\r\n          isOpen={showCompletionDialog}\r\n          onClose={() => setShowCompletionDialog(false)}\r\n          task={currentTask}\r\n          session={currentSession}\r\n          onTaskComplete={async (taskId) => {\r\n            await completeCurrentTask();\r\n            await completeTask(taskId);\r\n          }}\r\n          onSessionComplete={async (qualityRating, notes) => {\r\n            await completeSession(qualityRating, notes);\r\n            setShowCompletionDialog(false);\r\n          }}\r\n        />\r\n      )}\r\n\r\n      {/* Task Creation Modal - TODO: Implement this */}\r\n      {showTaskCreation && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n          <div className=\"bg-white dark:bg-gray-800 p-6 rounded-lg\">\r\n            <p className=\"text-gray-900 dark:text-gray-100\">Task creation modal - TODO</p>\r\n            <button \r\n              onClick={() => setShowTaskCreation(false)}\r\n              className=\"mt-4 px-4 py-2 bg-blue-500 text-white rounded\"\r\n            >\r\n              Close\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport { Timer as TimerComponent } from '../components/Timer/Timer';\r\n\r\nconst Timer: React.FC = () => {\r\n  return <TimerComponent />;\r\n}\r\n\r\nexport default Timer"],"names":["timerService","intervalId","TICK_INTERVAL","SLEEP_DETECTION_THRESHOLD","lastTickTime","isInitialized","constructor","this","initialize","setupVisibilityChangeListener","setupBeforeUnloadListener","setupFocusListeners","requestNotificationPermission","start","stop","Date","now","window","setInterval","tick","clearInterval","deltaTime","handleSystemSleepDetection","useTimerStore","getState","updateLastActiveTime","timerStore","isRunning","isPaused","detectSystemSleep","showSleepDetectionNotification","Math","round","secondsGap","sessionPreferences","notificationsEnabled","message","Notification","permission","body","icon","requireInteraction","document","addEventListener","hidden","timerState","remainingTime","sessionType","plannedDuration","startTime","pausedTime","currentSession","lastActiveTime","localStorage","setItem","JSON","stringify","idleTimer","resetIdleTimer","clearTimeout","setTimeout","handleIdleDetection","forEach","event","passive","showIdleNotification","notification","onclick","focus","close","requestPermission","then","recoverTimerState","savedState","getItem","parse","timeSinceLastActive","removeItem","timePassedSeconds","floor","newRemainingTime","max","startTimer","taskId","categoryId","setState","isSystemSleepDetected","error","getCurrentTime","formatTime","seconds","showHours","hours","minutes","secs","toString","padStart","getSessionProgress","totalSeconds","elapsedSeconds","min","getSessionTypeDisplayName","getSessionTypeColor","useTimer","timerServiceRef","useRef","pauseTimer","resumeTimer","stopTimer","completeSession","updateSessionType","updatePlannedDuration","updateSessionPreferences","switchTask","completeCurrentTask","updateTaskActualDuration","useEffect","current","formattedTime","progress","sessionTypeDisplayName","sessionTypeColor","type","duration","sessionDuration","getDurationForSessionType","async","rating","notes","getDurationOptions","canStartTimer","canPauseTimer","canResumeTimer","canStopTimer","cn","inputs","twMerge","clsx","CountdownDisplay","React","memo","time","color","className","children","jsx","style","maxWidth","fontSize","textShadow","whiteSpace","jsxs","backgroundColor","displayName","ProgressRing","size","strokeWidth","radius","circumference","strokeDasharray","strokeDashoffset","useMemo","r","c","PI","width","height","cx","cy","stroke","fill","strokeLinecap","filter","SessionControls","canStart","canPause","canResume","canStop","onStart","onPause","onResume","onStop","onComplete","handleKeyPress","target","HTMLInputElement","HTMLTextAreaElement","code","preventDefault","removeEventListener","onClick","title","Play","Pause","Square","CheckCircle","sessionTypes","name","description","Brain","defaultDuration","Zap","Coffee","Settings","SessionTypeSelector","currentType","onTypeChange","showDurationSelector","setShowDurationSelector","useState","selectedType","setSelectedType","currentTypeOption","find","t","map","option","isSelected","handleTypeSelect","borderColor","focusRingColor","handleDurationSelect","SystemSleepDialog","AlertTriangle","TaskSelector","selectedTaskId","onTaskSelect","onCreateTask","searchQuery","setSearchQuery","isOpen","setIsOpen","tasks","filteredTasks","fetchTasks","setFilters","getTasksByStatus","useTaskStore","categories","fetchCategories","useCategoryStore","activeTasks","displayTasks","status","selectedTask","id","getCategoryForTask","task","formatDuration","mins","estimatedDuration","Target","Search","placeholder","value","onChange","e","autoFocus","category","Clock","length","Plus","TaskSwitcher","currentTaskId","onTaskSwitch","currentTask","handleTaskSwitch","confirmMessage","confirm","ArrowRightLeft","ChevronDown","TransitionAnimations","isVisible","animationPhase","setAnimationPhase","setProgress","config","Sun","bgColor","defaultMessage","particles","animation","Sparkles","Heart","Moon","getAnimationConfig","Icon","displayDuration","enterTimer","displayTimer","exitTimer","interval","prev","newProgress","baseClasses","getAnimationClasses","Array","from","_","i","left","top","animationDelay","animationDuration","getIconAnimationClasses","MindfulnessPrompt","onClose","triggerType","selectedExercise","setSelectedExercise","isExerciseActive","setIsExerciseActive","exerciseTime","setExerciseTime","currentStep","setCurrentStep","exercises","instructions","Flower","stepDuration","targetStep","relevantExercises","getRelevantExercises","Fragment","X","instruction","index","RotateCcw","getPromptTitle","exercise","startExercise","replace","SessionReflection","onSubmit","session","reflection","setReflection","qualityRating","focusRating","energyLevel","accomplishments","challenges","improvements","gratitude","nextSessionGoal","mood","tags","moods","commonTags","reflectionSteps","component","updateReflection","key","handleSubmit","renderRating","label","currentStepData","isLastStep","Star","TrendingUp","rows","tag","includes","toggleTag","renderCurrentStep","disabled","TaskCompletionDialog","onTaskComplete","onSessionComplete","setQualityRating","setNotes","markTaskComplete","setMarkTaskComplete","isSubmitting","setIsSubmitting","showMindfulTransition","setShowMindfulTransition","currentTransitionStep","setCurrentTransitionStep","mindfulnessEnabled","transitionAnimationsEnabled","breathingExerciseEnabled","sessionReflectionEnabled","recordMindfulnessSession","useMindfulnessStore","actualDuration","progressInfo","totalActualTime","estimatedTime","progressPercentage","timeVariance","isOverEstimate","isComplete","getProgressInfo","handleTransitionNext","handleSkipTransition","onSkip","abs","checked","MessageSquare","FocusModeToggle","focusMode","setFocusMode","isEnabled","isFullscreen","notificationsSuppressed","ambientSoundEnabled","websiteBlockingEnabled","currentAmbientSound","isExpanded","setIsExpanded","ambientSounds","handleToggleFocusMode","handleFullscreenChange","fullscreenElement","newEnabled","classList","add","remove","exitFullscreen","stopAmbientSound","handleToggleAmbientSound","soundId","startAmbientSound","sound","s","silent","EyeOff","Eye","Shield","Minimize","Maximize","documentElement","requestFullscreen","VolumeX","newBlocking","Volume2","Boolean","join","Timer","setSelectedTask","showCompletionDialog","setShowCompletionDialog","showTaskCreation","setShowTaskCreation","completeTask","sessionDurationMinutes","TimerComponent"],"mappings":"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"}