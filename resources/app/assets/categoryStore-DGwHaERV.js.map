{"version":3,"file":"categoryStore-DGwHaERV.js","sources":["../../src/stores/categoryStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport { devtools } from 'zustand/middleware';\r\nimport { Category, CreateCategoryForm, ApiResponse } from '../../../shared/types';\r\n\r\ninterface CategoryState {\r\n  categories: Category[];\r\n  categoriesWithCounts: Array<Category & { taskCount: number }>;\r\n  categoriesWithProgress: Array<Category & { weeklyProgress: number }>;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  selectedCategory: Category | null;\r\n}\r\n\r\ninterface CategoryActions {\r\n  // Data fetching\r\n  fetchCategories: () => Promise<void>;\r\n  fetchCategoriesWithCounts: () => Promise<void>;\r\n  fetchCategoriesWithProgress: (weekStart?: Date) => Promise<void>;\r\n  fetchCategoryById: (id: number) => Promise<Category | null>;\r\n  \r\n  // CRUD operations\r\n  createCategory: (categoryData: CreateCategoryForm) => Promise<Category | null>;\r\n  updateCategory: (id: number, updates: Partial<CreateCategoryForm>) => Promise<Category | null>;\r\n  deleteCategory: (id: number, reassignToCategoryId?: number) => Promise<boolean>;\r\n  \r\n  // Utility functions\r\n  checkNameUnique: (name: string, excludeId?: number) => Promise<boolean>;\r\n  selectCategory: (category: Category | null) => void;\r\n  clearError: () => void;\r\n  \r\n  // Local state helpers\r\n  getCategoryById: (id: number) => Category | undefined;\r\n  getCategoryByName: (name: string) => Category | undefined;\r\n}\r\n\r\ntype CategoryStore = CategoryState & CategoryActions;\r\n\r\nconst initialState: CategoryState = {\r\n  categories: [],\r\n  categoriesWithCounts: [],\r\n  categoriesWithProgress: [],\r\n  isLoading: false,\r\n  error: null,\r\n  selectedCategory: null,\r\n};\r\n\r\nexport const useCategoryStore = create<CategoryStore>()(\r\n  devtools(\r\n    (set, get) => ({\r\n      ...initialState,\r\n\r\n      // Data fetching\r\n      fetchCategories: async () => {\r\n        set({ isLoading: true, error: null });\r\n        try {\r\n          const response = await fetch('/api/categories');\r\n          const result: ApiResponse<Category[]> = await response.json();\r\n          \r\n          if (result.success && result.data) {\r\n            set({ categories: result.data, isLoading: false });\r\n          } else {\r\n            set({ \r\n              error: result.error?.message || 'Failed to fetch categories',\r\n              isLoading: false \r\n            });\r\n          }\r\n        } catch (error) {\r\n          set({ \r\n            error: error instanceof Error ? error.message : 'Network error',\r\n            isLoading: false \r\n          });\r\n        }\r\n      },\r\n\r\n      fetchCategoriesWithCounts: async () => {\r\n        set({ isLoading: true, error: null });\r\n        try {\r\n          const response = await fetch('/api/categories/with-counts');\r\n          const result: ApiResponse<Array<Category & { taskCount: number }>> = await response.json();\r\n          \r\n          if (result.success && result.data) {\r\n            set({ \r\n              categoriesWithCounts: result.data,\r\n              categories: result.data, // Also update base categories\r\n              isLoading: false \r\n            });\r\n          } else {\r\n            set({ \r\n              error: result.error?.message || 'Failed to fetch categories with counts',\r\n              isLoading: false \r\n            });\r\n          }\r\n        } catch (error) {\r\n          set({ \r\n            error: error instanceof Error ? error.message : 'Network error',\r\n            isLoading: false \r\n          });\r\n        }\r\n      },\r\n\r\n      fetchCategoriesWithProgress: async (weekStart?: Date) => {\r\n        set({ isLoading: true, error: null });\r\n        try {\r\n          const params = weekStart ? `?weekStart=${weekStart.toISOString()}` : '';\r\n          const response = await fetch(`/api/categories/with-progress${params}`);\r\n          const result: ApiResponse<Array<Category & { weeklyProgress: number }>> = await response.json();\r\n          \r\n          if (result.success && result.data) {\r\n            set({ \r\n              categoriesWithProgress: result.data,\r\n              categories: result.data, // Also update base categories\r\n              isLoading: false \r\n            });\r\n          } else {\r\n            set({ \r\n              error: result.error?.message || 'Failed to fetch categories with progress',\r\n              isLoading: false \r\n            });\r\n          }\r\n        } catch (error) {\r\n          set({ \r\n            error: error instanceof Error ? error.message : 'Network error',\r\n            isLoading: false \r\n          });\r\n        }\r\n      },\r\n\r\n      fetchCategoryById: async (id: number) => {\r\n        try {\r\n          const response = await fetch(`/api/categories/${id}`);\r\n          const result: ApiResponse<Category> = await response.json();\r\n          \r\n          if (result.success && result.data) {\r\n            return result.data;\r\n          } else {\r\n            set({ error: result.error?.message || 'Failed to fetch category' });\r\n            return null;\r\n          }\r\n        } catch (error) {\r\n          set({ error: error instanceof Error ? error.message : 'Network error' });\r\n          return null;\r\n        }\r\n      },\r\n\r\n      // CRUD operations\r\n      createCategory: async (categoryData: CreateCategoryForm) => {\r\n        set({ isLoading: true, error: null });\r\n        try {\r\n          const response = await fetch('/api/categories', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(categoryData),\r\n          });\r\n          \r\n          const result: ApiResponse<Category> = await response.json();\r\n          \r\n          if (result.success && result.data) {\r\n            const newCategory = result.data;\r\n            set(state => ({\r\n              categories: [...state.categories, newCategory],\r\n              categoriesWithCounts: [...state.categoriesWithCounts, { ...newCategory, taskCount: 0 }],\r\n              categoriesWithProgress: [...state.categoriesWithProgress, { ...newCategory, weeklyProgress: 0 }],\r\n              isLoading: false\r\n            }));\r\n            return newCategory;\r\n          } else {\r\n            set({ \r\n              error: result.error?.message || 'Failed to create category',\r\n              isLoading: false \r\n            });\r\n            return null;\r\n          }\r\n        } catch (error) {\r\n          set({ \r\n            error: error instanceof Error ? error.message : 'Network error',\r\n            isLoading: false \r\n          });\r\n          return null;\r\n        }\r\n      },\r\n\r\n      updateCategory: async (id: number, updates: Partial<CreateCategoryForm>) => {\r\n        set({ isLoading: true, error: null });\r\n        try {\r\n          const response = await fetch(`/api/categories/${id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(updates),\r\n          });\r\n          \r\n          const result: ApiResponse<Category> = await response.json();\r\n          \r\n          if (result.success && result.data) {\r\n            const updatedCategory = result.data;\r\n            set(state => ({\r\n              categories: state.categories.map(cat => \r\n                cat.id === id ? updatedCategory : cat\r\n              ),\r\n              categoriesWithCounts: state.categoriesWithCounts.map(cat => \r\n                cat.id === id ? { ...updatedCategory, taskCount: cat.taskCount } : cat\r\n              ),\r\n              categoriesWithProgress: state.categoriesWithProgress.map(cat => \r\n                cat.id === id ? { ...updatedCategory, weeklyProgress: cat.weeklyProgress } : cat\r\n              ),\r\n              selectedCategory: state.selectedCategory?.id === id ? updatedCategory : state.selectedCategory,\r\n              isLoading: false\r\n            }));\r\n            return updatedCategory;\r\n          } else {\r\n            set({ \r\n              error: result.error?.message || 'Failed to update category',\r\n              isLoading: false \r\n            });\r\n            return null;\r\n          }\r\n        } catch (error) {\r\n          set({ \r\n            error: error instanceof Error ? error.message : 'Network error',\r\n            isLoading: false \r\n          });\r\n          return null;\r\n        }\r\n      },\r\n\r\n      deleteCategory: async (id: number, reassignToCategoryId?: number) => {\r\n        set({ isLoading: true, error: null });\r\n        try {\r\n          const params = reassignToCategoryId ? `?reassignTo=${reassignToCategoryId}` : '';\r\n          const response = await fetch(`/api/categories/${id}${params}`, {\r\n            method: 'DELETE',\r\n          });\r\n          \r\n          const result: ApiResponse = await response.json();\r\n          \r\n          if (result.success) {\r\n            set(state => ({\r\n              categories: state.categories.filter(cat => cat.id !== id),\r\n              categoriesWithCounts: state.categoriesWithCounts.filter(cat => cat.id !== id),\r\n              categoriesWithProgress: state.categoriesWithProgress.filter(cat => cat.id !== id),\r\n              selectedCategory: state.selectedCategory?.id === id ? null : state.selectedCategory,\r\n              isLoading: false\r\n            }));\r\n            return true;\r\n          } else {\r\n            set({ \r\n              error: result.error?.message || 'Failed to delete category',\r\n              isLoading: false \r\n            });\r\n            return false;\r\n          }\r\n        } catch (error) {\r\n          set({ \r\n            error: error instanceof Error ? error.message : 'Network error',\r\n            isLoading: false \r\n          });\r\n          return false;\r\n        }\r\n      },\r\n\r\n      // Utility functions\r\n      checkNameUnique: async (name: string, excludeId?: number) => {\r\n        try {\r\n          const response = await fetch('/api/categories/check-name', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ name, excludeId }),\r\n          });\r\n          \r\n          const result: ApiResponse<{ isUnique: boolean }> = await response.json();\r\n          \r\n          if (result.success && result.data) {\r\n            return result.data.isUnique;\r\n          }\r\n          return false;\r\n        } catch (error) {\r\n          console.error('Error checking name uniqueness:', error);\r\n          return false;\r\n        }\r\n      },\r\n\r\n      selectCategory: (category: Category | null) => {\r\n        set({ selectedCategory: category });\r\n      },\r\n\r\n      clearError: () => {\r\n        set({ error: null });\r\n      },\r\n\r\n      // Local state helpers\r\n      getCategoryById: (id: number) => {\r\n        return get().categories.find(cat => cat.id === id);\r\n      },\r\n\r\n      getCategoryByName: (name: string) => {\r\n        return get().categories.find(cat => cat.name.toLowerCase() === name.toLowerCase());\r\n      },\r\n    }),\r\n    {\r\n      name: 'category-store',\r\n    }\r\n  )\r\n);\r\n\r\n// Selector hooks for better performance\r\nexport const useCategoriesData = () => useCategoryStore(state => ({\r\n  categories: state.categories,\r\n  categoriesWithCounts: state.categoriesWithCounts,\r\n  categoriesWithProgress: state.categoriesWithProgress,\r\n  isLoading: state.isLoading,\r\n  error: state.error,\r\n}));\r\n\r\nexport const useCategoryActions = () => useCategoryStore(state => ({\r\n  fetchCategories: state.fetchCategories,\r\n  fetchCategoriesWithCounts: state.fetchCategoriesWithCounts,\r\n  fetchCategoriesWithProgress: state.fetchCategoriesWithProgress,\r\n  fetchCategoryById: state.fetchCategoryById,\r\n  createCategory: state.createCategory,\r\n  updateCategory: state.updateCategory,\r\n  deleteCategory: state.deleteCategory,\r\n  checkNameUnique: state.checkNameUnique,\r\n  selectCategory: state.selectCategory,\r\n  clearError: state.clearError,\r\n}));\r\n\r\nexport const useSelectedCategory = () => useCategoryStore(state => state.selectedCategory);"],"names":["initialState","categories","categoriesWithCounts","categoriesWithProgress","isLoading","error","selectedCategory","useCategoryStore","create","devtools","set","get","fetchCategories","async","response","fetch","result","json","success","data","message","Error","fetchCategoriesWithCounts","fetchCategoriesWithProgress","weekStart","params","toISOString","fetchCategoryById","id","createCategory","categoryData","method","headers","body","JSON","stringify","newCategory","state","taskCount","weeklyProgress","updateCategory","updates","updatedCategory","map","cat","deleteCategory","reassignToCategoryId","filter","checkNameUnique","name","excludeId","isUnique","selectCategory","category","clearError","getCategoryById","find","getCategoryByName","toLowerCase","useCategoriesData","useCategoryActions"],"mappings":"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"}