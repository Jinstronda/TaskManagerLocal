{"version":3,"file":"notificationStore-D2EvFRZ9.js","sources":["../../src/stores/notificationStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport { subscribeWithSelector } from 'zustand/middleware';\r\nimport { \r\n  NotificationPreferences, \r\n  BreakSuggestion, \r\n  ReviewPrompt, \r\n  ReviewResponse,\r\n  ReviewQuestion \r\n} from '../../../shared/types';\r\n\r\nexport interface NotificationState {\r\n  // Preferences\r\n  preferences: NotificationPreferences;\r\n  \r\n  // Active notifications\r\n  activeBreakSuggestion: BreakSuggestion | null;\r\n  activeReviewPrompt: ReviewPrompt | null;\r\n  \r\n  // Notification history\r\n  dismissedSuggestions: string[];\r\n  snoozedUntil: number | null; // timestamp\r\n  \r\n  // Review scheduling\r\n  nextDailyReview: Date | null;\r\n  nextWeeklyReview: Date | null;\r\n  \r\n  // Break tracking\r\n  lastBreakTime: number | null; // timestamp\r\n  sessionsSinceLastBreak: number;\r\n  totalWorkTimeSinceBreak: number; // minutes\r\n}\r\n\r\nexport interface NotificationActions {\r\n  // Preferences management\r\n  updatePreferences: (preferences: NotificationPreferences) => Promise<void>;\r\n  loadPreferences: () => Promise<void>;\r\n  \r\n  // Break suggestions\r\n  showBreakSuggestion: (suggestion: BreakSuggestion) => void;\r\n  dismissBreakSuggestion: () => void;\r\n  snoozeBreakSuggestion: (minutes: number) => void;\r\n  acceptBreakSuggestion: (duration: number) => void;\r\n  \r\n  // Review prompts\r\n  showReviewPrompt: (prompt: ReviewPrompt) => void;\r\n  dismissReviewPrompt: () => void;\r\n  snoozeReviewPrompt: (minutes: number) => void;\r\n  submitReviewResponse: (response: ReviewResponse) => Promise<void>;\r\n  \r\n  // Break tracking\r\n  recordBreakTaken: () => void;\r\n  incrementSessionCount: () => void;\r\n  addWorkTime: (minutes: number) => void;\r\n  \r\n  // Smart suggestions\r\n  checkForBreakSuggestion: () => void;\r\n  scheduleNextReviews: () => void;\r\n  \r\n  // Utility\r\n  canShowNotification: (type: keyof NotificationPreferences) => boolean;\r\n  isInFocusMode: () => boolean;\r\n  clearSnoozedState: () => void;\r\n}\r\n\r\nexport type NotificationStore = NotificationState & NotificationActions;\r\n\r\n// Default notification preferences\r\nconst defaultPreferences: NotificationPreferences = {\r\n  enabled: true,\r\n  sessionComplete: {\r\n    enabled: true,\r\n    sound: true,\r\n    duration: 10,\r\n    showTaskInfo: true,\r\n  },\r\n  breakReminders: {\r\n    enabled: true,\r\n    sound: true,\r\n    frequency: 'smart',\r\n    duration: 15,\r\n    smartThreshold: 90,\r\n  },\r\n  dailyReview: {\r\n    enabled: true,\r\n    time: '18:00',\r\n    sound: false,\r\n    weekendsIncluded: false,\r\n  },\r\n  weeklyReview: {\r\n    enabled: true,\r\n    dayOfWeek: 0, // Sunday\r\n    time: '19:00',\r\n    sound: false,\r\n  },\r\n  goalAchievements: {\r\n    enabled: true,\r\n    sound: true,\r\n    showProgress: true,\r\n  },\r\n  streakMilestones: {\r\n    enabled: true,\r\n    sound: true,\r\n    milestones: [7, 14, 30, 60, 100],\r\n  },\r\n  idleDetection: {\r\n    enabled: true,\r\n    threshold: 5,\r\n    sound: false,\r\n  },\r\n  systemSleep: {\r\n    enabled: true,\r\n    sound: true,\r\n  },\r\n  focusMode: {\r\n    suppressOtherNotifications: true,\r\n    allowBreakReminders: true,\r\n    allowUrgentOnly: false,\r\n  },\r\n};\r\n\r\n// Initial state\r\nconst initialState: NotificationState = {\r\n  preferences: defaultPreferences,\r\n  activeBreakSuggestion: null,\r\n  activeReviewPrompt: null,\r\n  dismissedSuggestions: [],\r\n  snoozedUntil: null,\r\n  nextDailyReview: null,\r\n  nextWeeklyReview: null,\r\n  lastBreakTime: null,\r\n  sessionsSinceLastBreak: 0,\r\n  totalWorkTimeSinceBreak: 0,\r\n};\r\n\r\nexport const useNotificationStore = create<NotificationStore>()(\r\n  subscribeWithSelector((set, get) => ({\r\n    ...initialState,\r\n\r\n    // Preferences management\r\n    updatePreferences: async (preferences: NotificationPreferences) => {\r\n      try {\r\n        // Save to server\r\n        const response = await fetch('http://localhost:8765/api/settings/notification-preferences', {\r\n          method: 'PUT',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(preferences),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Failed to save notification preferences');\r\n        }\r\n\r\n        set({ preferences });\r\n        \r\n        // Reschedule reviews if timing changed\r\n        get().scheduleNextReviews();\r\n        \r\n        // Save to localStorage as backup\r\n        localStorage.setItem('notificationPreferences', JSON.stringify(preferences));\r\n      } catch (error) {\r\n        console.error('Failed to update notification preferences:', error);\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    loadPreferences: async () => {\r\n      try {\r\n        // Try to load from server first\r\n        const response = await fetch('http://localhost:8765/api/settings/notification-preferences');\r\n        \r\n        if (response.ok) {\r\n          const preferences = await response.json();\r\n          set({ preferences });\r\n        } else {\r\n          // Fallback to localStorage\r\n          const saved = localStorage.getItem('notificationPreferences');\r\n          if (saved) {\r\n            const preferences = JSON.parse(saved);\r\n            set({ preferences });\r\n          }\r\n        }\r\n        \r\n        // Schedule reviews after loading preferences\r\n        get().scheduleNextReviews();\r\n      } catch (error) {\r\n        console.error('Failed to load notification preferences:', error);\r\n        // Use defaults if loading fails\r\n      }\r\n    },\r\n\r\n    // Break suggestions\r\n    showBreakSuggestion: (suggestion: BreakSuggestion) => {\r\n      const state = get();\r\n      \r\n      // Don't show if notifications disabled or in focus mode without break reminders\r\n      if (!state.canShowNotification('breakReminders')) {\r\n        return;\r\n      }\r\n      \r\n      // Don't show if snoozed\r\n      if (state.snoozedUntil && Date.now() < state.snoozedUntil) {\r\n        return;\r\n      }\r\n      \r\n      set({ activeBreakSuggestion: suggestion });\r\n    },\r\n\r\n    dismissBreakSuggestion: () => {\r\n      const state = get();\r\n      if (state.activeBreakSuggestion) {\r\n        set({\r\n          activeBreakSuggestion: null,\r\n          dismissedSuggestions: [\r\n            ...state.dismissedSuggestions,\r\n            `${state.activeBreakSuggestion.type}_${Date.now()}`,\r\n          ],\r\n        });\r\n      }\r\n    },\r\n\r\n    snoozeBreakSuggestion: (minutes: number) => {\r\n      set({\r\n        activeBreakSuggestion: null,\r\n        snoozedUntil: Date.now() + (minutes * 60 * 1000),\r\n      });\r\n    },\r\n\r\n    acceptBreakSuggestion: (duration: number) => {\r\n      // Start a break session\r\n      // This would integrate with the timer store to start a break\r\n      set({ activeBreakSuggestion: null });\r\n      get().recordBreakTaken();\r\n      \r\n      // Trigger break session start (would integrate with timer store)\r\n      // timerStore.startTimer('break', duration);\r\n    },\r\n\r\n    // Review prompts\r\n    showReviewPrompt: (prompt: ReviewPrompt) => {\r\n      const state = get();\r\n      \r\n      // Don't show if notifications disabled\r\n      if (!state.preferences.enabled) {\r\n        return;\r\n      }\r\n      \r\n      // Check specific review type preferences\r\n      if (prompt.type === 'daily' && !state.preferences.dailyReview.enabled) {\r\n        return;\r\n      }\r\n      \r\n      if (prompt.type === 'weekly' && !state.preferences.weeklyReview.enabled) {\r\n        return;\r\n      }\r\n      \r\n      set({ activeReviewPrompt: prompt });\r\n    },\r\n\r\n    dismissReviewPrompt: () => {\r\n      set({ activeReviewPrompt: null });\r\n    },\r\n\r\n    snoozeReviewPrompt: (minutes: number) => {\r\n      const state = get();\r\n      set({ activeReviewPrompt: null });\r\n      \r\n      // Reschedule the review\r\n      if (state.activeReviewPrompt?.type === 'daily') {\r\n        const nextTime = new Date(Date.now() + (minutes * 60 * 1000));\r\n        set({ nextDailyReview: nextTime });\r\n      } else if (state.activeReviewPrompt?.type === 'weekly') {\r\n        const nextTime = new Date(Date.now() + (minutes * 60 * 1000));\r\n        set({ nextWeeklyReview: nextTime });\r\n      }\r\n    },\r\n\r\n    submitReviewResponse: async (response: ReviewResponse) => {\r\n      try {\r\n        // Save review response to server\r\n        const apiResponse = await fetch('http://localhost:8765/api/reviews', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(response),\r\n        });\r\n\r\n        if (!apiResponse.ok) {\r\n          throw new Error('Failed to save review response');\r\n        }\r\n\r\n        set({ activeReviewPrompt: null });\r\n        \r\n        // Schedule next review\r\n        get().scheduleNextReviews();\r\n      } catch (error) {\r\n        console.error('Failed to submit review response:', error);\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    // Break tracking\r\n    recordBreakTaken: () => {\r\n      set({\r\n        lastBreakTime: Date.now(),\r\n        sessionsSinceLastBreak: 0,\r\n        totalWorkTimeSinceBreak: 0,\r\n      });\r\n    },\r\n\r\n    incrementSessionCount: () => {\r\n      set(state => ({\r\n        sessionsSinceLastBreak: state.sessionsSinceLastBreak + 1,\r\n      }));\r\n    },\r\n\r\n    addWorkTime: (minutes: number) => {\r\n      set(state => ({\r\n        totalWorkTimeSinceBreak: state.totalWorkTimeSinceBreak + minutes,\r\n      }));\r\n    },\r\n\r\n    // Smart suggestions\r\n    checkForBreakSuggestion: () => {\r\n      const state = get();\r\n      \r\n      if (!state.canShowNotification('breakReminders') || state.activeBreakSuggestion) {\r\n        return;\r\n      }\r\n      \r\n      const { preferences, sessionsSinceLastBreak, totalWorkTimeSinceBreak } = state;\r\n      const breakPrefs = preferences.breakReminders;\r\n      \r\n      let shouldSuggestBreak = false;\r\n      let suggestion: BreakSuggestion | null = null;\r\n      \r\n      // Time-based suggestion\r\n      if (totalWorkTimeSinceBreak >= 120) { // 2 hours\r\n        shouldSuggestBreak = true;\r\n        suggestion = {\r\n          type: 'time_based',\r\n          reason: `You've been working for ${Math.round(totalWorkTimeSinceBreak)} minutes. Time for a break!`,\r\n          suggestedDuration: 15,\r\n          confidence: 0.9,\r\n          sessionsSinceLastBreak,\r\n          totalWorkTime: totalWorkTimeSinceBreak,\r\n        };\r\n      }\r\n      \r\n      // Frequency-based suggestion\r\n      else if (breakPrefs.frequency !== 'smart') {\r\n        const threshold = breakPrefs.frequency === 'after_each' ? 1 : \r\n                         breakPrefs.frequency === 'after_2' ? 2 : 3;\r\n        \r\n        if (sessionsSinceLastBreak >= threshold) {\r\n          shouldSuggestBreak = true;\r\n          suggestion = {\r\n            type: 'pattern_based',\r\n            reason: `You've completed ${sessionsSinceLastBreak} sessions. Consider taking a break.`,\r\n            suggestedDuration: 10,\r\n            confidence: 0.8,\r\n            sessionsSinceLastBreak,\r\n            totalWorkTime: totalWorkTimeSinceBreak,\r\n          };\r\n        }\r\n      }\r\n      \r\n      // Smart suggestion\r\n      else if (breakPrefs.frequency === 'smart' && totalWorkTimeSinceBreak >= breakPrefs.smartThreshold) {\r\n        shouldSuggestBreak = true;\r\n        suggestion = {\r\n          type: 'productivity_based',\r\n          reason: 'Based on your patterns, a break now could improve your focus.',\r\n          suggestedDuration: Math.min(20, Math.round(totalWorkTimeSinceBreak / 6)),\r\n          confidence: 0.75,\r\n          sessionsSinceLastBreak,\r\n          totalWorkTime: totalWorkTimeSinceBreak,\r\n        };\r\n      }\r\n      \r\n      if (shouldSuggestBreak && suggestion) {\r\n        get().showBreakSuggestion(suggestion);\r\n      }\r\n    },\r\n\r\n    scheduleNextReviews: () => {\r\n      const { preferences } = get();\r\n      const now = new Date();\r\n      \r\n      // Schedule daily review\r\n      if (preferences.dailyReview.enabled) {\r\n        const [hours, minutes] = preferences.dailyReview.time.split(':').map(Number);\r\n        const nextDaily = new Date();\r\n        nextDaily.setHours(hours, minutes, 0, 0);\r\n        \r\n        // If time has passed today, schedule for tomorrow\r\n        if (nextDaily <= now) {\r\n          nextDaily.setDate(nextDaily.getDate() + 1);\r\n        }\r\n        \r\n        // Skip weekends if not included\r\n        if (!preferences.dailyReview.weekendsIncluded) {\r\n          while (nextDaily.getDay() === 0 || nextDaily.getDay() === 6) {\r\n            nextDaily.setDate(nextDaily.getDate() + 1);\r\n          }\r\n        }\r\n        \r\n        set({ nextDailyReview: nextDaily });\r\n      }\r\n      \r\n      // Schedule weekly review\r\n      if (preferences.weeklyReview.enabled) {\r\n        const [hours, minutes] = preferences.weeklyReview.time.split(':').map(Number);\r\n        const nextWeekly = new Date();\r\n        nextWeekly.setHours(hours, minutes, 0, 0);\r\n        \r\n        // Find next occurrence of the specified day\r\n        const targetDay = preferences.weeklyReview.dayOfWeek;\r\n        const currentDay = nextWeekly.getDay();\r\n        const daysUntilTarget = (targetDay - currentDay + 7) % 7;\r\n        \r\n        if (daysUntilTarget === 0 && nextWeekly <= now) {\r\n          // Same day but time has passed, schedule for next week\r\n          nextWeekly.setDate(nextWeekly.getDate() + 7);\r\n        } else {\r\n          nextWeekly.setDate(nextWeekly.getDate() + daysUntilTarget);\r\n        }\r\n        \r\n        set({ nextWeeklyReview: nextWeekly });\r\n      }\r\n    },\r\n\r\n    // Utility functions\r\n    canShowNotification: (type: keyof NotificationPreferences) => {\r\n      const state = get();\r\n      \r\n      if (!state.preferences.enabled) {\r\n        return false;\r\n      }\r\n      \r\n      // Check if in focus mode\r\n      if (state.isInFocusMode()) {\r\n        const focusMode = state.preferences.focusMode;\r\n        \r\n        if (focusMode.suppressOtherNotifications) {\r\n          // Only allow break reminders if explicitly allowed\r\n          if (type === 'breakReminders' && !focusMode.allowBreakReminders) {\r\n            return false;\r\n          }\r\n          \r\n          // Block non-urgent notifications\r\n          if (!focusMode.allowUrgentOnly && type !== 'breakReminders') {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n      \r\n      // Check specific type preferences\r\n      const typePrefs = state.preferences[type];\r\n      if (typeof typePrefs === 'object' && 'enabled' in typePrefs) {\r\n        return typePrefs.enabled;\r\n      }\r\n      \r\n      return true;\r\n    },\r\n\r\n    isInFocusMode: () => {\r\n      // This would integrate with timer store to check if a focus session is active\r\n      // For now, return false as placeholder\r\n      return false;\r\n    },\r\n\r\n    clearSnoozedState: () => {\r\n      set({ snoozedUntil: null });\r\n    },\r\n  }))\r\n);\r\n\r\n// Load preferences on store initialization\r\nuseNotificationStore.getState().loadPreferences();\r\n\r\n// Set up periodic checks for scheduled reviews\r\nsetInterval(() => {\r\n  const state = useNotificationStore.getState();\r\n  const now = new Date();\r\n  \r\n  // Check for daily review\r\n  if (state.nextDailyReview && now >= state.nextDailyReview) {\r\n    const dailyPrompt: ReviewPrompt = {\r\n      type: 'daily',\r\n      title: 'Daily Reflection',\r\n      questions: [\r\n        {\r\n          id: 'productivity_rating',\r\n          type: 'rating',\r\n          question: 'How would you rate your productivity today?',\r\n          required: true,\r\n        },\r\n        {\r\n          id: 'accomplishments',\r\n          type: 'text',\r\n          question: 'What did you accomplish today?',\r\n          required: false,\r\n        },\r\n        {\r\n          id: 'challenges',\r\n          type: 'text',\r\n          question: 'What challenges did you face?',\r\n          required: false,\r\n        },\r\n        {\r\n          id: 'tomorrow_focus',\r\n          type: 'text',\r\n          question: 'What will you focus on tomorrow?',\r\n          required: false,\r\n        },\r\n      ],\r\n    };\r\n    \r\n    state.showReviewPrompt(dailyPrompt);\r\n  }\r\n  \r\n  // Check for weekly review\r\n  if (state.nextWeeklyReview && now >= state.nextWeeklyReview) {\r\n    const weeklyPrompt: ReviewPrompt = {\r\n      type: 'weekly',\r\n      title: 'Weekly Review',\r\n      questions: [\r\n        {\r\n          id: 'week_rating',\r\n          type: 'rating',\r\n          question: 'How would you rate this week overall?',\r\n          required: true,\r\n        },\r\n        {\r\n          id: 'goals_achieved',\r\n          type: 'yes_no',\r\n          question: 'Did you achieve your main goals this week?',\r\n          required: true,\r\n        },\r\n        {\r\n          id: 'biggest_win',\r\n          type: 'text',\r\n          question: 'What was your biggest win this week?',\r\n          required: false,\r\n        },\r\n        {\r\n          id: 'improvement_area',\r\n          type: 'text',\r\n          question: 'What area would you like to improve next week?',\r\n          required: false,\r\n        },\r\n        {\r\n          id: 'next_week_goals',\r\n          type: 'text',\r\n          question: 'What are your main goals for next week?',\r\n          required: false,\r\n        },\r\n      ],\r\n    };\r\n    \r\n    state.showReviewPrompt(weeklyPrompt);\r\n  }\r\n  \r\n  // Clear snoozed state if expired\r\n  if (state.snoozedUntil && Date.now() >= state.snoozedUntil) {\r\n    state.clearSnoozedState();\r\n  }\r\n}, 60000); // Check every minute"],"names":["initialState","preferences","enabled","sessionComplete","sound","duration","showTaskInfo","breakReminders","frequency","smartThreshold","dailyReview","time","weekendsIncluded","weeklyReview","dayOfWeek","goalAchievements","showProgress","streakMilestones","milestones","idleDetection","threshold","systemSleep","focusMode","suppressOtherNotifications","allowBreakReminders","allowUrgentOnly","activeBreakSuggestion","activeReviewPrompt","dismissedSuggestions","snoozedUntil","nextDailyReview","nextWeeklyReview","lastBreakTime","sessionsSinceLastBreak","totalWorkTimeSinceBreak","useNotificationStore","create","subscribeWithSelector","set","get","updatePreferences","async","fetch","method","headers","body","JSON","stringify","ok","Error","scheduleNextReviews","localStorage","setItem","error","loadPreferences","response","json","saved","getItem","parse","showBreakSuggestion","suggestion","state","canShowNotification","Date","now","dismissBreakSuggestion","type","snoozeBreakSuggestion","minutes","acceptBreakSuggestion","recordBreakTaken","showReviewPrompt","prompt","dismissReviewPrompt","snoozeReviewPrompt","nextTime","submitReviewResponse","incrementSessionCount","addWorkTime","checkForBreakSuggestion","breakPrefs","shouldSuggestBreak","reason","Math","round","suggestedDuration","confidence","totalWorkTime","min","hours","split","map","Number","nextDaily","setHours","setDate","getDate","getDay","nextWeekly","daysUntilTarget","isInFocusMode","typePrefs","clearSnoozedState","getState","setInterval","dailyPrompt","title","questions","id","question","required","weeklyPrompt"],"mappings":"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"}